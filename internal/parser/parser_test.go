package parser

import (
	"fmt"
	"sort"
	"testing"

	"github.com/mtgroupit/mt-back-generator/models"

	"github.com/powerman/check"
)

func TestHandleCfg(tt *testing.T) {
	t := check.T(tt)
	t.Parallel()

	in := &models.Config{
		Name:        "Mini",
		Description: "demo generated app",
		Models: map[string]models.Model{
			"company": models.Model{
				Description: "company object",
				Columns: map[string]models.Options{
					"country": {
						TitleName: "",
						Type:      "model.location",
						GoType:    "",
						Format:    "",
						IsStruct:  false,
						IsArray:   false,
						Pk:        "",
						Unique:    false,
						Length:    0,
						Default:   "",
					},
					"created": {
						TitleName: "",
						Type:      "string",
						GoType:    "",
						Format:    "",
						IsStruct:  false,
						IsArray:   false,
						Pk:        "",
						Unique:    false,
						Length:    0,
						Default:   "",
					},
					"id": {
						TitleName: "",
						Type:      "int64",
						GoType:    "",
						Format:    "",
						IsStruct:  false,
						IsArray:   false,
						Pk:        "",
						Unique:    false,
						Length:    0,
						Default:   "",
					},
					"name": {
						TitleName: "",
						Type:      "string",
						GoType:    "",
						Format:    "",
						IsStruct:  false,
						IsArray:   false,
						Pk:        "",
						Unique:    false,
						Length:    0,
						Default:   "",
					},
					"occupation": {
						TitleName: "",
						Type:      "string",
						GoType:    "",
						Format:    "",
						IsStruct:  false,
						IsArray:   false,
						Pk:        "",
						Unique:    false,
						Length:    0,
						Default:   "",
					},
				},
				Fields:          nil,
				Psql:            nil,
				DeepNesting:     0,
				HaveLazyLoading: false,
				IDIsUUID:        false,
				HaveEmail:       false,
				HaveListMethod:  false,
				SQLSelectStr:    "",
				SQLWhereParams:  "",
				SQLAddStr:       "",
				SQLEditStr:      "",
				SQLExecParams:   "",
				TitleName:       "",
				Binds:           nil,
				Methods:         []string{"get", "add", "edit", "delete", "list"},
				MethodsProps:    nil,
			},
			"employe": models.Model{
				Description: "employe object",
				Columns: map[string]models.Options{
					"firm": models.Options{
						TitleName: "",
						Type:      "model.company",
						GoType:    "",
						Format:    "",
						IsStruct:  false,
						IsArray:   false,
						Pk:        "",
						Unique:    false,
						Length:    0,
						Default:   "",
					},
					"hasShares": models.Options{
						TitleName: "",
						Type:      "bool",
						GoType:    "",
						Format:    "",
						IsStruct:  false,
						IsArray:   false,
						Pk:        "",
						Unique:    false,
						Length:    0,
						Default:   "",
					},
					"id": models.Options{
						TitleName: "",
						Type:      "uuid",
						GoType:    "",
						Format:    "",
						IsStruct:  false,
						IsArray:   false,
						Pk:        "",
						Unique:    false,
						Length:    0,
						Default:   "",
					},
					"mail": models.Options{
						TitleName: "",
						Type:      "string",
						GoType:    "",
						Format:    "email",
						IsStruct:  false,
						IsArray:   false,
						Pk:        "",
						Unique:    false,
						Length:    0,
						Default:   "",
					},
					"name": models.Options{
						TitleName: "",
						Type:      "string",
						GoType:    "",
						Format:    "",
						IsStruct:  false,
						IsArray:   false,
						Pk:        "",
						Unique:    false,
						Length:    0,
						Default:   "",
					},
					"pets": models.Options{
						TitleName: "",
						Type:      "[]model.homeAnimal",
						GoType:    "",
						Format:    "",
						IsStruct:  false,
						IsArray:   false,
						Pk:        "",
						Unique:    false,
						Length:    0,
						Default:   "",
					},
				},
				Fields:          nil,
				Psql:            nil,
				DeepNesting:     0,
				HaveLazyLoading: false,
				IDIsUUID:        false,
				HaveEmail:       false,
				HaveListMethod:  false,
				SQLSelectStr:    "",
				SQLWhereParams:  "",
				SQLAddStr:       "",
				SQLEditStr:      "",
				SQLExecParams:   "",
				TitleName:       "",
				Binds:           nil,
				Methods:         []string{"get", "add", "edit", "delete", "list", "list(id,name*, firm*(name, country(id, name)), pets(name, yearsWithMaster))"},
				MethodsProps:    nil,
			},
			"homeAnimal": models.Model{
				Description: "pet for employee",
				Columns: map[string]models.Options{
					"id": models.Options{
						TitleName: "",
						Type:      "int",
						GoType:    "",
						Format:    "",
						IsStruct:  false,
						IsArray:   false,
						Pk:        "",
						Unique:    false,
						Length:    0,
						Default:   "",
					},
					"name": models.Options{
						TitleName: "",
						Type:      "string",
						GoType:    "",
						Format:    "",
						IsStruct:  false,
						IsArray:   false,
						Pk:        "",
						Unique:    false,
						Length:    0,
						Default:   "",
					},
					"yearsWithMaster": models.Options{
						TitleName: "",
						Type:      "int",
						GoType:    "",
						Format:    "",
						IsStruct:  false,
						IsArray:   false,
						Pk:        "",
						Unique:    false,
						Length:    0,
						Default:   "",
					},
				},
				Fields:          nil,
				Psql:            nil,
				DeepNesting:     0,
				HaveLazyLoading: false,
				IDIsUUID:        false,
				HaveEmail:       false,
				HaveListMethod:  false,
				SQLSelectStr:    "",
				SQLWhereParams:  "",
				SQLAddStr:       "",
				SQLEditStr:      "",
				SQLExecParams:   "",
				TitleName:       "",
				Binds:           nil,
				Methods:         []string{"get", "add", "edit", "delete", "list"},
				MethodsProps:    nil,
			},
			"location": models.Model{
				Description: "location object",
				Columns: map[string]models.Options{
					"city": models.Options{
						TitleName: "",
						Type:      "[]model.townAndCity",
						GoType:    "",
						Format:    "",
						IsStruct:  false,
						IsArray:   false,
						Pk:        "",
						Unique:    false,
						Length:    0,
						Default:   "",
					},
					"id": models.Options{
						TitleName: "",
						Type:      "uuid",
						GoType:    "",
						Format:    "",
						IsStruct:  false,
						IsArray:   false,
						Pk:        "",
						Unique:    false,
						Length:    0,
						Default:   "",
					},
					"name": models.Options{
						TitleName: "",
						Type:      "string",
						GoType:    "",
						Format:    "",
						IsStruct:  false,
						IsArray:   false,
						Pk:        "",
						Unique:    false,
						Length:    0,
						Default:   "",
					},
				},
				Fields:          nil,
				Psql:            nil,
				DeepNesting:     0,
				HaveLazyLoading: false,
				IDIsUUID:        false,
				HaveEmail:       false,
				HaveListMethod:  false,
				SQLSelectStr:    "",
				SQLWhereParams:  "",
				SQLAddStr:       "",
				SQLEditStr:      "",
				SQLExecParams:   "",
				TitleName:       "",
				Binds:           nil,
				Methods:         []string{"get", "add", "edit", "delete", "list"},
				MethodsProps:    nil,
			},
			"townAndCity": models.Model{
				Description: "townAndCity object",
				Columns: map[string]models.Options{
					"id": models.Options{
						TitleName: "",
						Type:      "uuid",
						GoType:    "",
						Format:    "",
						IsStruct:  false,
						IsArray:   false,
						Pk:        "",
						Unique:    false,
						Length:    0,
						Default:   "",
					},
					"name": models.Options{
						TitleName: "",
						Type:      "string",
						GoType:    "",
						Format:    "",
						IsStruct:  false,
						IsArray:   false,
						Pk:        "",
						Unique:    false,
						Length:    0,
						Default:   "",
					},
				},
				Fields:          nil,
				Psql:            nil,
				DeepNesting:     0,
				HaveLazyLoading: false,
				IDIsUUID:        false,
				HaveEmail:       false,
				HaveListMethod:  false,
				SQLSelectStr:    "",
				SQLWhereParams:  "",
				SQLAddStr:       "",
				SQLEditStr:      "",
				SQLExecParams:   "",
				TitleName:       "",
				Binds:           nil,
				Methods:         []string{"get", "add", "edit", "delete", "list"},
				MethodsProps:    nil,
			},
		},
		Functions:      nil,
		HaveListMethod: false,
		HaveDateTime:   false,
		MaxDeepNesting: 0,
		ExtraTables:    nil,
		CurModel:       "",
	}

	expected := &models.Config{
		Name:        "Mini",
		Description: "\"demo generated app\"",
		Models: map[string]models.Model{
			"Company": models.Model{
				Description: "company object",
				Columns: map[string]models.Options{
					"country": models.Options{
						TitleName: "Country",
						Type:      "location",
						GoType:    "Location",
						Format:    "",
						IsStruct:  true,
						IsArray:   false,
						Pk:        "",
						Unique:    false,
						Length:    0,
						Default:   "",
					},
					"created": models.Options{
						TitleName: "Created",
						Type:      "string",
						GoType:    "string",
						Format:    "",
						IsStruct:  false,
						IsArray:   false,
						Pk:        "",
						Unique:    false,
						Length:    0,
						Default:   "",
					},
					"id": models.Options{
						TitleName: "ID",
						Type:      "integer",
						GoType:    "int64",
						Format:    "",
						IsStruct:  false,
						IsArray:   false,
						Pk:        "",
						Unique:    false,
						Length:    0,
						Default:   "",
					},
					"name": models.Options{
						TitleName: "Name",
						Type:      "string",
						GoType:    "string",
						Format:    "",
						IsStruct:  false,
						IsArray:   false,
						Pk:        "",
						Unique:    false,
						Length:    0,
						Default:   "",
					},
					"occupation": models.Options{
						TitleName: "Occupation",
						Type:      "string",
						GoType:    "string",
						Format:    "",
						IsStruct:  false,
						IsArray:   false,
						Pk:        "",
						Unique:    false,
						Length:    0,
						Default:   "",
					},
				},
				Fields: nil,
				Psql: []models.PsqlParams{
					{
						Name:     "ID",
						SQLName:  "id",
						Unique:   false,
						Type:     "int64",
						TypeSQL:  "SERIAL",
						IsArray:  false,
						IsStruct: false,
						FK:       "",
						Last:     false,
					},
					{
						Name:     "Name",
						SQLName:  "name",
						Unique:   false,
						Type:     "string",
						TypeSQL:  "text",
						IsArray:  false,
						IsStruct: false,
						FK:       "",
						Last:     false,
					},
					{
						Name:     "Occupation",
						SQLName:  "occupation",
						Unique:   false,
						Type:     "string",
						TypeSQL:  "text",
						IsArray:  false,
						IsStruct: false,
						FK:       "",
						Last:     false,
					},
					{
						Name:     "Country",
						SQLName:  "country_id",
						Unique:   false,
						Type:     "Location",
						TypeSQL:  "uuid",
						IsArray:  false,
						IsStruct: true,
						FK:       "id",
						Last:     false,
					},
					{
						Name:     "Created",
						SQLName:  "created",
						Unique:   false,
						Type:     "string",
						TypeSQL:  "text",
						IsArray:  false,
						IsStruct: false,
						FK:       "",
						Last:     true,
					},
				},
				DeepNesting:     1,
				HaveLazyLoading: true,
				IDIsUUID:        false,
				HaveEmail:       false,
				HaveListMethod:  true,
				SQLSelectStr:    "id, name, occupation, COALESCE(country_id, '00000000-0000-0000-0000-000000000000') AS country_id, created",
				SQLWhereParams:  "((COALESCE(:id, '1')='1' AND COALESCE(:id, '2')='2') OR id=:id) AND ((COALESCE(:not_id, '1')='1' AND COALESCE(:not_id, '2')='2') OR id\u003c\u003e:not_id) AND ((COALESCE(:name, '1')='1' AND COALESCE(:name, '2')='2') OR name=:name) AND ((COALESCE(:not_name, '1')='1' AND COALESCE(:not_name, '2')='2') OR name\u003c\u003e:not_name) AND ((COALESCE(:occupation, '1')='1' AND COALESCE(:occupation, '2')='2') OR occupation=:occupation) AND ((COALESCE(:not_occupation, '1')='1' AND COALESCE(:not_occupation, '2')='2') OR occupation\u003c\u003e:not_occupation) AND ((COALESCE(:country, '1')='1' AND COALESCE(:country, '2')='2') OR country_id=:country) AND ((COALESCE(:not_country, '1')='1' AND COALESCE(:not_country, '2')='2') OR country_id\u003c\u003e:not_country) AND ((COALESCE(:created, '1')='1' AND COALESCE(:created, '2')='2') OR created=:created) AND ((COALESCE(:not_created, '1')='1' AND COALESCE(:not_created, '2')='2') OR created\u003c\u003e:not_created)",
				SQLAddStr:       "(name, occupation, country_id, created) VALUES ($1, $2, $3, $4)",
				SQLEditStr:      "name=$2, occupation=$3, country_id=$4, created=$5",
				SQLExecParams:   "m.Name, m.Occupation, countryID, m.Created",
				TitleName:       "Company",
				Binds: []models.Bind{
					models.Bind{
						ModelName: "employe",
						FieldName: "firm",
						IsArray:   false,
					},
				},
				Methods: []string{"Get", "Add", "Edit", "Delete", "List"},
				MethodsProps: []models.MethodProps{
					models.MethodProps{
						HTTPMethod:              "post",
						IsCustomList:            false,
						NeedLazyLoading:         false,
						CustomListSQLSelect:     "",
						CustomListSQLWhereProps: "",
						FilteredFields:          nil,
						NestedObjs:              nil,
					},
					models.MethodProps{
						HTTPMethod:              "post",
						IsCustomList:            false,
						NeedLazyLoading:         false,
						CustomListSQLSelect:     "",
						CustomListSQLWhereProps: "",
						FilteredFields:          nil,
						NestedObjs:              nil,
					},
					models.MethodProps{
						HTTPMethod:              "put",
						IsCustomList:            false,
						NeedLazyLoading:         false,
						CustomListSQLSelect:     "",
						CustomListSQLWhereProps: "",
						FilteredFields:          nil,
						NestedObjs:              nil,
					},
					models.MethodProps{
						HTTPMethod:              "delete",
						IsCustomList:            false,
						NeedLazyLoading:         false,
						CustomListSQLSelect:     "",
						CustomListSQLWhereProps: "",
						FilteredFields:          nil,
						NestedObjs:              nil,
					},
					models.MethodProps{
						HTTPMethod:              "post",
						IsCustomList:            false,
						NeedLazyLoading:         false,
						CustomListSQLSelect:     "",
						CustomListSQLWhereProps: "",
						FilteredFields:          nil,
						NestedObjs:              nil,
					},
				},
			},
			"Employe": models.Model{
				Description: "employe object",
				Columns: map[string]models.Options{
					"firm": models.Options{
						TitleName: "Firm",
						Type:      "company",
						GoType:    "Company",
						Format:    "",
						IsStruct:  true,
						IsArray:   false,
						Pk:        "",
						Unique:    false,
						Length:    0,
						Default:   "",
					},
					"hasShares": models.Options{
						TitleName: "HasShares",
						Type:      "boolean",
						GoType:    "bool",
						Format:    "",
						IsStruct:  false,
						IsArray:   false,
						Pk:        "",
						Unique:    false,
						Length:    0,
						Default:   "",
					},
					"id": models.Options{
						TitleName: "ID",
						Type:      "uuid",
						GoType:    "string",
						Format:    "",
						IsStruct:  false,
						IsArray:   false,
						Pk:        "",
						Unique:    false,
						Length:    0,
						Default:   "",
					},
					"mail": models.Options{
						TitleName: "Mail",
						Type:      "string",
						GoType:    "string",
						Format:    "email",
						IsStruct:  false,
						IsArray:   false,
						Pk:        "",
						Unique:    false,
						Length:    0,
						Default:   "",
					},
					"name": models.Options{
						TitleName: "Name",
						Type:      "string",
						GoType:    "string",
						Format:    "",
						IsStruct:  false,
						IsArray:   false,
						Pk:        "",
						Unique:    false,
						Length:    0,
						Default:   "",
					},
					"pets": models.Options{
						TitleName: "Pets",
						Type:      "homeAnimal",
						GoType:    "HomeAnimal",
						Format:    "",
						IsStruct:  true,
						IsArray:   true,
						Pk:        "",
						Unique:    false,
						Length:    0,
						Default:   "",
					},
				},
				Fields: nil,
				Psql: []models.PsqlParams{
					models.PsqlParams{
						Name:     "ID",
						SQLName:  "id",
						Unique:   false,
						Type:     "string",
						TypeSQL:  "uuid",
						IsArray:  false,
						IsStruct: false,
						FK:       "",
						Last:     false,
					},
					models.PsqlParams{
						Name:     "Name",
						SQLName:  "name",
						Unique:   false,
						Type:     "string",
						TypeSQL:  "text",
						IsArray:  false,
						IsStruct: false,
						FK:       "",
						Last:     false,
					},
					models.PsqlParams{
						Name:     "HasShares",
						SQLName:  "has_shares",
						Unique:   false,
						Type:     "bool",
						TypeSQL:  "boolean",
						IsArray:  false,
						IsStruct: false,
						FK:       "",
						Last:     false,
					},
					models.PsqlParams{
						Name:     "Firm",
						SQLName:  "firm_id",
						Unique:   false,
						Type:     "Company",
						TypeSQL:  "integer",
						IsArray:  false,
						IsStruct: true,
						FK:       "id",
						Last:     false,
					},
					models.PsqlParams{
						Name:     "Mail",
						SQLName:  "mail",
						Unique:   false,
						Type:     "string",
						TypeSQL:  "text",
						IsArray:  false,
						IsStruct: false,
						FK:       "",
						Last:     true,
					},
					{
						Name:     "Pets",
						SQLName:  "pets_id",
						Unique:   false,
						Type:     "HomeAnimal",
						TypeSQL:  "integer",
						IsArray:  true,
						IsStruct: true,
						FK:       "id",
						Last:     false,
					},
				},
				DeepNesting:     2,
				HaveLazyLoading: true,
				IDIsUUID:        true,
				HaveEmail:       true,
				HaveListMethod:  true,
				SQLSelectStr:    "id, name, has_shares, COALESCE(firm_id, 0) AS firm_id, mail",
				SQLWhereParams:  "((COALESCE(:id, '1')='1' AND COALESCE(:id, '2')='2') OR id=:id) AND ((COALESCE(:not_id, '1')='1' AND COALESCE(:not_id, '2')='2') OR id\u003c\u003e:not_id) AND ((COALESCE(:name, '1')='1' AND COALESCE(:name, '2')='2') OR name=:name) AND ((COALESCE(:not_name, '1')='1' AND COALESCE(:not_name, '2')='2') OR name\u003c\u003e:not_name) AND ((COALESCE(:hasShares, '1')='1' AND COALESCE(:hasShares, '2')='2') OR has_shares=:hasShares) AND ((COALESCE(:not_hasShares, '1')='1' AND COALESCE(:not_hasShares, '2')='2') OR has_shares\u003c\u003e:not_hasShares) AND ((COALESCE(:firm, '1')='1' AND COALESCE(:firm, '2')='2') OR firm_id=:firm) AND ((COALESCE(:not_firm, '1')='1' AND COALESCE(:not_firm, '2')='2') OR firm_id\u003c\u003e:not_firm) AND ((COALESCE(:mail, '1')='1' AND COALESCE(:mail, '2')='2') OR mail=:mail) AND ((COALESCE(:not_mail, '1')='1' AND COALESCE(:not_mail, '2')='2') OR mail\u003c\u003e:not_mail)",
				SQLAddStr:       "(name, has_shares, firm_id, mail, id) VALUES ($1, $2, $3, $4, $5)",
				SQLEditStr:      "name=$2, has_shares=$3, firm_id=$4, mail=$5",
				SQLExecParams:   "m.Name, m.HasShares, firmID, m.Mail",
				TitleName:       "Employe",
				Binds:           nil,
				Methods:         []string{"Get", "Add", "Edit", "Delete", "List", "ListIDNameFirmPets"},
				MethodsProps: []models.MethodProps{
					models.MethodProps{
						HTTPMethod:              "post",
						IsCustomList:            false,
						NeedLazyLoading:         false,
						CustomListSQLSelect:     "",
						CustomListSQLWhereProps: "",
						FilteredFields:          nil,
						NestedObjs:              nil,
					},
					models.MethodProps{
						HTTPMethod:              "post",
						IsCustomList:            false,
						NeedLazyLoading:         false,
						CustomListSQLSelect:     "",
						CustomListSQLWhereProps: "",
						FilteredFields:          nil,
						NestedObjs:              nil,
					},
					models.MethodProps{
						HTTPMethod:              "put",
						IsCustomList:            false,
						NeedLazyLoading:         false,
						CustomListSQLSelect:     "",
						CustomListSQLWhereProps: "",
						FilteredFields:          nil,
						NestedObjs:              nil,
					},
					models.MethodProps{
						HTTPMethod:              "delete",
						IsCustomList:            false,
						NeedLazyLoading:         false,
						CustomListSQLSelect:     "",
						CustomListSQLWhereProps: "",
						FilteredFields:          nil,
						NestedObjs:              nil,
					},
					models.MethodProps{
						HTTPMethod:              "post",
						IsCustomList:            false,
						NeedLazyLoading:         false,
						CustomListSQLSelect:     "",
						CustomListSQLWhereProps: "",
						FilteredFields:          nil,
						NestedObjs:              nil,
					},
					models.MethodProps{
						HTTPMethod:              "post",
						IsCustomList:            true,
						NeedLazyLoading:         true,
						CustomListSQLSelect:     "id, name, COALESCE(firm_id, 0) AS firm_id",
						CustomListSQLWhereProps: "((COALESCE(:name, '1')='1' AND COALESCE(:name, '2')='2') OR name=:name) AND ((COALESCE(:not_name, '1')='1' AND COALESCE(:not_name, '2')='2') OR name<>:not_name) AND ((COALESCE(:firm, '1')='1' AND COALESCE(:firm, '2')='2') OR firm_id=:firm) AND ((COALESCE(:not_firm, '1')='1' AND COALESCE(:not_firm, '2')='2') OR firm_id<>:not_firm)",
						FilteredFields:          []string{"name", "firm"},
						NestedObjs: []models.NestedObjProps{
							models.NestedObjProps{
								Name:                  "Firm",
								Type:                  "Company",
								SQLSelect:             "name, COALESCE(country_id, '00000000-0000-0000-0000-000000000000') AS country_id",
								Path:                  "",
								ParentStruct:          "Employe",
								NeedLazyLoading:       true,
								IsArray:               false,
								IsFirstForLazyLoading: true,
								IsLastForLazyLoading:  false,
							},
							models.NestedObjProps{
								Name:                  "Pets",
								Type:                  "HomeAnimal",
								SQLSelect:             "name, years_with_master",
								Path:                  "",
								ParentStruct:          "Employe",
								NeedLazyLoading:       false,
								IsArray:               true,
								IsFirstForLazyLoading: false,
								IsLastForLazyLoading:  true,
							},
							models.NestedObjProps{
								Name:                  "Country",
								Type:                  "Location",
								SQLSelect:             "id, name",
								Path:                  "Firm",
								ParentStruct:          "Company",
								NeedLazyLoading:       false,
								IsArray:               false,
								IsFirstForLazyLoading: true,
								IsLastForLazyLoading:  true,
							},
						},
					},
				},
			},
			"HomeAnimal": models.Model{
				Description: "pet for employee",
				Columns: map[string]models.Options{
					"id": models.Options{
						TitleName: "ID",
						Type:      "integer",
						GoType:    "int",
						Format:    "",
						IsStruct:  false,
						IsArray:   false,
						Pk:        "",
						Unique:    false,
						Length:    0,
						Default:   "",
					},
					"name": models.Options{
						TitleName: "Name",
						Type:      "string",
						GoType:    "string",
						Format:    "",
						IsStruct:  false,
						IsArray:   false,
						Pk:        "",
						Unique:    false,
						Length:    0,
						Default:   "",
					},
					"yearsWithMaster": models.Options{
						TitleName: "YearsWithMaster",
						Type:      "integer",
						GoType:    "int",
						Format:    "int",
						IsStruct:  false,
						IsArray:   false,
						Pk:        "",
						Unique:    false,
						Length:    0,
						Default:   "",
					},
				},
				Fields: nil,
				Psql: []models.PsqlParams{
					models.PsqlParams{
						Name:     "ID",
						SQLName:  "id",
						Unique:   false,
						Type:     "int64",
						TypeSQL:  "SERIAL",
						IsArray:  false,
						IsStruct: false,
						FK:       "",
						Last:     false,
					},
					models.PsqlParams{
						Name:     "Name",
						SQLName:  "name",
						Unique:   false,
						Type:     "string",
						TypeSQL:  "text",
						IsArray:  false,
						IsStruct: false,
						FK:       "",
						Last:     false,
					},
					models.PsqlParams{
						Name:     "YearsWithMaster",
						SQLName:  "years_with_master",
						Unique:   false,
						Type:     "int",
						TypeSQL:  "integer",
						IsArray:  false,
						IsStruct: false,
						FK:       "",
						Last:     true,
					},
				},
				DeepNesting:     0,
				HaveLazyLoading: false,
				IDIsUUID:        false,
				HaveEmail:       false,
				HaveListMethod:  true,
				SQLSelectStr:    "id, name, years_with_master",
				SQLWhereParams:  "((COALESCE(:id, '1')='1' AND COALESCE(:id, '2')='2') OR id=:id) AND ((COALESCE(:not_id, '1')='1' AND COALESCE(:not_id, '2')='2') OR id\u003c\u003e:not_id) AND ((COALESCE(:name, '1')='1' AND COALESCE(:name, '2')='2') OR name=:name) AND ((COALESCE(:not_name, '1')='1' AND COALESCE(:not_name, '2')='2') OR name\u003c\u003e:not_name) AND ((COALESCE(:yearsWithMaster, '1')='1' AND COALESCE(:yearsWithMaster, '2')='2') OR years_with_master=:yearsWithMaster) AND ((COALESCE(:not_yearsWithMaster, '1')='1' AND COALESCE(:not_yearsWithMaster, '2')='2') OR years_with_master\u003c\u003e:not_yearsWithMaster)",
				SQLAddStr:       "(name, years_with_master) VALUES ($1, $2)",
				SQLEditStr:      "name=$2, years_with_master=$3",
				SQLExecParams:   "m.Name, m.YearsWithMaster",
				TitleName:       "HomeAnimal",
				Binds: []models.Bind{
					models.Bind{
						ModelName: "employe",
						FieldName: "pets",
						IsArray:   true,
					},
				},
				Methods: []string{"Get", "Add", "Edit", "Delete", "List"},
				MethodsProps: []models.MethodProps{
					models.MethodProps{
						HTTPMethod:              "post",
						IsCustomList:            false,
						NeedLazyLoading:         false,
						CustomListSQLSelect:     "",
						CustomListSQLWhereProps: "",
						FilteredFields:          nil,
						NestedObjs:              nil,
					},
					models.MethodProps{
						HTTPMethod:              "post",
						IsCustomList:            false,
						NeedLazyLoading:         false,
						CustomListSQLSelect:     "",
						CustomListSQLWhereProps: "",
						FilteredFields:          nil,
						NestedObjs:              nil,
					},
					models.MethodProps{
						HTTPMethod:              "put",
						IsCustomList:            false,
						NeedLazyLoading:         false,
						CustomListSQLSelect:     "",
						CustomListSQLWhereProps: "",
						FilteredFields:          nil,
						NestedObjs:              nil,
					},
					models.MethodProps{
						HTTPMethod:              "delete",
						IsCustomList:            false,
						NeedLazyLoading:         false,
						CustomListSQLSelect:     "",
						CustomListSQLWhereProps: "",
						FilteredFields:          nil,
						NestedObjs:              nil,
					},
					models.MethodProps{
						HTTPMethod:              "post",
						IsCustomList:            false,
						NeedLazyLoading:         false,
						CustomListSQLSelect:     "",
						CustomListSQLWhereProps: "",
						FilteredFields:          nil,
						NestedObjs:              nil,
					},
				},
			},
			"Location": models.Model{
				Description: "location object",
				Columns: map[string]models.Options{
					"city": models.Options{
						TitleName: "City",
						Type:      "townAndCity",
						GoType:    "TownAndCity",
						Format:    "",
						IsStruct:  true,
						IsArray:   true,
						Pk:        "",
						Unique:    false,
						Length:    0,
						Default:   "",
					},
					"id": models.Options{
						TitleName: "ID",
						Type:      "uuid",
						GoType:    "string",
						Format:    "",
						IsStruct:  false,
						IsArray:   false,
						Pk:        "",
						Unique:    false,
						Length:    0,
						Default:   "",
					},
					"name": models.Options{
						TitleName: "Name",
						Type:      "string",
						GoType:    "string",
						Format:    "",
						IsStruct:  false,
						IsArray:   false,
						Pk:        "",
						Unique:    false,
						Length:    0,
						Default:   "",
					},
				},
				Fields: nil,
				Psql: []models.PsqlParams{
					models.PsqlParams{
						Name:     "ID",
						SQLName:  "id",
						Unique:   false,
						Type:     "string",
						TypeSQL:  "uuid",
						IsArray:  false,
						IsStruct: false,
						FK:       "",
						Last:     false,
					},
					models.PsqlParams{
						Name:     "Name",
						SQLName:  "name",
						Unique:   false,
						Type:     "string",
						TypeSQL:  "text",
						IsArray:  false,
						IsStruct: false,
						FK:       "",
						Last:     true,
					},
					models.PsqlParams{
						Name:     "City",
						SQLName:  "city_id",
						Unique:   false,
						Type:     "TownAndCity",
						TypeSQL:  "uuid",
						IsArray:  true,
						IsStruct: true,
						FK:       "id",
						Last:     false,
					},
				},
				DeepNesting:     0,
				HaveLazyLoading: true,
				IDIsUUID:        true,
				HaveEmail:       false,
				HaveListMethod:  true,
				SQLSelectStr:    "id, name",
				SQLWhereParams:  "((COALESCE(:id, '1')='1' AND COALESCE(:id, '2')='2') OR id=:id) AND ((COALESCE(:not_id, '1')='1' AND COALESCE(:not_id, '2')='2') OR id\u003c\u003e:not_id) AND ((COALESCE(:name, '1')='1' AND COALESCE(:name, '2')='2') OR name=:name) AND ((COALESCE(:not_name, '1')='1' AND COALESCE(:not_name, '2')='2') OR name\u003c\u003e:not_name)",
				SQLAddStr:       "(name, id) VALUES ($1, $2)",
				SQLEditStr:      "name=$2",
				SQLExecParams:   "m.Name",
				TitleName:       "Location",
				Binds: []models.Bind{
					models.Bind{
						ModelName: "company",
						FieldName: "country",
						IsArray:   false,
					},
				},
				Methods: []string{"Get", "Add", "Edit", "Delete", "List"},
				MethodsProps: []models.MethodProps{
					models.MethodProps{
						HTTPMethod:              "post",
						IsCustomList:            false,
						NeedLazyLoading:         false,
						CustomListSQLSelect:     "",
						CustomListSQLWhereProps: "",
						FilteredFields:          nil,
						NestedObjs:              nil,
					},
					models.MethodProps{
						HTTPMethod:              "post",
						IsCustomList:            false,
						NeedLazyLoading:         false,
						CustomListSQLSelect:     "",
						CustomListSQLWhereProps: "",
						FilteredFields:          nil,
						NestedObjs:              nil,
					},
					models.MethodProps{
						HTTPMethod:              "put",
						IsCustomList:            false,
						NeedLazyLoading:         false,
						CustomListSQLSelect:     "",
						CustomListSQLWhereProps: "",
						FilteredFields:          nil,
						NestedObjs:              nil,
					},
					models.MethodProps{
						HTTPMethod:              "delete",
						IsCustomList:            false,
						NeedLazyLoading:         false,
						CustomListSQLSelect:     "",
						CustomListSQLWhereProps: "",
						FilteredFields:          nil,
						NestedObjs:              nil,
					},
					models.MethodProps{
						HTTPMethod:              "post",
						IsCustomList:            false,
						NeedLazyLoading:         false,
						CustomListSQLSelect:     "",
						CustomListSQLWhereProps: "",
						FilteredFields:          nil,
						NestedObjs:              nil,
					},
				},
			},
			"TownAndCity": models.Model{
				Description: "townAndCity object",
				Columns: map[string]models.Options{
					"id": models.Options{
						TitleName: "ID",
						Type:      "uuid",
						GoType:    "string",
						Format:    "",
						IsStruct:  false,
						IsArray:   false,
						Pk:        "",
						Unique:    false,
						Length:    0,
						Default:   "",
					},
					"name": models.Options{
						TitleName: "Name",
						Type:      "string",
						GoType:    "string",
						Format:    "",
						IsStruct:  false,
						IsArray:   false,
						Pk:        "",
						Unique:    false,
						Length:    0,
						Default:   "",
					},
				},
				Fields: nil,
				Psql: []models.PsqlParams{
					models.PsqlParams{
						Name:     "ID",
						SQLName:  "id",
						Unique:   false,
						Type:     "string",
						TypeSQL:  "uuid",
						IsArray:  false,
						IsStruct: false,
						FK:       "",
						Last:     false,
					},
					models.PsqlParams{
						Name:     "Name",
						SQLName:  "name",
						Unique:   false,
						Type:     "string",
						TypeSQL:  "text",
						IsArray:  false,
						IsStruct: false,
						FK:       "",
						Last:     true,
					},
				},
				DeepNesting:     0,
				HaveLazyLoading: false,
				IDIsUUID:        true,
				HaveEmail:       false,
				HaveListMethod:  true,
				SQLSelectStr:    "id, name",
				SQLWhereParams:  "((COALESCE(:id, '1')='1' AND COALESCE(:id, '2')='2') OR id=:id) AND ((COALESCE(:not_id, '1')='1' AND COALESCE(:not_id, '2')='2') OR id\u003c\u003e:not_id) AND ((COALESCE(:name, '1')='1' AND COALESCE(:name, '2')='2') OR name=:name) AND ((COALESCE(:not_name, '1')='1' AND COALESCE(:not_name, '2')='2') OR name\u003c\u003e:not_name)",
				SQLAddStr:       "(name, id) VALUES ($1, $2)",
				SQLEditStr:      "name=$2",
				SQLExecParams:   "m.Name",
				TitleName:       "TownAndCity",
				Binds: []models.Bind{
					models.Bind{
						ModelName: "location",
						FieldName: "city",
						IsArray:   true,
					},
				},
				Methods: []string{"Get", "Add", "Edit", "Delete", "List"},
				MethodsProps: []models.MethodProps{
					models.MethodProps{
						HTTPMethod:              "post",
						IsCustomList:            false,
						NeedLazyLoading:         false,
						CustomListSQLSelect:     "",
						CustomListSQLWhereProps: "",
						FilteredFields:          nil,
						NestedObjs:              nil,
					},
					models.MethodProps{
						HTTPMethod:              "post",
						IsCustomList:            false,
						NeedLazyLoading:         false,
						CustomListSQLSelect:     "",
						CustomListSQLWhereProps: "",
						FilteredFields:          nil,
						NestedObjs:              nil,
					},
					models.MethodProps{
						HTTPMethod:              "put",
						IsCustomList:            false,
						NeedLazyLoading:         false,
						CustomListSQLSelect:     "",
						CustomListSQLWhereProps: "",
						FilteredFields:          nil,
						NestedObjs:              nil,
					},
					models.MethodProps{
						HTTPMethod:              "delete",
						IsCustomList:            false,
						NeedLazyLoading:         false,
						CustomListSQLSelect:     "",
						CustomListSQLWhereProps: "",
						FilteredFields:          nil,
						NestedObjs:              nil,
					},
					models.MethodProps{
						HTTPMethod:              "post",
						IsCustomList:            false,
						NeedLazyLoading:         false,
						CustomListSQLSelect:     "",
						CustomListSQLWhereProps: "",
						FilteredFields:          nil,
						NestedObjs:              nil,
					},
				},
			},
		},
		Functions:      nil,
		HaveListMethod: true,
		HaveDateTime:   false,
		MaxDeepNesting: 2,
		ExtraTables: []models.ExtraTable{
			models.ExtraTable{
				Name:        "location_city",
				RefTableOne: "Location",
				RefIDOne:    "id",
				FieldIDOne:  "location_id",
				TypeIDOne:   "uuid",
				RefTableTwo: "TownAndCity",
				RefIDTwo:    "id",
				FieldIDTwo:  "city_id",
				TypeIDTwo:   "uuid",
			},
			models.ExtraTable{
				Name:        "employe_pets",
				RefTableOne: "Employe",
				RefIDOne:    "id",
				FieldIDOne:  "employe_id",
				TypeIDOne:   "uuid",
				RefTableTwo: "HomeAnimal",
				RefIDTwo:    "id",
				FieldIDTwo:  "pets_id",
				TypeIDTwo:   "integer",
			},
		},
		CurModel: "",
	}

	out, err := HandleCfg(in)
	t.Nil(err)

	sort.Slice(out.ExtraTables, func(a, b int) bool {
		return out.ExtraTables[a].Name > out.ExtraTables[b].Name
	})
	t.DeepEqual(out.ExtraTables, expected.ExtraTables, fmt.Sprintf("difference ExtraTables"))

	t.DeepEqual(out.HaveListMethod, expected.HaveListMethod, fmt.Sprintf("difference HaveListMethod"))
	t.DeepEqual(out.HaveDateTime, expected.HaveDateTime, fmt.Sprintf("difference HaveDateTime"))
	t.DeepEqual(out.MaxDeepNesting, expected.MaxDeepNesting, fmt.Sprintf("difference MaxDeepNesting"))

	for model := range out.Models {
		outPsql, expectedPsql := out.Models[model].Psql, expected.Models[model].Psql
		if len(outPsql) == len(expectedPsql) {
			sort.Slice(outPsql, func(a, b int) bool {
				return outPsql[a].Name > outPsql[b].Name
			})
			sort.Slice(expectedPsql, func(a, b int) bool {
				return expectedPsql[a].Name > expectedPsql[b].Name
			})

			for i := range outPsql {
				t.Equal(outPsql[i].Name, expectedPsql[i].Name, fmt.Sprintf("difference Psql Name in %s model", model))
				t.Equal(outPsql[i].SQLName, expectedPsql[i].SQLName, fmt.Sprintf("difference Psql SQLName in %s model", model))
				t.Equal(outPsql[i].Unique, expectedPsql[i].Unique, fmt.Sprintf("difference Psql Unique in %s model", model))
				t.Equal(outPsql[i].Type, expectedPsql[i].Type, fmt.Sprintf("difference Psql Type in %s model", model))
				t.Equal(outPsql[i].TypeSQL, expectedPsql[i].TypeSQL, fmt.Sprintf("difference Psql TypeSQL in %s model", model))
				t.Equal(outPsql[i].IsArray, expectedPsql[i].IsArray, fmt.Sprintf("difference Psql IsArray in %s model", model))
				t.Equal(outPsql[i].IsStruct, expectedPsql[i].IsStruct, fmt.Sprintf("difference Psql IsStruct in %s model", model))
				t.Equal(outPsql[i].FK, expectedPsql[i].FK, fmt.Sprintf("difference Psql FK in %s model", model))

			}
		} else {
			t.Errorf("%s model has different Psql length", model)
		}

		t.DeepEqual(out.Models[model].Fields, expected.Models[model].Fields, fmt.Sprintf("difference Fields in %s model", model))
		t.DeepEqual(out.Models[model].Binds, expected.Models[model].Binds, fmt.Sprintf("difference Binds in %s model", model))
		t.DeepEqual(out.Models[model].Columns, expected.Models[model].Columns, fmt.Sprintf("difference Columns in %s model", model))
		t.DeepEqual(out.Models[model].Methods, expected.Models[model].Methods, fmt.Sprintf("difference Methods in %s model", model))
		t.DeepEqual(out.Models[model].MethodsProps, expected.Models[model].MethodsProps, fmt.Sprintf("difference MethodsProps in %s model", model))

		t.Equal(out.Models[model].TitleName, expected.Models[model].TitleName, fmt.Sprintf("difference TitleName in %s model", model))

		t.Equal(out.Models[model].HaveLazyLoading, expected.Models[model].HaveLazyLoading, fmt.Sprintf("difference HaveLazyLoading in %s model", model))
		t.Equal(out.Models[model].IDIsUUID, expected.Models[model].IDIsUUID, fmt.Sprintf("difference IDIsUUID in %s model", model))
		t.Equal(out.Models[model].HaveEmail, expected.Models[model].HaveEmail, fmt.Sprintf("difference HaveEmail in %s model", model))
		t.Equal(out.Models[model].HaveListMethod, expected.Models[model].HaveListMethod, fmt.Sprintf("difference HaveListMethod in %s model", model))
	}
}
