{{- $modelName := .CurModel}}
{{- $model := (index $.Models $modelName)}}
{{- $models := .Models}}
// Code generated by mtgroup-generator.
package dal

import (
	"time"
	{{- if $model.IDIsUUID}}
		"database/sql"
	{{- end}}
	{{- if $model.NeedTypes}}
		"{{.Module}}/internal/types"
	{{- end}}
)

// Make sure not to overwrite this file after you generated it because all your edits would be lost!

const (

	sqlGet{{$modelName}} = `
	SELECT
		{{$model.SQLSelectStr}}
	FROM
		{{Pluralize (NameSQL $modelName)}}
	WHERE
		id=:id AND
		{{- if not $model.Shared}}
		isolated_entity_id=:isolated_entity_id AND
		{{- end}}
		NOT deleted
	`

	sqlGetMy{{$modelName}}ID = `
	SELECT
		id
	FROM
		{{Pluralize (NameSQL $modelName)}}
	WHERE
		{{if not $model.BoundToIsolatedEntity}}created_by=:created_by{{end}}{{if not $model.Shared}}{{if not $model.BoundToIsolatedEntity}} AND
		{{end}}isolated_entity_id=:isolated_entity_id{{end}} AND
		NOT deleted AND
		bound
	`

	{{- range $i, $method := $model.Methods}}
		{{- if IsAdjustGet $method}}
			sql{{$method}}{{$modelName}} = `
	SELECT
		{{(index $model.MethodsProps $i).AdjustSQLSelect}}
	FROM
		{{Pluralize (NameSQL $modelName)}}
	WHERE
		id=:id AND
		{{- if not $model.Shared}}
		isolated_entity_id=:isolated_entity_id AND
		{{- end}}
		NOT deleted
	`
		{{- end}}
	{{- end}}


	sqlAdd{{$modelName}} = `
	INSERT INTO {{Pluralize (NameSQL $modelName)}}{{$model.SQLAddStr}}
	RETURNING
		id
	`

	{{- range $modelName2, $model2 := $.Models}}
		{{- range $column, $options := $model.Columns}}
			{{- if eq $modelName2 $options.BusinessType}}
				{{- if and $options.IsArray $options.IsStruct}}
						sqlAddTo{{Title $column}}In{{$modelName}} = `
	INSERT INTO {{NameSQL $modelName}}_{{NameSQL $column}}(
		{{NameSQL $modelName}}_id,
		{{NameSQL $column}}_id
		{{- if not $model.Shared}},
		isolated_entity_id
		{{- end}}
		)
	VALUES (
		:{{NameSQL $modelName}}_id,
		:{{NameSQL $column}}_id
		{{- if not $model.Shared}},
		:isolated_entity_id
		{{- end}}
	)
	`
				{{- end}}
			{{- end}}
		{{- end}}
	{{- end}}

	sqlBind{{$modelName}}To{{if $model.BoundToIsolatedEntity}}IsolatedEntity{{else}}Profile{{end}} = `
	UPDATE
		{{Pluralize (NameSQL $modelName)}}
	SET
		bound=true
	WHERE
		id=:id AND
		{{- if not $model.BoundToIsolatedEntity}}
		created_by=:created_by AND
		{{- end}}
		{{- if not $model.Shared}}
		isolated_entity_id=:isolated_entity_id AND
		{{- end}}
		NOT deleted AND
		NOT bound
	`

	sqlDelete{{$modelName}} = `
	UPDATE
		{{Pluralize (NameSQL $modelName)}}
	SET
		deleted=true,
		deleted_at=:deleted_at,
		deleted_by=:deleted_by
	WHERE
		id=:id AND
		{{- if not $model.Shared}}
		isolated_entity_id=:isolated_entity_id AND
		{{- end}}
		NOT deleted
	`

	sqlEdit{{$modelName}} = `
	UPDATE
		{{Pluralize (NameSQL $modelName)}}
	SET
		{{$model.SQLEditStr}}
	WHERE
		id=:id AND
		{{- if not $model.Shared}}
		isolated_entity_id=:isolated_entity_id AND
		{{- end}}
		NOT deleted
	`


	{{- if or $model.HaveModifiedAt $model.HaveModifiedBy}}
		sqlSetModifiedParams{{$modelName}} = `
	UPDATE
		{{Pluralize (NameSQL $modelName)}}
	SET
		{{if $model.HaveModifiedAt}}modified_at=:modified_at{{if $model.HaveModifiedBy}},{{end}}{{end}}
		{{if $model.HaveModifiedBy}}modified_by=:modified_by{{end}}
	WHERE
		id=:id
		{{- if not $model.Shared}} AND
		isolated_entity_id=:isolated_entity_id
		{{- end}}
	`
	{{- end}}

	{{- range $i, $method := $model.Methods}}
		{{- if IsAdjustEdit $method}}
			sql{{$method}}{{$modelName}} = `
	UPDATE
		{{Pluralize (NameSQL $modelName)}}
	SET
		{{(index $model.MethodsProps $i).CustomSQLEditStr}}
	WHERE
		id=:id AND
		{{- if not $model.Shared}}
		isolated_entity_id=:isolated_entity_id AND
		{{- end}}
		NOT deleted
	`
		{{- end}}
	{{- end}}
	
	sqlList{{$modelName}} = `
	SELECT
		{{$model.SQLSelectStr}}
	FROM
		{{Pluralize (NameSQL $modelName)}}
	WHERE
		{{$model.SQLWhereParams}}{{if $model.SQLWhereParams}} AND{{end}}
		{{- if not $model.Shared}}
		isolated_entity_id=:isolated_entity_id AND
		{{- end}}
		NOT deleted
	`

	{{- range $i, $method := $model.Methods}}
		{{- if IsAdjustList $method}}
			sql{{$method}}{{$modelName}} = `
	SELECT
		{{(index $model.MethodsProps $i).AdjustSQLSelect}}
	FROM
		{{Pluralize (NameSQL $modelName)}}
	{{if (index $model.MethodsProps $i).FilteredFields}}WHERE
		{{end}}{{(index $model.MethodsProps $i).AdjustListSQLWhereProps}} {{if not $model.Shared}}{{if (index $model.MethodsProps $i).FilteredFields}}AND{{else}}WHERE{{end}}
		isolated_entity_id=:isolated_entity_id{{end}} AND
		NOT deleted
	`
			{{if (index $model.MethodsProps $i).NeedLazyLoading}}
				{{- range $j, $nestedObj := (index $model.MethodsProps $i).NestedObjs}}
					{{- $model2 := (index $.Models $nestedObj.Type)}}
						sqlGet{{$nestedObj.Name}}For{{$method}} = `
	SELECT
		{{$nestedObj.SQLSelect}}
	FROM
		{{Pluralize (NameSQL $nestedObj.Type)}}
	WHERE
		id=:id{{if not $model2.Shared}} AND
		isolated_entity_id=:isolated_entity_id{{end}}
	`
				{{- end}}
			{{end}}
		{{- end}}
	{{- end}}

	{{- if $model.HaveLazyLoading}}
		{{- range $modelName2, $model2 := $.Models}}
			{{- range $column, $options := $model.Columns}}
				{{- if eq $modelName2 $options.BusinessType}}
					{{- if and $options.IsArray $options.IsStruct}}
						sqlGet{{Title $column}}IDsFor{{$modelName}}LazyLoading = `
	SELECT
		{{NameSQL $modelName}}_id,
		{{NameSQL $options.TitleName}}_id
	FROM
		{{NameSQL $modelName}}_{{NameSQL $options.TitleName}}
	WHERE
		{{NameSQL $modelName}}_id=:id{{if not $model.Shared}} AND
		isolated_entity_id=:isolated_entity_id{{end}}
	`
					{{- end}}
					sqlGet{{Title $column}}For{{$modelName}}LazyLoading = `
	SELECT
		{{$model2.SQLSelectStr}}
	FROM
		{{Pluralize (NameSQL $modelName2)}}
	WHERE
		id=:id{{if not $model2.Shared}} AND
		isolated_entity_id=:isolated_entity_id{{end}}
	`
				{{- end}}
			{{end}}
		{{- end}}
	{{- end}}

	{{- range $column, $options := $model.Columns}}
		{{- if  and $options.IsArray $options.IsStruct}}
			sqlDeleteFrom{{Title $column}}In{{$modelName}} = `
	DELETE FROM
		{{NameSQL $modelName}}_{{NameSQL $column}}
	WHERE
		{{NameSQL $modelName}}_id=:{{NameSQL $modelName}}_id AND
		{{NameSQL $column}}_id=:{{NameSQL $column}}_id
		{{- if not $model.Shared}} AND
		isolated_entity_id=:isolated_entity_id
		{{- end}}
	`
		{{- end}}
	{{- end}}
	
)

type (
    argGet{{$modelName}} struct {
        ID sql.Null{{if $model.IDIsUUID}}String{{else}}Int64{{end}} `db:"id"`
		{{- if not $model.Shared}}
			IsolatedEntityID string `db:"isolated_entity_id"`
		{{- end}}
    }

	argGetMy{{$modelName}}ID struct {
		{{- if not $model.BoundToIsolatedEntity}}
			CreatedBy string `db:"created_by"`
		{{- end}}
		{{- if not $model.Shared}}
			IsolatedEntityID string `db:"isolated_entity_id"`
		{{- end}}
    }
	argAdd{{$modelName}} struct {
		{{- range $column, $options := $model.Columns}}
			{{- if $options.IsStruct}}
				{{- if not $options.IsArray}}
					{{$options.TitleName}}ID interface{} `db:"{{NameSQL $column}}_id"`
				{{- end}}
			{{- else}}
				{{- if $options.IsCustom}}
					{{$options.TitleName}}JSON []byte `db:"{{NameSQL $column}}_json"`
				{{- else}}
					{{- if not $options.IsArray}}
						{{- if or (ne $options.TitleName "ID") ($model.IDIsUUID)}}
							{{$options.TitleName}} {{AppType $options}} `db:"{{NameSQL $column}}"`
						{{- end}} 
					{{- else}}
						{{$options.TitleName}}JSON []byte `db:"{{NameSQL $column}}_json"`
					{{- end}}
				{{- end}}
			{{- end}}
		{{- end}}
		{{- if not $model.HaveCreatedBy}}
			CreatedBy string `db:"created_by"`
		{{- end}}
		{{- if not $model.Shared}}
			IsolatedEntityID string `db:"isolated_entity_id"`
		{{- end}}
	}
	{{- range $modelName2, $model2 := $.Models}}
		{{- range $column, $options := $model.Columns}}
			{{- if eq $modelName2 $options.BusinessType}}
				{{- if and $options.IsArray $options.IsStruct}}
						arg{{Title $column}}In{{$modelName}} struct {
							{{$modelName}}ID interface{} `db:"{{NameSQL $modelName}}_id"`
							{{$options.TitleName}}ID interface{} `db:"{{NameSQL $column}}_id"`
							{{- if not $model.Shared}}
								IsolatedEntityID string `db:"isolated_entity_id"`
							{{- end}}
						}
				{{- end}}
			{{- end}}
		{{- end}}
	{{- end}}
	argBind{{$modelName}}To{{if $model.BoundToIsolatedEntity}}IsolatedEntity{{else}}Profile{{end}} struct {
		ID {{if $model.IDIsUUID}}string{{else}}int64{{end}} `db:"id"`
		{{- if not $model.BoundToIsolatedEntity}}
			CreatedBy string `db:"created_by"`
		{{- end}}
		{{- if not $model.Shared}}
			IsolatedEntityID string `db:"isolated_entity_id"`
		{{- end}}
	}
	argEdit{{$modelName}} struct {
		{{- range $column, $options := $model.Columns}}
			{{- if $options.IsStruct}}
				{{- if not $options.IsArray}}
					{{$options.TitleName}}ID interface{} `db:"{{NameSQL $column}}_id"`
				{{- end}}
			{{- else}}
				{{- if $options.IsCustom}}
					{{$options.TitleName}}JSON []byte `db:"{{NameSQL $column}}_json"`
				{{- else}}
					{{- if not $options.IsArray}}
						{{$options.TitleName}} {{AppType $options}} `db:"{{NameSQL $column}}"`
					{{- else}}
						{{$options.TitleName}}JSON []byte `db:"{{NameSQL $column}}_json"`
					{{- end}}
				{{- end}}
			{{- end}}
		{{- end}}
		{{- if not $model.Shared}}
			IsolatedEntityID string `db:"isolated_entity_id"`
		{{- end}}
	}
	{{- range $i, $method := $model.Methods}}
		{{- if IsAdjustEdit $method}}
			arg{{$method}}{{$modelName}} struct {
				ID {{if $model.IDIsUUID}}string{{else}}int64{{end}} `db:"id"`
				{{- range $column, $options := $model.Columns}}
					{{- if ContainsStr (index $model.MethodsProps $i).EditableFields $column}}
						{{- if $options.IsStruct}}
							{{- if not $options.IsArray}}
								{{$options.TitleName}}ID interface{} `db:"{{NameSQL $column}}_id"`
							{{- end}}
						{{- else}}
							{{- if $options.IsCustom}}
								{{$options.TitleName}}JSON []byte `db:"{{NameSQL $column}}_json"`
							{{- else}}
								{{- if not $options.IsArray}}
									{{$options.TitleName}} {{AppType $options}} `db:"{{NameSQL $column}}"`
								{{- else}}
									{{$options.TitleName}}JSON []byte `db:"{{NameSQL $column}}_json"`
								{{- end}}
							{{- end}}
						{{- end}}
					{{- end}}
				{{- end}}
				{{- if not $model.Shared}}
					IsolatedEntityID string `db:"isolated_entity_id"`
				{{- end}}
			}
		{{- end}}
	{{- end}}
	argDelete{{$modelName}} struct {
		ID {{if $model.IDIsUUID}}string{{else}}int64{{end}} `db:"id"`
		DeletedAt *time.Time `db:"deleted_at"`
		DeletedBy string `db:"deleted_by"`
		{{- if not $model.Shared}}
			IsolatedEntityID string `db:"isolated_entity_id"`
		{{- end}}
	}

	{{- if or $model.HaveModifiedAt $model.HaveModifiedBy}}
		argSetModifiedParams{{$modelName}} struct {
			ID {{if $model.IDIsUUID}}string{{else}}int64{{end}} `db:"id"`
			{{- if $model.HaveModifiedAt}}
				ModifiedAt *time.Time `db:"modified_at"`
			{{- end}}
			{{- if $model.HaveModifiedBy}}
				ModifiedBy string `db:"modified_by"`
			{{- end}}
			{{- if not $model.Shared}}
				IsolatedEntityID string `db:"isolated_entity_id"`
			{{- end}}
		}
	{{- end}}
)