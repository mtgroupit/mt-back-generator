// +build integration

package dal

import (
	"context"

	"github.com/google/uuid"
	"github.com/powerman/gotest/testinit"
	"github.com/powerman/pqx"
	"github.com/powerman/structlog"
	"github.com/powerman/check"

	"{{.Module}}/internal/app"
	"{{.Module}}/internal/def"
	{{- if or .HaveTypes .HaveTypesInCustomTypes}}
		"{{.Module}}/internal/types"
	{{- end}}
)

var testRepo *Repo
var ctx = context.Background()

var (
	isolatedEntityID = uuid.New().String()
	profID1 = uuid.New().String()
	profID2 = uuid.New().String()
	
{{- range $modelName, $model := $.Models}}
	test{{$modelName}}1 = &app.{{$modelName}}{
		{{- range $_, $column := (SortColumns $model.Columns)}}
			{{- $options := (index $model.Columns $column)}}
			{{- if not (and (eq $column "id") (eq $options.Type "uuid"))}}
				{{$options.TitleName}}: {{if or $options.IsStruct $options.IsCustom}}{{if $options.IsArray}}test{{$options.GoType}}s{{else}}test{{$options.GoType}}1{{end}}{{else}}{{GenAppTestValue $options}}{{end}},
			{{- end}}
		{{- end}}
	}
	{{- if not $model.BoundToIsolatedEntity}}
		test{{$modelName}}2 = &app.{{$modelName}}{
			{{- range $_, $column := (SortColumns $model.Columns)}}
				{{- $options := (index $model.Columns $column)}}
				{{- if not (and (eq $column "id") (eq $options.Type "uuid"))}}
					{{$options.TitleName}}: {{if or $options.IsStruct $options.IsCustom}}{{if $options.IsArray}}test{{$options.GoType}}s{{else}}test{{$options.GoType}}2{{end}}{{else}}{{GenAppTestValue $options}}{{end}},
				{{- end}}
			{{- end}}
		}
		test{{$modelName}}s = []app.{{$modelName}}{test{{$modelName}}1, test{{$modelName}}2}
	{{- end}}
{{- end}}

{{- range $customTypeName, $customType := $.CustomTypes}}
	{{- $customTypeName = (Title $customTypeName)}}
	test{{$customTypeName}}1 = &app.{{$customTypeName}}{  
		{{- range $field, $options := $customType.Fields}}
		{{Title $field}}: {{if $options.IsCustom}}{{if $options.IsArray}}test{{$options.GoType}}s{{else}}test{{$options.GoType}}1{{end}}{{else}}{{GenAppTestValue $options}}{{end}},
		{{- end}}
	}
	test{{$customTypeName}}2 = &app.{{$customTypeName}}{  
		{{- range $field, $options := $customType.Fields}}
		{{Title $field}}: {{if $options.IsCustom}}{{if $options.IsArray}}test{{$options.GoType}}s{{else}}test{{$options.GoType}}2{{end}}{{else}}{{GenAppTestValue $options}}{{end}},
		{{- end}}
	}
	test{{$customTypeName}}s = []app.{{$customTypeName}}{test{{$customTypeName}}1, test{{$customTypeName}}2}
{{end}}

	{{- if .HaveListMethod}}
		listParams = &ListParams{
			Offset: 0,
			Limit: 5,
			Filters: filters,
			LogicFilter: false,
			SortBy: "",
			OrderBy:"ASC",
		}
		
		filters = []*Filter{
			&Filter{
				Key: "ID",
				Include: true,
				Value: "1",
			},
			&Filter{
				Key: "ID",
				Include: false,
				Value: "2",
			},
		}
	{{- end}}
)

func init() { testinit.Setup(2, setupIntegration) }

func setupIntegration() {
	const dbSuffix = "dal"
	const migrationDir = "../../migration"

	dbCfg := pqx.Config{
		DBName:                          def.DBName,
		User:                            def.DBUser,
		Pass:                            def.DBPass,
		Host:                            def.DBHost,
		Port:                            def.DBPort,
		ConnectTimeout:                  3 * def.TestSecond,
		StatementTimeout:                3 * def.TestSecond,
		LockTimeout:                     3 * def.TestSecond,
		IdleInTransactionSessionTimeout: 3 * def.TestSecond,
		SSLMode:                         pqx.SSLDisable,
	}
	_, cleanup, err := pqx.EnsureTempDB(structlog.New(), dbSuffix, dbCfg)
	if err != nil {
		testinit.Fatal(err)
	}
	testinit.Teardown(cleanup)
	dbCfg.DBName += "_" + dbSuffix

	testRepo, {{if .HaveCustomMethod}}_,{{end}} err = New(ctx, dbCfg, migrationDir{{if .Debug}}, false{{end}})
	if err != nil {
		testinit.Fatal(err)
	}
	testinit.Teardown(testRepo.Close)
}

func (a *Repo) truncate() error {
	_, err := a.db.Exec("TRUNCATE {{TruncateParams .Models}} RESTART IDENTITY CASCADE")
	return err
}

{{- $MaxDeepNesting:=.MaxDeepNesting}}
func addTestData(t *check.C){ 
	var err error
{{- range $i := Iterate $MaxDeepNesting}}
	{{- range $modelName, $model := $.Models}}
		{{- if eq $model.DeepNesting $i}}
			{{if $model.IDIsUUID}}test{{$modelName}}1.ID{{else}}_{{end}}, err = testRepo.add{{$modelName}}({{if $model.IDIsUUID}}{{if $model.BoundToIsolatedEntity}}isolatedEntityID{{else}}{{if HaveMyMethod $model.Methods}}profID1{{else}}uuid.New().String(){{end}}{{end}}, {{end}}{{if $model.HaveCreatedBy}}profID1, {{end}}{{if not $model.Shared}}isolatedEntityID, {{end}}test{{$modelName}}1)
			t.Nil(err)
			{{- if not $model.BoundToIsolatedEntity}}
				{{if $model.IDIsUUID}}test{{$modelName}}2.ID{{else}}_{{end}}, err = testRepo.add{{$modelName}}({{if $model.IDIsUUID}}{{if HaveMyMethod $model.Methods}}profID2{{else}}uuid.New().String(){{end}}, {{end}}{{if $model.HaveCreatedBy}}profID2, {{end}}{{if not $model.Shared}}isolatedEntityID, {{end}}test{{$modelName}}2)
				t.Nil(err)
			{{- end}}
		{{- end}}
	{{- end}}
{{- end}}
}
