// +build integration

package dal

import (
	"context"

	"github.com/powerman/gotest/testinit"
	"github.com/powerman/pqx"
	"github.com/powerman/structlog"
	"gopkg.in/check.v1"

	"{{.Module}}/internal/app"
	"{{.Module}}/internal/def"
)

var testApp *App
var ctx = context.Background()

var (
	{{range $modelName, $model := $.Models}}
	test{{$modelName}}1 = &app.{{$modelName}}{  {{range $column, $options := $model.Columns}}
		{{$options.TitleName}}: {{if $options.IsStruct}}{{if $options.IsArray}}test{{$options.GoType}}s{{else}}test{{$options.GoType}}1{{end}}{{else}}{{if eq $options.GoType "int" "int32" "int64"}}1{{end}}{{if eq $options.GoType "string"}}{{if $options.Format}}{{if eq $options.Format "url"}}"http://127.0.0.1:34763"{{end}}{{if eq $options.Format "date-time"}}"1970-01-01T00:00:00.000Z"{{end}}{{if eq $options.Format "email"}}"test1@test.com"{{end}}{{if eq $options.Format "phone"}}"+79998887766"{{end}}{{else}}"test1"{{end}}{{end}}{{if eq $options.GoType "bool"}}true{{end}}{{end}},{{end}}
	}
	test{{$modelName}}2 = &app.{{$modelName}}{  {{range $column, $options := $model.Columns}}
		{{$options.TitleName}}: {{if $options.IsStruct}}{{if $options.IsArray}}test{{$options.GoType}}s{{else}}test{{$options.GoType}}2{{end}}{{else}}{{if eq $options.GoType "int" "int32" "int64"}}2{{end}}{{if eq $options.GoType "string"}}{{if $options.Format}}{{if eq $options.Format "url"}}"http://localhost:34764"{{end}}{{if eq $options.Format "date-time"}}"1980-02-01T02:00:00.000Z"{{end}}{{if eq $options.Format "email"}}"test2@test.com"{{end}}{{if eq $options.Format "phone"}}"8(999)888-77-66"{{end}}{{else}}"test2"{{end}}{{end}}{{if eq $options.GoType "bool"}}false{{end}}{{end}},{{end}}
	}
	test{{$modelName}}s = []*app.{{$modelName}}{test{{$modelName}}1, test{{$modelName}}2}
	{{end}}
	{{if .HaveListMethod}}
	offset int64 = 0
	limit int64 = 5

	filters = []*app.Filter{
		&app.Filter{
			Key: "ID",
			Include: true,
			Value: "1",
		},
		&app.Filter{
			Key: "ID",
			Include: false,
			Value: "2",
		},
	}
	{{end}}
)

func init() { testinit.Setup(2, setupIntegration) }

func setupIntegration() {
	const dbSuffix = "dal"
	const migrationDir = "../../migration"

	dbCfg := pqx.Config{
		DBName:                          def.DBName,
		User:                            def.DBUser,
		Pass:                            def.DBPass,
		Host:                            def.DBHost,
		Port:                            def.DBPort,
		ConnectTimeout:                  3 * def.TestSecond,
		StatementTimeout:                3 * def.TestSecond,
		LockTimeout:                     3 * def.TestSecond,
		IdleInTransactionSessionTimeout: 3 * def.TestSecond,
		SSLMode:                         pqx.SSLDisable,
	}
	_, cleanup, err := pqx.EnsureTempDB(structlog.New(), dbSuffix, dbCfg)
	if err != nil {
		testinit.Fatal(err)
	}
	testinit.Teardown(cleanup)
	dbCfg.DBName += "_" + dbSuffix

	testApp, err = New(ctx, dbCfg, migrationDir)
	if err != nil {
		testinit.Fatal(err)
	}
	testinit.Teardown(testApp.Close)
}

func (a *App) truncate() error {
	_, err := a.db.Exec("TRUNCATE {{TruncateParams .Models}} RESTART IDENTITY CASCADE")
	return err
}
{{$MaxDeepNesting:=.MaxDeepNesting}}
func addTestData(t *check.C){ {{range $i := Iterate $MaxDeepNesting}}{{range $modelName, $model := $.Models}}{{if eq $model.DeepNesting $i}}
	t.Nil(testApp.Add{{$modelName}}(test{{$modelName}}1))
	t.Nil(testApp.Add{{$modelName}}(test{{$modelName}}2)){{end}}{{end}}{{end}}
}
