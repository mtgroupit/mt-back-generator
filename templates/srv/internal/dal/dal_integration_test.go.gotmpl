// +build integration

package dal

import (
	"testing"

	"github.com/powerman/check"

	"Snouki/internal/app"
)

var (
	{{range $modelName, $model := $.Models}}
	test{{$modelName}}1 = &app.{{$modelName}}{  {{range $column, $options := $model.Columns}}
		{{$options.TitleName}}: {{if $options.IsStruct}}{{if $options.IsArray}}test{{$options.GoType}}s{{else}}test{{$options.GoType}}1{{end}}{{else}}{{if eq $options.GoType "int" "int32" "int64"}}1{{end}}{{if eq $options.GoType "string"}}{{if $options.Format}}{{if eq $options.Format "url"}}"http://127.0.0.1:34763"{{end}}{{if eq $options.Format "date-time"}}"1970-01-01T00:00:00.000Z"{{end}}{{if eq $options.Format "email"}}"test1@test.com"{{end}}{{if eq $options.Format "phone"}}"+79998887766"{{end}}{{else}}"test1"{{end}}{{end}}{{if eq $options.GoType "bool"}}true{{end}}{{end}},{{end}}
	}
	test{{$modelName}}2 = &app.{{$modelName}}{  {{range $column, $options := $model.Columns}}
		{{$options.TitleName}}: {{if $options.IsStruct}}{{if $options.IsArray}}test{{$options.GoType}}s{{else}}test{{$options.GoType}}2{{end}}{{else}}{{if eq $options.GoType "int" "int32" "int64"}}2{{end}}{{if eq $options.GoType "string"}}{{if $options.Format}}{{if eq $options.Format "url"}}"http://localhost:34764"{{end}}{{if eq $options.Format "date-time"}}"1980-02-01T02:00:00.000Z"{{end}}{{if eq $options.Format "email"}}"test2@test.com"{{end}}{{if eq $options.Format "phone"}}"8(999)888-77-66"{{end}}{{else}}"test2"{{end}}{{end}}{{if eq $options.GoType "bool"}}false{{end}}{{end}},{{end}}
	}
	test{{$modelName}}s = []*app.{{$modelName}}{test{{$modelName}}1, test{{$modelName}}2}
	{{end}}
	{{if .HaveListMethod}}
	offset int64 = 0
	limit int64 = 5

	filters = []*app.Filter{
		&app.Filter{
			Key: "ID",
			Include: true,
			Value: "1",
		},
		&app.Filter{
			Key: "ID",
			Include: false,
			Value: "2",
		},
	}
	{{end}}
)
{{range $modelName, $model := $.Models}}{{range $i, $method := $model.Methods}}
func Test{{$method}}{{$modelName}}Smoke(tt *testing.T) {
	t := check.T(tt)

	addTestData(t)

	{{if eq $method "Get"}}
	getted, err := testApp.{{$method}}{{$modelName}}(test{{$modelName}}1.ID)
	t.Nil(err)
	t.DeepEqual(getted, test{{$modelName}}1){{end}}
	{{if eq $method "Add"}}{{end}}
	{{if eq $method "Delete"}}
	addTestData(t)
	t.Nil(testApp.{{$method}}{{$modelName}}(test{{$modelName}}1.ID)){{end}}
	{{if eq $method "Edit"}}
	addTestData(t)
	t.Nil(testApp.{{$method}}{{$modelName}}(test{{$modelName}}1.ID, test{{$modelName}}2)){{end}}

	{{if or (eq $method "List") (IsCustomList $method)}}	
	list, err := testApp.{{$method}}{{$modelName}}(offset, limit, []*app.Filter{})
	t.Nil(err)
	t.DeepEqual(list, test{{$modelName}}s){{end}}
	{{if and (ne $method "Get") (ne $method "Add") (ne $method "Delete") (ne $method "Edit") (ne $method "List") (not (IsCustomList $method))}}
	t.Nil(testApp.{{$method}}{{$modelName}}(test{{$modelName}}1)){{end}}

	t.Nil(testApp.truncate())
}{{end}}{{end}}
{{$MaxDeepNesting:=.MaxDeepNesting}}
func addTestData(t *check.C){ {{range $i := Iterate $MaxDeepNesting}}{{range $modelName, $model := $.Models}}{{if eq $model.DeepNesting $i}}
	t.Nil(testApp.Add{{$modelName}}(test{{$modelName}}1))
	t.Nil(testApp.Add{{$modelName}}(test{{$modelName}}2)){{end}}{{end}}{{end}}
}