// Code generated by mtgroup-generator.
package dal

import (
	"time"
	
	"{{.Module}}/internal/app"
	{{- if or .HaveTypes .HaveTypesInCustomTypes}}
		"{{.Module}}/internal/types"
	{{- end}}

	"github.com/go-openapi/strfmt"
)

// Make sure not to overwrite this file after you generated it because all your edits would be lost!

var (	
{{- range $modelName, $model := $.Models}}
	test{{$modelName}}1 = &app.{{$modelName}}{
		{{- range $_, $column := (SortColumns $model.Columns)}}
			{{- $options := (index $model.Columns $column)}}
			{{- if not (and (eq $column "id") (eq $options.Type "uuid"))}}
			{{$options.TitleName}}: {{if or $options.IsStruct $options.IsCustom}}{{if $options.IsArray}}test{{$options.AppType}}s{{else}}test{{$options.AppType}}1{{end}}{{else}}{{GenAppTestValue $options}}{{end}},
			{{- end}}
		{{- end}}
	}
	{{- if not $model.BoundToIsolatedEntity}}
		test{{$modelName}}2 = &app.{{$modelName}}{
			{{- range $_, $column := (SortColumns $model.Columns)}}
				{{- $options := (index $model.Columns $column)}}
				{{- if not (and (eq $column "id") (eq $options.Type "uuid"))}}
				{{$options.TitleName}}: {{if or $options.IsStruct $options.IsCustom}}{{if $options.IsArray}}test{{$options.AppType}}s{{else}}test{{$options.AppType}}2{{end}}{{else}}{{GenAppTestValue $options}}{{end}},
				{{- end}}
			{{- end}}
		}
		test{{$modelName}}s = []*app.{{$modelName}}{test{{$modelName}}1, test{{$modelName}}2}
	{{- end}}
{{- end}}

{{- range $customTypeName, $customType := $.CustomTypes}}
	{{- $customTypeName = (Title $customTypeName)}}
	test{{$customTypeName}}1 = &app.{{$customTypeName}}{  
		{{- range $field, $options := $customType.Fields}}
		{{Title $field}}: {{if $options.IsCustom}}{{if $options.IsArray}}test{{$options.AppType}}s{{else}}test{{$options.AppType}}1{{end}}{{else}}{{GenAppTestValue $options}}{{end}},
		{{- end}}
	}
	test{{$customTypeName}}2 = &app.{{$customTypeName}}{  
		{{- range $field, $options := $customType.Fields}}
		{{Title $field}}: {{if $options.IsCustom}}{{if $options.IsArray}}test{{$options.AppType}}s{{else}}test{{$options.AppType}}2{{end}}{{else}}{{GenAppTestValue $options}}{{end}},
		{{- end}}
	}
	test{{$customTypeName}}s = []*app.{{$customTypeName}}{test{{$customTypeName}}1, test{{$customTypeName}}2}
{{end}}
)

{{- $MaxDeepNesting:=.MaxDeepNesting}}
func (a *Repo) AddTestData(profileID, isolatedEntityID string) error { 
	var err error
	{{- range $i := Iterate $MaxDeepNesting}}
		{{- range $modelName, $model := $.Models}}
			{{- if eq $model.DeepNesting $i}}
				{{if $model.IDIsUUID}}test{{$modelName}}1.ID{{else}}_{{end}}, err = a.add{{$modelName}}(profileID, {{if not $model.Shared}}isolatedEntityID, {{end}}test{{$modelName}}1)
				if err != nil {
					return err
				}
				{{- if not $model.BoundToIsolatedEntity}}
					{{if $model.IDIsUUID}}test{{$modelName}}2.ID{{else}}_{{end}}, err = a.add{{$modelName}}(profileID, {{if not $model.Shared}}isolatedEntityID, {{end}}test{{$modelName}}2)
					if err != nil {
						return err
					}
				{{- end}}
			{{- end}}
		{{- end}}
	{{- end}}
	return nil
}

func mustParseTime(t string) *time.Time {
	date, err := time.Parse(time.RFC3339, t)
	if err != nil {
		date, _ = time.Parse(strfmt.RFC3339FullDate, t)
	}
	return &date
}