// Code generated by mtgroup-generator.
package app

import (
	"testing"

	"github.com/golang/mock/gomock"
	"github.com/powerman/check"
)

// Make sure not to overwrite this file after you generated it because all your edits would be lost!

var (
	{{range $modelName, $model := $.Models}}
	test{{$modelName}}1 = &{{$modelName}}{  {{range $column, $options := $model.Columns}}
		{{$options.TitleName}}: {{if $options.IsStruct}}{{if $options.IsArray}}test{{$options.GoType}}s{{else}}test{{$options.GoType}}1{{end}}{{else}}{{if eq $options.GoType "int" "int32" "int64"}}1{{end}}{{if eq $options.GoType "string"}}{{if $options.Format}}{{if eq $options.Format "url"}}"http://127.0.0.1:34763"{{end}}{{if eq $options.Format "date-time"}}"1970-01-01T00:00:00.000Z"{{end}}{{if eq $options.Format "email"}}"test1@test.com"{{end}}{{if eq $options.Format "phone"}}"+79998887766"{{end}}{{else}}"test1"{{end}}{{end}}{{if eq $options.GoType "bool"}}true{{end}}{{end}},{{end}}
	}
	test{{$modelName}}2 = &{{$modelName}}{  {{range $column, $options := $model.Columns}}
		{{$options.TitleName}}: {{if $options.IsStruct}}{{if $options.IsArray}}test{{$options.GoType}}s{{else}}test{{$options.GoType}}2{{end}}{{else}}{{if eq $options.GoType "int" "int32" "int64"}}2{{end}}{{if eq $options.GoType "string"}}{{if $options.Format}}{{if eq $options.Format "url"}}"http://localhost:34764"{{end}}{{if eq $options.Format "date-time"}}"1980-02-01T02:00:00.000Z"{{end}}{{if eq $options.Format "email"}}"test2@test.com"{{end}}{{if eq $options.Format "phone"}}"8(999)888-77-66"{{end}}{{else}}"test2"{{end}}{{end}}{{if eq $options.GoType "bool"}}false{{end}}{{end}},{{end}}
	}
	test{{$modelName}}s = []*{{$modelName}}{test{{$modelName}}1, test{{$modelName}}2}
	{{end}}
	{{if .HaveListMethod}}
	offset int64 = 0
	limit int64 = 5
	{{end}}
	{{if .HaveFilterMethod}}
	filters = []*Filter{
		&Filter{
			Key: "ID",
			Include: true,
			Value: "1",
		},
		&Filter{
			Key: "ID",
			Include: false,
			Value: "2",
		},
	}
	{{end}}
)

{{range $modelName, $model := $.Models}}{{range $i, $method := $model.Methods}}
func Test{{$method}}{{$modelName}}(tt *testing.T) {
	t := check.T(tt)
	t.Parallel()
	ctrl := gomock.NewController(t)
	defer ctrl.Finish()

	mockApp := NewMockApp(ctrl)

	a := New(mockApp)

	{{if eq $method "Get"}}mockApp.EXPECT().{{$method}}{{$modelName}}(gomock.Any()).Return(test{{$modelName}}1, nil)
	b, err := a.{{$method}}{{$modelName}}(test{{$modelName}}1.ID)
	t.Nil(err)
	t.DeepEqual(test{{$modelName}}1, b){{end}}
	{{if eq $method "Add"}}mockApp.EXPECT().{{$method}}{{$modelName}}(gomock.Any()).Return(nil)
	err := a.{{$method}}{{$modelName}}(test{{$modelName}}1)
	t.Nil(err){{end}}
	{{if eq $method "Delete"}}mockApp.EXPECT().{{$method}}{{$modelName}}(gomock.Any()).Return(nil)
	err := a.{{$method}}{{$modelName}}(test{{$modelName}}1.ID)
	t.Nil(err){{end}}
	{{if eq $method "Edit"}}mockApp.EXPECT().{{$method}}{{$modelName}}(gomock.Any(), gomock.Any()).Return(nil)
	err := a.{{$method}}{{$modelName}}(test{{$modelName}}1.ID, test{{$modelName}}1)
	t.Nil(err){{end}}

	{{if eq $method "List"}}mockApp.EXPECT().{{$method}}{{$modelName}}(gomock.Any(), gomock.Any()).Return(test{{$modelName}}s, nil)
	b, err := a.{{$method}}{{$modelName}}(offset, limit)
	t.Nil(err)
	t.DeepEqual(test{{$modelName}}s, b){{end}}
	{{if eq $method "Filter"}}mockApp.EXPECT().{{$method}}{{$modelName}}(gomock.Any()).Return(test{{$modelName}}s, nil)
	b, err := a.{{$method}}{{$modelName}}(filters)
	t.Nil(err)
	t.DeepEqual(test{{$modelName}}s, b){{end}}
	{{if and (ne $method "Get") (ne $method "Add") (ne $method "Delete") (ne $method "Edit") (ne $method "List") (ne $method "Filter")}}
	mockApp.EXPECT().{{$method}}{{$modelName}}(gomock.Any()).Return(nil)
	err := a.{{$method}}{{$modelName}}(test{{$modelName}}1)
	t.Nil(err){{end}}
}
{{end}}{{end}}