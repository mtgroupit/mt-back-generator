// Code generated by mtgroup-generator. {{$modelName := .CurModel}}{{$haveCustomMethod := .HaveCustomMethod}} {{$model := (index $.Models $modelName)}}
package app

import (
	"testing"

	"github.com/golang/mock/gomock"
	"github.com/powerman/check"
)

// Make sure not to overwrite this file after you generated it because all your edits would be lost!

{{range $i, $method := $model.Methods}}{{if not (IsCustomMethod $method)}}
func Test{{$method}}{{$modelName}}(tt *testing.T) {
	t := check.T(tt)
	t.Parallel()
	ctrl := gomock.NewController(t)
	defer ctrl.Finish()

	mockApp := NewMockApp(ctrl)
	{{- if $haveCustomMethod}}
	mockCust := NewMockCustoms(ctrl)
	{{- end}}

	a := New(mockApp{{if $haveCustomMethod}}, mockCust{{end}})

	{{- if IsGet $method}}
	mockApp.EXPECT().{{$method}}{{$modelName}}(gomock.Any(){{if not $model.Shared}}, gomock.Any(){{end}}).Return(test{{$modelName}}1, nil)
	b, err := a.{{$method}}{{$modelName}}(test{{$modelName}}1.ID{{if not $model.Shared}}, isolatedEntityID{{end}})
	t.Nil(err)
	t.DeepEqual(test{{$modelName}}1, b)
	{{- end}}
	{{- if IsAdd $method}}
	mockApp.EXPECT().{{$method}}{{$modelName}}({{if or (IsMyMethod $method) $model.HaveCreatedBy}}gomock.Any(), {{end}}{{if not $model.Shared}}gomock.Any(), {{end}}gomock.Any()).Return(test{{$modelName}}1, nil)
	b, err := a.{{$method}}{{$modelName}}({{if or (IsMyMethod $method) $model.HaveCreatedBy}}profID, {{end}}{{if not $model.Shared}}isolatedEntityID, {{end}}test{{$modelName}}1)
	t.Nil(err)
	t.DeepEqual(test{{$modelName}}1, b)
	{{- end}}
	{{- if IsDelete $method}}
	mockApp.EXPECT().{{$method}}{{$modelName}}(gomock.Any(){{if not $model.Shared}}, gomock.Any(){{end}}).Return(nil)
	err := a.{{$method}}{{$modelName}}(test{{$modelName}}1.ID{{if not $model.Shared}}, isolatedEntityID{{end}})
	t.Nil(err)
	{{- end}}
	{{- if IsEdit $method}}
	mockApp.EXPECT().{{$method}}{{$modelName}}(gomock.Any(), {{if $model.HaveModifiedBy}}gomock.Any(), {{end}}{{if not $model.Shared}}gomock.Any(), {{end}}gomock.Any()).Return({{if $model.ReturnWhenEdit}}test{{$modelName}}2, {{end}}nil)
	{{if $model.ReturnWhenEdit}}b, {{end}}err := a.{{$method}}{{$modelName}}(test{{$modelName}}1.ID, {{if $model.HaveModifiedBy}}profID, {{end}}{{if not $model.Shared}}isolatedEntityID, {{end}}test{{$modelName}}1)
	t.Nil(err)
	{{- if $model.ReturnWhenEdit}}
	t.DeepEqual(test{{$modelName}}2, b)
	{{- end}}
	{{- end}}

	{{- if IsList $method}}
	mockApp.EXPECT().{{$method}}{{$modelName}}({{if not $model.Shared}}gomock.Any(), {{end}}gomock.Any(), gomock.Any(), gomock.Any(), gomock.Any(), gomock.Any(), gomock.Any()).Return(test{{$modelName}}s, {{if $model.DetailedPagination}}2, {{end}}[]string{}, nil)
	b, {{if $model.DetailedPagination}}count, {{end}}_, err := a.{{$method}}{{$modelName}}({{if not $model.Shared}}isolatedEntityID, {{end}}offset, limit, filters, logicFilter, sortBy, orderBy)
	t.Nil(err)
	{{- if $model.DetailedPagination}}
	t.Equal(2, count)
	{{- end}}
	t.DeepEqual(test{{$modelName}}s, b)
	{{- end}}
	{{/* {{if and (ne $method "Get") (ne $method "Add") (ne $method "Delete") (ne $method "Edit") (ne $method "List") (not (IsCustomList $method))}}
	mockApp.EXPECT().{{$method}}{{$modelName}}(gomock.Any()).Return(nil)
	err := a.{{$method}}{{$modelName}}(test{{$modelName}}1)
	t.Nil(err){{end}} */}}
}
{{end}}{{end}}