// Code generated by mtgroup-generator.
package app

import (
	{{- if .HaveDateTime}}
		"time"
	{{- end}}

	"github.com/google/uuid"
	{{- if or .HaveTypes .HaveTypesInCustomTypes}}
		"{{.Module}}/internal/types"
	{{- end}}
)

// Make sure not to overwrite this file after you generated it because all your edits would be lost!

var (
	isolatedEntityID = uuid.New().String()
	profileID = uuid.New().String()

{{- range $modelName, $model := $.Models}}
	test{{$modelName}}1 = &{{$modelName}}{  
		{{- range $column, $options := $model.Columns}}
		{{$options.TitleName}}: {{if and (eq $column "id") (eq $options.Type "uuid")}}uuid.New().String(){{else}}{{if or $options.IsStruct $options.IsCustom}}{{if $options.IsArray}}test{{$options.GoType}}s{{else}}test{{$options.GoType}}1{{end}}{{else}}{{GenAppTestValue $options}}{{end}}{{end}},
		{{- end}}
	}
	{{- if not $model.BoundToIsolatedEntity}}
		test{{$modelName}}2 = &{{$modelName}}{  
			{{- range $column, $options := $model.Columns}}
			{{$options.TitleName}}: {{if and (eq $column "id") (eq $options.Type "uuid")}}uuid.New().String(){{else}}{{if or $options.IsStruct $options.IsCustom}}{{if $options.IsArray}}test{{$options.GoType}}s{{else}}test{{$options.GoType}}2{{end}}{{else}}{{GenAppTestValue $options}}{{end}}{{end}},
			{{- end}}
		}
		test{{$modelName}}s = []*{{$modelName}}{test{{$modelName}}1, test{{$modelName}}2}
	{{- end}}
{{- end}}

{{- range $customTypeName, $customType := $.CustomTypes}}
	{{- $customTypeName = (Title $customTypeName)}}
	test{{$customTypeName}}1 = &{{$customTypeName}}{  
		{{- range $field, $options := $customType.Fields}}
		{{Title $field}}: {{if $options.IsCustom}}{{if $options.IsArray}}test{{$options.GoType}}s{{else}}test{{$options.GoType}}1{{end}}{{else}}{{GenAppTestValue $options}}{{end}},
		{{- end}}
	}
	test{{$customTypeName}}2 = &{{$customTypeName}}{  
		{{- range $field, $options := $customType.Fields}}
		{{Title $field}}: {{if $options.IsCustom}}{{if $options.IsArray}}test{{$options.GoType}}s{{else}}test{{$options.GoType}}2{{end}}{{else}}{{GenAppTestValue $options}}{{end}},
		{{- end}}
	}
	test{{$customTypeName}}s = []*{{$customTypeName}}{test{{$customTypeName}}1, test{{$customTypeName}}2}
{{end}}

{{- if .HaveListMethod}}
	offset int64 = 0
	limit int64 = 5
	logicFilter = false
	sortBy = ""
	orderBy = "ASC"
	
	filters = []*Filter{
		&Filter{
			Key: "ID",
			Include: true,
			Value: "1",
		},
		&Filter{
			Key: "ID",
			Include: false,
			Value: "2",
		},
	}
{{- end}}
)

{{- if .HaveDateTime}}
	func mustParseTime(t string) (date time.Time) {
		date, _ = time.Parse(time.RFC3339, t)
		return
	}
{{- end}}