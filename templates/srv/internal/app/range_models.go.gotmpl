// Code generated by mtgroup-generator. {{$modelName := .CurModel}} {{$model := (index $.Models $modelName)}}
package app
{{- if or $model.NeedTypes $model.NeedTime}}
import (
	{{- if $model.NeedTypes}}
		"{{.Module}}/internal/types"
	{{- end}}
	{{- if $model.NeedTime}}
		"time"
	{{- end}}
)
{{- end}}

// Make sure not to overwrite this file after you generated it because all your edits would be lost!
type {{$modelName}} struct {
	{{- range $_, $name := (SortColumns $model.Columns)}}
		{{- $options := (index $model.Columns $name)}}
		{{$options.TitleName}} {{if $options.IsArray}}[]{{end}}{{if or $options.IsStruct $options.IsCustom}}*{{end}}{{$options.GoType}}
	{{- end}}
}

{{- range $i, $method := $model.Methods}}
{{- if not (IsCustomMethod $method)}}
	{{- if IsGet $method}}
		func (a *app) {{$method}}{{$modelName}}({{if not $model.BoundToIsolatedEntity}}id {{if $model.IDIsUUID}}string{{else}}int64{{end}}{{end}}{{if not $model.Shared}}{{if not $model.BoundToIsolatedEntity}}, {{end}}isolatedEntityID string{{end}}) (*{{$modelName}}, error) {
			return a.repo.{{$method}}{{$modelName}}({{if not $model.BoundToIsolatedEntity}}id{{end}}{{if not $model.Shared}}{{if not $model.BoundToIsolatedEntity}}, {{end}}isolatedEntityID{{end}})
		}
	{{- end}}
	{{- if IsAdd $method}}
		func (a *app) {{$method}}{{$modelName}}(profileID string, {{if not $model.Shared}}isolatedEntityID string, {{end}}m *{{$modelName}}) (*{{$modelName}}, error) {
			return a.repo.{{$method}}{{$modelName}}(profileID, {{if not $model.Shared}}isolatedEntityID, {{end}}m)
		}
	{{- end}}
	{{- if IsDelete $method}}
		func (a *app) {{$method}}{{$modelName}}({{if not (IsMyMethod $method)}}id {{if $model.IDIsUUID}}string{{else}}int64{{end}}, {{end}}profileID string{{if not $model.Shared}}, isolatedEntityID string{{end}}) error {
			return a.repo.{{$method}}{{$modelName}}({{if not (IsMyMethod $method)}}id, {{end}}profileID{{if not $model.Shared}}, isolatedEntityID{{end}})
		}
	{{- end}}
	{{- if IsEdit $method}}
		func (a *app) {{$method}}{{$modelName}}({{if not (IsMyMethod $method)}}id {{if $model.IDIsUUID}}string{{else}}int64{{end}}, {{end}}{{if or (and (IsMyMethod $method) (not $model.BoundToIsolatedEntity)) $model.HaveModifiedBy}}profileID string, {{end}}{{if not $model.Shared}}isolatedEntityID string, {{end}}m *{{$modelName}}) {{if $model.ReturnWhenEdit}}(*{{$modelName}}, error){{else}}error{{end}} {
			return a.repo.{{$method}}{{$modelName}}({{if not (IsMyMethod $method)}}id, {{end}}{{if or (and (IsMyMethod $method) (not $model.BoundToIsolatedEntity)) $model.HaveModifiedBy}}profileID, {{end}}{{if not $model.Shared}}isolatedEntityID, {{end}}m)
		}
	{{- end}}
	{{- if IsList $method}}
		func (a *app) {{$method}}{{$modelName}}({{if not $model.Shared}}isolatedEntityID string, {{end}}params *ListParams) ([]*{{$modelName}}, {{if $model.DetailedPagination}}int, {{end}}[]string, error) {
			return a.repo.{{$method}}{{$modelName}}({{if not $model.Shared}}isolatedEntityID, {{end}}params)
		}
	{{- end}}
{{- end}}
{{- end}}
{{range $column, $options := $model.Columns}} {{if  and $options.IsArray $options.IsStruct}}
func (a *app) Add{{Title $column}}{{$modelName}}(id {{if $model.IDIsUUID}}string{{else}}int64{{end}}, {{if $model.HaveModifiedBy}}profileID string, {{end}}{{if not $model.Shared}}isolatedEntityID string, {{end}}itemsID []{{if (index $.Models $options.GoType).IDIsUUID}}string{{else}}int64{{end}}, items []*{{$options.GoType}}) error {
	return a.repo.Add{{Title $column}}{{$modelName}}(id, {{if $model.HaveModifiedBy}}profileID, {{end}}{{if not $model.Shared}}isolatedEntityID, {{end}}itemsID, items)
}

func (a *app) Delete{{Title $column}}{{$modelName}}(id {{if $model.IDIsUUID}}string{{else}}int64{{end}}, {{if $model.HaveModifiedBy}}profileID string, {{end}}{{if not $model.Shared}}isolatedEntityID string, {{end}}items []{{if (index $.Models $options.GoType).IDIsUUID}}string{{else}}int64{{end}}) error {
	return a.repo.Delete{{Title $column}}{{$modelName}}(id, {{if $model.HaveModifiedBy}}profileID, {{end}}{{if not $model.Shared}}isolatedEntityID, {{end}}items)
}
{{end}}{{end}}
func (a *app) {{$modelName}}AccessManager(m *AccessManager) error {
	return a.repo.{{$modelName}}AccessManager(m)
}

{{range $functionName, $function := $.Functions}}
func (a *app) {{$functionName}}{{$modelName}}({{$function.InStrFull}}) ({{$function.OutStrType}}, error) {
	return a.repo.{{$functionName}}{{$modelName}}({{$function.InStr}})
}{{end}}

