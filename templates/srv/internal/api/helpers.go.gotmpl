// Code generated by mtgroup-generator.
package api

import (
	{{- if .HaveTime}}
		"time"
	{{- end}}
	"strings"

	"{{.Module}}/internal/api/restapi/models"
	"{{.Module}}/internal/app"

	extauthapi "{{.AuthSrv}}"

	{{- if or .HaveTime .HaveEmail}}
		"github.com/go-openapi/strfmt"
	{{- end}}
)

// Make sure not to overwrite this file after you generated it because all your edits would be lost!


{{if .HaveListMethod}}
    func appListParams(apiLP *models.ListParams) *app.ListParams {
        var offset int64 = 0
        if apiLP.Offset != nil {
            offset = *apiLP.Offset
        }
        return &app.ListParams{
            Offset:      offset,
            Limit:       apiLP.Limit,
            Filters:     appFilters(apiLP.Filters),
            LogicFilter: apiLP.LogicFilter,
            SortBy:      apiLP.SortBy,
            OrderBy:     apiLP.OrderBy,
        }
    }

	func appFilters(apiFP []*models.FilterParams) []*app.Filter {
		appF := []*app.Filter{}
		for _, fp := range apiFP {
			appF = append(appF, &app.Filter{
				Include: fp.Include,
				Key:     fp.Key,
				Value:   fp.Value,
			})
		}
		return appF
	}
{{end}}

{{if .HaveTime}}
	func fromDateTimesArray(dts []*strfmt.DateTime) (dates []*time.Time) {
		for _, date := range dts {
			dates = append(dates, (*time.Time)(date))
		}
		return
	}

	func toDateTimesArray(dates []*time.Time) (dts []*strfmt.DateTime) {
		for _, date := range dates {
			dts = append(dts, (*strfmt.DateTime)(date))
		}
		return
	}

	func fromDatesArray(ds []*strfmt.Date) (dates []*time.Time) {
		for _, date := range ds {
			dates = append(dates, (*time.Time)(date))
		}
		return
	}

	func toDatesArray(dates []*time.Time) (ds []*strfmt.Date) {
		for _, date := range dates {
			ds = append(ds, (*strfmt.Date)(date))
		}
		return
	}
{{end}}

{{if .HaveEmail}}
	func fromEmailsArray(es []strfmt.Email) (emails []string) {
		for _, email := range es {
			emails = append(emails, email.String())
		}
		return
	}

	func toEmailsArray(emails []string) (es []strfmt.Email) {
		for _, email := range emails {
			es = append(es, strfmt.Email(email))
		}
		return
	}
{{end}}

{{if .HaveFloatArr}}
	func float64to32Array(floats64 []float64) (floats32 []float32) {
		for _, f64 := range floats64 {
			floats32 = append(floats32, float32(f64))
		}
		return
	}

	func float32to64Array(floats32 []float32) (floats64 []float64) {
		for _, f32 := range floats32 {
			floats64 = append(floats64, float64(f32))
		}
		return
	}
{{end}}

func toAppProfile(prof *extauthapi.Profile) app.Profile {
	return app.Profile{
		ID:    prof.ID.String(),
		Authn: prof.Authn,
		Authz: app.Authz{
			User:    prof.Authz.User,
			Manager: prof.Authz.Manager,
			Admin:   prof.Authz.Admin,
		},
		IsolatedEntityID: prof.IsolatedEntityID.String(),
	}
}

func splitCommaSeparatedStr(commaSeparated string) (result []string) {
	for _, item := range strings.Split(commaSeparated, ",") {
		item = strings.TrimSpace(item)
		if item != "" {
			result = append(result, item)
		}
	}
	return
}
