package api  {{$modelName := .CurModel}} {{$model := (index $.Models $modelName)}}

import (
	"testing"

	"{{.Module}}/internal/api/restapi/client"
	"{{.Module}}/internal/api/restapi/client/operations"

	"github.com/powerman/check"
)

{{range $i, $method := $model.Methods}}
func Test{{$method}}{{$modelName}}(tt *testing.T) {
	t := check.T(tt)
	// t.Parallel()
	tsURL, shutdown, mockApp := testNewServer(t)
	defer shutdown()
	c := client.NewHTTPClientWithConfig(nil, &client.TransportConfig{
		Host: tsURL,
	})

	params := operations.New{{$method}}{{$modelName}}Params()
	{{if eq $method "Get"}}
	params.Body = test{{$modelName}}1
	mockApp.EXPECT().{{$method}}{{$modelName}}(params.Body.ID).Return(app{{$modelName}}(test{{$modelName}}1{{if $model.HaveLazyLoading}}, true{{end}}), nil)

	t.Run("", func(tt *testing.T) {
		t := check.T(tt)
		geted, err := c.Operations.{{$method}}{{$modelName}}(params)
		t.Nil(err)
		t.DeepEqual(geted.Payload, test{{$modelName}}1)
	}){{end}}
	{{if eq $method "Add"}}	
	params.Body = test{{$modelName}}1
	mockApp.EXPECT().{{$method}}{{$modelName}}(app{{$modelName}}(test{{$modelName}}1{{if $model.HaveLazyLoading}}, true{{end}})).Return(nil)

	t.Run("", func(tt *testing.T) {
		t := check.T(tt)
		_, err := c.Operations.{{$method}}{{$modelName}}(params)
		t.Nil(err)
	}){{end}}
	{{if eq $method "Delete"}}
	params.Body = test{{$modelName}}1
	mockApp.EXPECT().{{$method}}{{$modelName}}(params.Body.ID).Return(nil)

	t.Run("", func(tt *testing.T) {
		t := check.T(tt)
		_, err := c.Operations.{{$method}}{{$modelName}}(params)
		t.Nil(err)
	}){{end}}
	{{if eq $method "Edit"}}
	params.Body = test{{$modelName}}1
	mockApp.EXPECT().{{$method}}{{$modelName}}(params.Body.ID, app{{$modelName}}(test{{$modelName}}1{{if $model.HaveLazyLoading}}, true{{end}})).Return(nil)

	t.Run("", func(tt *testing.T) {
		t := check.T(tt)
		_, err := c.Operations.{{$method}}{{$modelName}}(params)
		t.Nil(err)
	}){{end}}

	{{if or (eq $method "List") (IsCustomList $method)}}
	params.Body = testList
	mockApp.EXPECT().{{$method}}{{$modelName}}(*params.Body.Offset, *params.Body.Limit, appFilters(params.Body.Filters)).Return(app{{$modelName}}s(test{{$modelName}}s{{if $model.HaveLazyLoading}}, true{{end}}), nil)

	t.Run("", func(tt *testing.T) {
		t := check.T(tt)
		list, err := c.Operations.{{$method}}{{$modelName}}(params)
		t.Nil(err)
		t.DeepEqual(list.Payload, test{{$modelName}}s)
	}){{end}}
	{{if and (ne $method "Get") (ne $method "Add") (ne $method "Delete") (ne $method "Edit") (ne $method "List") (not (IsCustomList $method))}}
	params.Body = test{{$modelName}}1
	mockApp.EXPECT().{{$method}}{{$modelName}}(app{{$modelName}}(test{{$modelName}}1{{if $model.HaveLazyLoading}}, true{{end}})).Return(nil)

	t.Run("", func(tt *testing.T) {
		t := check.T(tt)
		_, err := c.Operations.{{$method}}{{$modelName}}(params)
		t.Nil(err)
	}){{end}}
}
{{end}}