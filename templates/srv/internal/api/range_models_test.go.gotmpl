package api  {{$modelName := .CurModel}} {{$model := (index $.Models $modelName)}}

import (
	"testing"

	"{{.Module}}/internal/api/restapi/client"
	{{if $model.Tags}}{{LowerTitle (index $model.Tags 0)}} {{end}}"{{.Module}}/internal/api/restapi/client/{{if $model.Tags}}{{NameSQL (index $model.Tags 0)}}{{else}}operations{{end}}"
	
	cl "github.com/go-openapi/runtime/client"
	"github.com/golang/mock/gomock"
	"github.com/powerman/check"
)

{{range $i, $method := $model.Methods}}{{if not (IsCustomMethod $method)}}
func Test{{$method}}{{$modelName}}(tt *testing.T) {
	t := check.T(tt)
	// t.Parallel()
	tsURL, shutdown, mockApp, mockExtAuthSvc := testNewServer(t)
	defer shutdown()
	c := client.NewHTTPClientWithConfig(nil, &client.TransportConfig{
		Host: tsURL,
	})

	mockExtAuthSvc.EXPECT().GetUserProfile(gomock.Any(), matchCookie(sess)).Return(profile, nil)

	params := {{if $model.Tags}}{{LowerTitle (index $model.Tags 0)}}{{else}}operations{{end}}.New{{$method}}{{$modelName}}Params()
	{{- if IsGet $method}}
		{{- if not (IsMyMethod $method)}}
			params.Body.ID = test{{$modelName}}ID1
		{{- end}}
		mockApp.EXPECT().{{$method}}{{$modelName}}({{if not $model.BoundToIsolatedEntity}}gomock.Any(){{end}}{{if not $model.Shared}}{{if not $model.BoundToIsolatedEntity}}, {{end}}gomock.Any(){{end}}).Return(app{{$modelName}}(test{{$modelName}}1{{if $model.HaveLazyLoading}}, true{{end}}), nil)

		t.Run("", func(tt *testing.T) {
			t := check.T(tt)
			geted, err := c.{{if $model.Tags}}{{index $model.Tags 0}}{{else}}Operations{{end}}.{{$method}}{{$modelName}}(params, cl.APIKeyAuth("Cookie", "header", sess))
			t.Nil(err)
			t.DeepEqual(geted.Payload, api{{$modelName}}(app{{$modelName}}(test{{$modelName}}1{{if $model.HaveLazyLoading}}, true{{end}})))
		})
	{{- end}}
	{{- if IsAdd $method}}	
		params.Body = testAdd{{$modelName}}1
		mockApp.EXPECT().{{$method}}{{$modelName}}(gomock.Any(), {{if not $model.Shared}}gomock.Any(), {{end}}gomock.Any()).Return(app{{$modelName}}(test{{$modelName}}1{{if $model.HaveLazyLoading}}, true{{end}}), nil)

		t.Run("", func(tt *testing.T) {
			t := check.T(tt)
			geted, err := c.{{if $model.Tags}}{{index $model.Tags 0}}{{else}}Operations{{end}}.{{$method}}{{$modelName}}(params, cl.APIKeyAuth("Cookie", "header", sess))
			t.Nil(err)
			t.DeepEqual(geted.Payload, api{{$modelName}}(app{{$modelName}}(test{{$modelName}}1{{if $model.HaveLazyLoading}}, true{{end}})))
		})
	{{- end}}
	{{- if IsDelete $method}}
		{{- if not (IsMyMethod $method)}}
			params.Body.ID = test{{$modelName}}1.ID
		{{- end}}
		mockApp.EXPECT().{{$method}}{{$modelName}}({{if not (IsMyMethod $method)}}gomock.Any(), {{end}}gomock.Any(){{if not $model.Shared}}, gomock.Any(){{end}}).Return(nil)

		t.Run("", func(tt *testing.T) {
			t := check.T(tt)
			_, err := c.{{if $model.Tags}}{{index $model.Tags 0}}{{else}}Operations{{end}}.{{$method}}{{$modelName}}(params, cl.APIKeyAuth("Cookie", "header", sess))
			t.Nil(err)
		})
	{{- end}}
	{{- if IsEdit $method}}
		{{- if IsCustomEdit $method}}
			params.Body = {{if $model.Tags}}{{LowerTitle (index $model.Tags 0)}}{{else}}operations{{end}}.{{$method}}{{$model.TitleName}}Body{
				{{- if not (IsMyMethod $method)}}
					ID: test{{$modelName}}1.ID,
				{{- end}}
				Data: &{{if $model.Tags}}{{LowerTitle (index $model.Tags 0)}}{{else}}operations{{end}}.{{$method}}{{$model.TitleName}}ParamsBodyData{
					{{- range $name, $options := $model.Columns}}
						{{- if ContainsStr (index $model.MethodsProps $i).EditableFields $name}}
							{{$options.TitleName}}: test{{$modelName}}1.{{$options.TitleName}}{{if $options.IsStruct}}.ID{{end}},
						{{- end}}
					{{- end}}
				},
			}
			{{- if $model.ReturnWhenEdit}}
				test{{$modelName}}1Edited := test{{$modelName}}1
				{{- range $name, $options := $model.Columns}}
					{{- if ContainsStr (index $model.MethodsProps $i).EditableFields $name}}
						test{{$modelName}}1Edited.{{$options.TitleName}}{{if $options.IsStruct}}.ID{{end}} = test{{$modelName}}1.{{$options.TitleName}}{{if $options.IsStruct}}.ID{{end}}
					{{- end}}
				{{- end}}
			{{- end}}
		{{- else}}
			params.Body.Data = testAdd{{$modelName}}1
			{{- if not (IsMyMethod $method)}}
				params.Body.ID = test{{$modelName}}1.ID
			{{- end}}
		{{- end}}
		mockApp.EXPECT().{{$method}}{{$modelName}}({{if not (IsMyMethod $method)}}gomock.Any(), {{end}}{{if or (and (IsMyMethod $method) (not $model.BoundToIsolatedEntity)) $model.HaveModifiedBy}}gomock.Any(), {{end}}{{if not $model.Shared}}gomock.Any(), {{end}}gomock.Any()).Return({{if $model.ReturnWhenEdit}}app{{$modelName}}(test{{$modelName}}1{{if IsCustomEdit $method}}Edited{{end}}{{if $model.HaveLazyLoading}}, true{{end}}), {{end}}nil)
		t.Run("", func(tt *testing.T) {
			t := check.T(tt)
			{{if $model.ReturnWhenEdit}}geted{{else}}_{{end}}, err := c.{{if $model.Tags}}{{index $model.Tags 0}}{{else}}Operations{{end}}.{{$method}}{{$modelName}}(params, cl.APIKeyAuth("Cookie", "header", sess))
			t.Nil(err)
			{{- if $model.ReturnWhenEdit}}
				t.DeepEqual(geted.Payload, api{{$modelName}}(app{{$modelName}}(test{{$modelName}}1{{if IsCustomEdit $method}}Edited{{end}}{{if $model.HaveLazyLoading}}, true{{end}})))
			{{- end}}
		})
	{{- end}}
	{{- if IsList $method}}
	params.Body = testList
	mockApp.EXPECT().{{$method}}{{$modelName}}({{if not $model.Shared}}gomock.Any(), {{end}}params.Body.Offset, *params.Body.Limit, appFilters(params.Body.Filters), params.Body.LogicFilter, params.Body.SortBy, params.Body.OrderBy).Return(app{{$modelName}}s(test{{$modelName}}s{{if $model.HaveLazyLoading}}, true{{end}}), {{if $model.DetailedPagination}}2, {{end}}[]string{}, nil)

	t.Run("", func(tt *testing.T) {
		t := check.T(tt)
		list, err := c.{{if $model.Tags}}{{index $model.Tags 0}}{{else}}Operations{{end}}.{{$method}}{{$modelName}}(params, cl.APIKeyAuth("Cookie", "header", sess))
		t.Nil(err)
		t.DeepEqual(list.Payload.Items, api{{$modelName}}s(app{{$modelName}}s(test{{$modelName}}s{{if $model.HaveLazyLoading}}, true{{end}})))
	})
	{{- end}}
	{{/* {{if and (ne $method "Get") (ne $method "Add") (ne $method "Delete") (ne $method "Edit") (ne $method "List") (not (IsCustomList $method))}}
	params.Body = test{{$modelName}}1
	mockApp.EXPECT().{{$method}}{{$modelName}}(app{{$modelName}}(test{{$modelName}}1{{if $model.HaveLazyLoading}}, true{{end}})).Return(nil)

	t.Run("", func(tt *testing.T) {
		t := check.T(tt)
		_, err := c.{{if $model.Tags}}{{index $model.Tags 0}}{{else}}Operations{{end}}.{{$method}}{{$modelName}}(params)
		t.Nil(err)
	}){{end}} */}}
}
{{end}}{{end}}