package api

import (
	"fmt"
	"testing"

	"Snouki/internal/api/restapi/models"
	"Snouki/internal/app"
	"Snouki/internal/def"

	{{if .HaveDateTime}}"github.com/go-openapi/strfmt"{{end}}
	"github.com/golang/mock/gomock"
	"github.com/powerman/check"
	"github.com/powerman/gotest/testinit"
)

var ({{range $modelName, $model := $.Models}}
	test{{$modelName}}1 = &models.{{$modelName}}{  {{range $column, $options := $model.Columns}}
		{{$options.TitleName}}: {{if $options.IsStruct}}{{if $options.IsArray}}test{{$options.GoType}}s{{else}}test{{$options.GoType}}1{{end}}{{else}}{{if eq $options.GoType "int" "int32" "int64"}}1{{end}}{{if eq $options.GoType "string"}}{{if $options.Format}}{{if eq $options.Format "url"}}"http://127.0.0.1:34763"{{end}}{{if eq $options.Format "date-time"}}toDateTime("1970-01-01T00:00:00.000Z"){{end}}{{if eq $options.Format "email"}}strfmt.Email("test1@test.com"){{end}}{{if eq $options.Format "phone"}}"+79998887766"{{end}}{{else}}"test1"{{end}}{{end}}{{if eq $options.GoType "bool"}}true{{end}}{{end}},{{end}}
	}
	test{{$modelName}}2 = &models.{{$modelName}}{  {{range $column, $options := $model.Columns}}
		{{$options.TitleName}}: {{if $options.IsStruct}}{{if $options.IsArray}}test{{$options.GoType}}s{{else}}test{{$options.GoType}}2{{end}}{{else}}{{if eq $options.GoType "int" "int32" "int64"}}2{{end}}{{if eq $options.GoType "string"}}{{if $options.Format}}{{if eq $options.Format "url"}}"http://localhost:34764"{{end}}{{if eq $options.Format "date-time"}}toDateTime("1980-02-01T02:00:00.000Z"){{end}}{{if eq $options.Format "email"}}strfmt.Email("test2@test.com"){{end}}{{if eq $options.Format "phone"}}"8(999)888-77-66"{{end}}{{else}}"test2"{{end}}{{end}}{{if eq $options.GoType "bool"}}false{{end}}{{end}},{{end}}
	}
	test{{$modelName}}s = []*models.{{$modelName}}{test{{$modelName}}1, test{{$modelName}}2}
	{{end}}
	{{if .HaveListMethod}}
	offset int64 = 0
	limit  int64 = 5

	testFilters = []*models.FilterParams{
		&models.FilterParams{
			Key:     "ID",
			Include: true,
			Value:   "1",
		},
		&models.FilterParams{
			Key:     "ID",
			Include: false,
			Value:   "2",
		},
	}
	testList = &models.ListParams{
		Offset: &offset,
		Limit:  &limit,
	}
	{{end}}
)

func TestMain(m *testing.M) { testinit.Main(m) }

func testNewServer(t *check.C) (string, func(), *app.MockApp) {
	t.Helper()
	ctrl := gomock.NewController(t)

	mockApp := app.NewMockApp(ctrl)

	server, err := NewServer(mockApp, Config{
		Host:     "localhost",
		Port:     def.APIPort,
		BasePath: def.APIBasePath,
	})
	t.Nil(err, "NewServer")
	t.Nil(server.Listen(), "server.Listen")
	errc := make(chan error, 1)
	go func() { errc <- server.Serve() }()

	shutdown := func() {
		t.Helper()
		t.Nil(server.Shutdown(), "server.Shutdown")
		t.Nil(<-errc, "server.Serve")
		ctrl.Finish()
	}

	url := fmt.Sprintf("localhost:%d", server.Port)

	return url, shutdown, mockApp
}
