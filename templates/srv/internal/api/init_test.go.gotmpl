package api

import (
	"fmt"
	"net/http"
	"testing"
	{{- if .HaveTime}}
		"time"
	{{- end}}

	"{{.Module}}/internal/api/restapi/models"
	"{{.Module}}/internal/app"
	"{{.Module}}/internal/def"
	extauthapi "{{.AuthSrv}}"

	{{- $strfmtOn := false}}
	{{- if .HaveTime}}
		"github.com/go-openapi/strfmt"
		{{- $strfmtOn = true}}
	{{- end}}
	{{- if not $strfmtOn}}
		{{- range $modelName, $model := $.Models}}
			{{- if and (not $strfmtOn) ($model.HaveEmail)}}
				"github.com/go-openapi/strfmt"
				{{- $strfmtOn = true}}
			{{- end}}
		{{- end}}
	{{- end}}
	{{- if or .HaveConv .HaveConvInCustomTypes}}
		"github.com/go-openapi/strfmt/conv"
	{{- end}}
	{{- if or .HaveSwag .HaveSwagInCustomTypes}}
		"github.com/go-openapi/swag"
	{{- end}}
	"github.com/golang/mock/gomock"
	"github.com/powerman/check"
	"github.com/powerman/gotest/testinit"
	"github.com/google/uuid"
	"github.com/phayes/freeport"
)

var (
	isolatedEntityID = uuid.New().String()
	profileID           = uuid.New().String()
	sess             = extauthapi.SessionCookieName + "=sess"
	profile          = &extauthapi.Profile{
		ID:    extauthapi.MustParseID(profileID),
		Authn: true,
		IsolatedEntityID: extauthapi.MustParseID(isolatedEntityID),
	}

{{- range $modelName, $model := $.Models}}
	{{- $idType := (index $model.Columns "id").Type}}
	test{{$modelName}}ID1 {{if eq $idType "int64"}}int64{{end}} = {{if eq $idType "uuid"}}{{if $model.BoundToIsolatedEntity}}isolatedEntityID{{else}}uuid.New().String(){{end}}{{else}}1{{end}}
	test{{$modelName}}1 = &models.{{$modelName}}{  
		{{- range $column, $options := $model.Columns}}
		{{$options.TitleName}}: {{if eq $column "id"}}test{{$modelName}}ID1{{else}}{{if or $options.IsStruct $options.IsCustom}}{{if $options.IsArray}}test{{$options.BusinessType}}s{{else}}test{{$options.BusinessType}}1{{end}}{{else}}{{GenApiTestValue $options}}{{end}}{{end}},
		{{- end}}
	}
	{{- if not $model.BoundToIsolatedEntity}}
		test{{$modelName}}ID2 {{if eq $idType "int64"}}int64{{end}} = {{if eq $idType "uuid"}}uuid.New().String(){{else}}2{{end}}
		test{{$modelName}}2 = &models.{{$modelName}}{  
			{{- range $column, $options := $model.Columns}}
			{{$options.TitleName}}: {{if eq $column "id"}}test{{$modelName}}ID1{{else}}{{if or $options.IsStruct $options.IsCustom}}{{if $options.IsArray}}test{{$options.BusinessType}}s{{else}}test{{$options.BusinessType}}2{{end}}{{else}}{{GenApiTestValue $options}}{{end}}{{end}},
			{{- end}}
		}
		test{{$modelName}}s = []*models.{{$modelName}}{test{{$modelName}}1, test{{$modelName}}2}
	{{- end}}
	testAdd{{$modelName}}1 = &models.{{$modelName}}Add{  
		{{- range $column, $options := $model.Columns}}
		{{- if and (ne $column "id") (not (IsStandardColumn $column))}}
		{{$options.TitleName}}: {{if $options.IsStruct}}{{if $options.IsArray}}[]{{if eq $idType "uuid"}}string{{else}}int64{{end}}{test{{$options.BusinessType}}ID1, test{{$options.BusinessType}}ID2}{{else}}{{if $options.Required}}swag.{{if eq $idType "uuid"}}String{{else}}Int64{{end}}({{end}}test{{$options.BusinessType}}1.ID{{if $options.Required}}){{end}}{{end}}{{else}}{{if $options.IsCustom}}{{if $options.IsArray}}test{{$options.BusinessType}}s{{else}}test{{$options.BusinessType}}1{{end}}{{else}}{{GenApiTestValue $options}}{{end}}{{end}},
		{{- end}}
		{{- end}}
	}
	{{- if not $model.BoundToIsolatedEntity}}
	testAdd{{$modelName}}2 = &models.{{$modelName}}Add{  
		{{- range $column, $options := $model.Columns}}
		{{- if and (ne $column "id") (not (IsStandardColumn $column))}}
		{{$options.TitleName}}: {{if $options.IsStruct}}{{if $options.IsArray}}[]{{if eq $idType "uuid"}}string{{else}}int64{{end}}{test{{$options.BusinessType}}ID1, test{{$options.BusinessType}}ID2}{{else}}{{if $options.Required}}swag.{{if eq $idType "uuid"}}String{{else}}Int64{{end}}({{end}}test{{$options.BusinessType}}2.ID{{if $options.Required}}){{end}}{{end}}{{else}}{{if $options.IsCustom}}{{if $options.IsArray}}test{{$options.BusinessType}}s{{else}}test{{$options.BusinessType}}2{{end}}{{else}}{{GenApiTestValue $options}}{{end}}{{end}},
		{{- end}}
		{{- end}}
	}
	{{- end}}
{{- end}}

{{- range $customTypeName, $customType := $.CustomTypes}}
	{{- $customTypeName = (Title $customTypeName)}}
	test{{$customTypeName}}1 = &models.{{$customTypeName}}{  
		{{- range $field, $options := $customType.Fields}}
		{{Title $field}}: {{if $options.IsCustom}}{{if $options.IsArray}}test{{$options.BusinessType}}s{{else}}test{{$options.BusinessType}}1{{end}}{{else}}{{GenApiTestValue $options}}{{end}},
		{{- end}}
	}
	test{{$customTypeName}}2 = &models.{{$customTypeName}}{  
		{{- range $field, $options := $customType.Fields}}
		{{Title $field}}: {{if $options.IsCustom}}{{if $options.IsArray}}test{{$options.BusinessType}}s{{else}}test{{$options.BusinessType}}2{{end}}{{else}}{{GenApiTestValue $options}}{{end}},
		{{- end}}
	}
	test{{$customTypeName}}s = []*models.{{$customTypeName}}{test{{$customTypeName}}1, test{{$customTypeName}}2}
{{- end}}

{{if .HaveListMethod}}
	offset int64 = 0
	limit  int64 = 5

	testFilters = []*models.FilterParams{
		&models.FilterParams{
			Key:     "ID",
			Include: true,
			Value:   "1",
		},
		&models.FilterParams{
			Key:     "ID",
			Include: false,
			Value:   "2",
		},
	}
	testList = &models.ListParams{
		Offset: &offset,
		Limit:  limit,
		Filters: testFilters,
		LogicFilter: false,
		SortBy: "ASC",
	}
{{end}}
)

func TestMain(m *testing.M) { testinit.Main(m) }

func testNewServer(t *check.C) (string, func(), *app.MockApp, *MockAuthSvc) {
	t.Helper()
	ctrl := gomock.NewController(t)

	mockApp := app.NewMockApp(ctrl)
	{{- if .HaveCustomMethod}}
	mockCust := app.NewMockCustoms(ctrl)
	{{- end}}
	mockExtAuthSvc := NewMockAuthSvc(ctrl)

	port , err := freeport.GetFreePort()
	if err != nil {
		log.Fatal(err)
	}
	
	server, err := NewServer(mockApp, {{if .HaveCustomMethod}}mockCust, {{end}}mockExtAuthSvc, Config{
		Host:     "localhost",
		Port:     port,
		BasePath: def.APIBasePath,
	})
	t.Nil(err, "NewServer")
	t.Nil(server.Listen(), "server.Listen")
	errc := make(chan error, 1)
	go func() { errc <- server.Serve() }()

	shutdown := func() {
		t.Helper()
		t.Nil(server.Shutdown(), "server.Shutdown")
		t.Nil(<-errc, "server.Serve")
		ctrl.Finish()
	}

	url := fmt.Sprintf("localhost:%d", server.Port)

	return url, shutdown, mockApp, mockExtAuthSvc
}

type matchCookie string // Implements gomock.Matcher.

func (m matchCookie) String() string { return string(m) }
func (m matchCookie) Matches(x interface{}) bool {
	for _, c := range (&http.Request{Header: map[string][]string{"Cookie": {x.(string)}}}).Cookies() {
		if c.String() == string(m) {
			return true
		}
	}
	return false
}

{{- if .HaveTime}}
	func fromDateTime(dt strfmt.DateTime) time.Time {
		return time.Time(dt)
	}

	func toDateTime(date interface{}) (*strfmt.DateTime) {
		if date == nil {
			return nil
		}
		var dt strfmt.DateTime
		dt.Scan(date)
		return &dt
	}
	
	func fromDate(d strfmt.Date) time.Time {
		return time.Time(d)
	}

	func toDate(date interface{}) (*strfmt.Date) {
		if date == nil {
			return nil
		}
		var dt strfmt.Date
		dt.Scan(date)
		return &dt
	}
{{end}}
