// Code generated by mtgroup-generator.
package api

import (
	"context"
	"net/http"
	"path"

	"{{.Module}}/internal/api/restapi/models"
	"{{.Module}}/internal/api/restapi/restapi"
	"{{.Module}}/internal/api/restapi/restapi/operations"
	{{$module := .Module}}{{range $tag, $_ := .Tags}}"{{$module}}/internal/api/restapi/restapi/operations/{{$tag}}"
	{{end}}
	"{{.Module}}/internal/app"

	"github.com/go-openapi/loads"
	"github.com/go-openapi/runtime/middleware"
	{{if .HaveDateTime}}"github.com/go-openapi/strfmt"{{end}}
	goflags "github.com/jessevdk/go-flags"
	"github.com/pkg/errors"
	"github.com/powerman/structlog"
	"github.com/sebest/xff"
)

// Make sure not to overwrite this file after you generated it because all your edits would be lost!

// Ctx is a synonym for convenience.
type Ctx = context.Context

// Log is a synonym for convenience.
type Log = *structlog.Logger

type Config struct {
	Host       string
	Port       int
	BasePath   string
	TLSCert    string
	TLSCertKey string
}

type service struct {
	app     app.App
	extAuth AuthSvc
}

func NewServer(appl app.App, extAuth AuthSvc, cfg Config) (*restapi.Server, error) {
	svc := &service{
		app:     appl,
		extAuth: extAuth,
	}

	swaggerSpec, err := loads.Embedded(restapi.SwaggerJSON, restapi.FlatSwaggerJSON)
	if err != nil {
		return nil, errors.Wrap(err, "failed to load embedded swagger spec")
	}
	if cfg.BasePath == "" {
		cfg.BasePath = swaggerSpec.BasePath()
	}
	swaggerSpec.Spec().BasePath = cfg.BasePath

	api := operations.New{{FormatName .Name}}API(swaggerSpec)

	api.Logger = structlog.New(structlog.KeyUnit, "swagger").Printf
	api.CookieKeyAuth = svc.checkerAuth
	api.CsrfTokenAuth = svc.csrfTokenAuth

    {{range $modelName, $model := $.Models}}{{range $i, $method := $model.Methods}}
	api.{{if $model.Tags}}{{(index $model.Tags 0)}}{{end}}{{$method}}{{$model.TitleName}}Handler = {{if $model.Tags}}{{LowerTitle (index $model.Tags 0)}}{{else}}operations{{end}}.{{$method}}{{$model.TitleName}}HandlerFunc(svc.{{$method}}{{$modelName}}) {{end}}
	api.{{if $model.Tags}}{{(index $model.Tags 0)}}{{end}}{{$model.TitleName}}AccessManagerHandler = {{if $model.Tags}}{{LowerTitle (index $model.Tags 0)}}{{else}}operations{{end}}.{{$model.TitleName}}AccessManagerHandlerFunc(svc.{{$model.TitleName}}AccessManager)
	{{end}}
    {{range $modelName, $model := $.Models}}{{range $function, $_ := $.Functions}}
	api.{{$modelName}}{{$function}}Handler = operations.{{$modelName}}{{$function}}HandlerFunc(svc.{{$function}}{{$modelName}}) {{end}}{{end}}

	server := restapi.NewServer(api)
	server.TLSHost = string(cfg.Host)
	server.TLSPort = int(cfg.Port)
	server.TLSCertificate = goflags.Filename(cfg.TLSCert)
	server.TLSCertificateKey = goflags.Filename(cfg.TLSCertKey)

	// The middleware executes before anything.
	globalMiddlewares := func(handler http.Handler) http.Handler {
		xffmw, _ := xff.Default()
		logger := makeLogger(cfg.BasePath)
		accesslog := makeAccessLog(cfg.BasePath)
		redocOpts := middleware.RedocOpts{
			BasePath: cfg.BasePath,
			SpecURL:  path.Join(cfg.BasePath, "/swagger.json"),
		}
		return xffmw.Handler(logger(noCache(recovery(accesslog(
			middleware.Spec(cfg.BasePath, restapi.FlatSwaggerJSON,
				middleware.Redoc(redocOpts,
					handler)))))))
	}
	// The middleware executes after serving /swagger.json and routing,
	// but before authentication, binding and validation.
	middlewares := func(handler http.Handler) http.Handler {
		safePath := map[string]bool{
			cfg.BasePath + "/consultation/list": true,
			cfg.BasePath + "/demand/list":       true,
		}
		isSafe := func(r *http.Request) bool { return safePath[r.URL.Path] }
		forbidCSRF := makeForbidCSRF(isSafe)
		return forbidCSRF(handler)
	}
	server.SetHandler(globalMiddlewares(api.Serve(middlewares)))

	return server, nil
}

func appAccessManager(am *models.AccessManager) *app.AccessManager {
	return &app.AccessManager{
		User:          am.User,
		Group:         am.Group,
		Read:          am.Read,
		Write:         am.Write,
		Delete:        am.Delete,
		Add:           am.Add,
		AccessManager: am.AccessManager,
	}
}
{{if .HaveListMethod}}
func appFilters(apiFP []*models.FilterParams) []*app.Filter {
	appF := []*app.Filter{}
	for _, fp := range apiFP {
		appF = append(appF, &app.Filter{
			Include: fp.Include,
			Key:     fp.Key,
			Value:   fp.Value,
		})
	}
	return appF
}{{end}}
{{if .HaveDateTime}}
func toDateTime(date string) (dt strfmt.DateTime) {
	dt.Scan(date)
	return dt
}{{end}}
