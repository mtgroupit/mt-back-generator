// Code generated by mtgroup-generator.
package api

import (
	"{{.Name}}/internal/api/restapi/models"
	"{{.Name}}/internal/api/restapi/restapi"
	"{{.Name}}/internal/api/restapi/restapi/operations"
	"{{.Name}}/internal/app"

	{{if .HaveDateTime}}"github.com/go-openapi/strfmt"{{end}}
	"github.com/go-openapi/loads"
	"github.com/pkg/errors"
	"github.com/powerman/structlog"
)

// Make sure not to overwrite this file after you generated it because all your edits would be lost!

type Config struct {
	Host     string
	Port     int
	BasePath string
}

type service struct {
	app app.App
}

var log = structlog.New()

func NewServer(appl app.App, cfg Config) (*restapi.Server, error) {
	svc := &service{
		app: appl,
	}

	swaggerSpec, err := loads.Embedded(restapi.SwaggerJSON, restapi.FlatSwaggerJSON)
	if err != nil {
		return nil, errors.Wrap(err, "failed to load embedded swagger spec")
	}
	if cfg.BasePath == "" {
		cfg.BasePath = swaggerSpec.BasePath()
	}
	swaggerSpec.Spec().BasePath = cfg.BasePath

	api := operations.New{{.Name}}API(swaggerSpec)

	api.Logger = structlog.New(structlog.KeyUnit, "swagger").Printf

    {{range $modelName, $model := $.Models}}{{range $i, $method := $model.Methods}}
	api.{{$method}}{{$model.TitleName}}Handler = operations.{{$method}}{{$model.TitleName}}HandlerFunc(svc.{{$method}}{{$modelName}}) {{end}}
	api.{{$model.TitleName}}AccessManagerHandler = operations.{{$model.TitleName}}AccessManagerHandlerFunc(svc.{{$model.TitleName}}AccessManager)
	{{end}}
    {{range $modelName, $model := $.Models}}{{range $function, $_ := $.Functions}}
	api.{{$modelName}}{{$function}}Handler = operations.{{$modelName}}{{$function}}HandlerFunc(svc.{{$function}}{{$modelName}}) {{end}}{{end}}

	server := restapi.NewServer(api)
	server.Host = cfg.Host
	server.Port = cfg.Port

	return server, nil
}

func appAccessManager(am *models.AccessManager) *app.AccessManager {
	return &app.AccessManager{
		User: am.User,
		Group: am.Group,
		Read: am.Read,
		Write: am.Write,
		Delete: am.Delete,
		Add: am.Add,
		AccessManager: am.AccessManager,
	}
}
{{if .HaveListMethod}}
func appFilters(apiFP []*models.FilterParams) []*app.Filter {
	appF := []*app.Filter{}
	for _, fp := range apiFP {
		appF = append(appF, &app.Filter{
			Include: fp.Include,
			Key:     fp.Key,
			Value:   fp.Value,
		})
	}
	return appF
}{{end}}
{{if .HaveDateTime}}
func toDateTime(date string) (dt strfmt.DateTime) {
	dt.Scan(date)
	return dt
}{{end}}
