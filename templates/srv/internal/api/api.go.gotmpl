// Code generated by mtgroup-generator.
package api

import (
	"context"
	"net/http"
	"path"

	"{{.Module}}/internal/api/restapi/restapi"
	"{{.Module}}/internal/api/restapi/restapi/operations"
	"{{.Module}}/internal/api/restapi/restapi/operations/standard"
	{{$module := .Module}}
	{{- range $name, $_ := .Models}}
		{{LowerTitle $name}} "{{$module}}/internal/api/restapi/restapi/operations/{{NameSQL $name}}"
	{{- end}}
	"{{.Module}}/internal/app"
	"github.com/rs/cors"

	"github.com/go-openapi/loads"
	"github.com/go-openapi/runtime/middleware"
	"github.com/pkg/errors"
	"github.com/powerman/structlog"
	"github.com/sebest/xff"
)

// Make sure not to overwrite this file after you generated it because all your edits would be lost!

// Ctx is a synonym for convenience.
type Ctx = context.Context

// Log is a synonym for convenience.
type Log = *structlog.Logger

type Config struct {
	Host       string
	Port       int
	BasePath   string
	AllowedOrigin string
}

type service struct {
	app     app.App
{{- if .HaveCustomMethod}}
	cust    app.Customs
{{- end}}
	extAuth AuthSvc
}

func NewServer(appl app.App,{{if .HaveCustomMethod}}cust app.Customs,{{end}} extAuth AuthSvc, cfg Config) (*restapi.Server, error) {
	svc := &service{
		app:     appl,
	{{- if .HaveCustomMethod}}
		cust:    cust,
	{{- end}}
		extAuth: extAuth,
	}

	swaggerSpec, err := loads.Embedded(restapi.SwaggerJSON, restapi.FlatSwaggerJSON)
	if err != nil {
		return nil, errors.Wrap(err, "failed to load embedded swagger spec")
	}
	if cfg.BasePath == "" {
		cfg.BasePath = swaggerSpec.BasePath()
	}
	swaggerSpec.Spec().BasePath = cfg.BasePath

	api := operations.New{{FormatName .Name}}API(swaggerSpec)

	api.Logger = structlog.New(structlog.KeyUnit, "swagger").Printf
	api.CookieKeyAuth = svc.checkerAuth
	api.CsrfTokenAuth = svc.csrfTokenAuth

	api.StandardHealthCheckHandler = standard.HealthCheckHandlerFunc(healthCheck)
    {{- range $modelName, $model := $.Models}}
		{{- range $i, $method := $model.Methods}}
			api.{{$model.TitleName}}{{$method}}{{$model.TitleName}}Handler = {{LowerTitle $modelName}}.{{$method}}{{$model.TitleName}}HandlerFunc(svc.{{$method}}{{$modelName}})
		{{- end}}
		{{- range $column, $options := $model.Columns}}
			{{- if and $options.IsArray $options.IsStruct}}
				api.{{$model.TitleName}}Add{{Title $column}}{{$model.TitleName}}Handler = {{LowerTitle $modelName}}.Add{{Title $column}}{{$model.TitleName}}HandlerFunc(svc.Add{{Title $column}}{{$modelName}})
				api.{{$model.TitleName}}Delete{{Title $column}}{{$model.TitleName}}Handler = {{LowerTitle $modelName}}.Delete{{Title $column}}{{$model.TitleName}}HandlerFunc(svc.Delete{{Title $column}}{{$modelName}})
			{{- end}}
		{{- end}}
		api.{{$model.TitleName}}{{$model.TitleName}}AccessManagerHandler = {{LowerTitle $modelName}}.{{$model.TitleName}}AccessManagerHandlerFunc(svc.{{$model.TitleName}}AccessManager)
	{{- end}}
	{{- range $modelName, $model := $.Models}}
		{{range $function, $_ := $.Functions}}
			api.{{$modelName}}{{$function}}Handler = operations.{{$modelName}}{{$function}}HandlerFunc(svc.{{$function}}{{$modelName}})
		{{- end}}
	{{- end}}

	server := restapi.NewServer(api)
	server.Host = string(cfg.Host)
	server.Port = int(cfg.Port)

	// The middleware executes before anything.
	globalMiddlewares := func(handler http.Handler) http.Handler {
		xffmw, _ := xff.Default()
		logger := makeLogger(cfg.BasePath)
		accesslog := makeAccessLog(cfg.BasePath)
		redocOpts := middleware.RedocOpts{
			BasePath: cfg.BasePath,
			SpecURL:  path.Join(cfg.BasePath, "/swagger.json"),
		}
		return xffmw.Handler(logger(noCache(recovery(accesslog(
			middleware.Spec(cfg.BasePath, restapi.FlatSwaggerJSON,
				middleware.Redoc(redocOpts,
					handler)))))))
	}
	// The middleware executes after serving /swagger.json and routing,
	// but before authentication, binding and validation.
	middlewares := func(handler http.Handler) http.Handler {
		safePath := map[string]bool{
			cfg.BasePath + "/consultation/list": true,
			cfg.BasePath + "/demand/list":       true,
		}
		isSafe := func(r *http.Request) bool { return safePath[r.URL.Path] }
		forbidCSRF := makeForbidCSRF(isSafe)
		return forbidCSRF(handler)
	}

	newCORS := cors.New(cors.Options{
		AllowedOrigins:   []string{cfg.AllowedOrigin},
		AllowedMethods:   []string{"POST", "PUT", "GET", "DELETE", "OPTIONS"},
		AllowedHeaders:   []string{"*"},
		AllowCredentials: true,
		{{- if .Debug}}
			// Enable Debugging for testing, consider disabling in production
			Debug: true,
		{{- end}}
	})
	newCORS.Log = cors.Logger(structlog.New(structlog.KeyUnit, "CORS"))
	handleCORS := newCORS.Handler
	
	server.SetHandler(handleCORS(globalMiddlewares(api.Serve(middlewares))))

	return server, nil
}

func healthCheck(params standard.HealthCheckParams, profile interface{}) middleware.Responder {
	return standard.NewHealthCheckOK().WithPayload(&standard.HealthCheckOKBody{Ok: true})
}
