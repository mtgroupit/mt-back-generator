// Code generated by mtgroup-generator. {{$modelName := .CurModel}} {{$model := (index $.Models $modelName)}} {{$models := .Models}}
package api

import (
	"{{.Module}}/internal/api/restapi/models"
	{{if $model.Tags}}{{LowerTitle (index $model.Tags 0)}} {{end}}"{{.Module}}/internal/api/restapi/restapi/operations{{if $model.Tags}}/{{NameSQL (index $model.Tags 0)}}{{end}}"
	"{{.Module}}/internal/app"

	{{if $model.IDFromProfile}}extauthapi "{{.AuthSrv}}"{{end}}
	{{if $model.HaveEmail}}"github.com/go-openapi/strfmt"{{end}}
	"github.com/go-openapi/runtime/middleware" 
)

// Make sure not to overwrite this file after you generated it because all your edits would be lost!

{{range $i, $method := $model.Methods}}{{if not (IsCustomMethod $method)}}
func (svc *service) {{$method}}{{$modelName}}(params {{if $model.Tags}}{{LowerTitle (index $model.Tags 0)}}{{else}}operations{{end}}.{{$method}}{{$model.TitleName}}Params, profile interface{}) middleware.Responder {
	{{if eq $method "Get"}}{{if $model.IDFromProfile}}prof := profile.(*extauthapi.Profile)
	{{end}}c, err := svc.app.{{$method}}{{$modelName}}({{if $model.IDFromProfile}}prof.ID.String(){{else}}params.Body.ID{{end}})
	if err != nil {
		log.Err("{{$method}}{{$modelName}} error", err)
	} else {
		log.Info("{{$method}}{{$modelName}} ok", "id", {{if $model.IDFromProfile}}prof.ID.String(){{else}}params.Body.ID{{end}})
	}
	return {{if $model.Tags}}{{LowerTitle (index $model.Tags 0)}}{{else}}operations{{end}}.New{{$method}}{{$model.TitleName}}OK().WithPayload(api{{$modelName}}(c)){{end}}
	{{if eq $method "Add"}}{{if $model.IDFromProfile}}prof := profile.(*extauthapi.Profile)
	{{end}}id, err := svc.app.{{$method}}{{$modelName}}({{if $model.IDFromProfile}}prof.ID.String(), {{end}}app{{$modelName}}Add(params.Body))
	if err != nil {
		log.Err("{{$method}}{{$modelName}} error", err)
	} else {
		log.Info("{{$method}}{{$modelName}} ok")
	}
	return {{if $model.Tags}}{{LowerTitle (index $model.Tags 0)}}{{else}}operations{{end}}.New{{$method}}{{$model.TitleName}}Created().WithPayload(&{{if $model.Tags}}{{LowerTitle (index $model.Tags 0)}}{{else}}operations{{end}}.{{$method}}{{$model.TitleName}}CreatedBody{ID: id}){{end}}
	{{if eq $method "Delete"}}{{if $model.IDFromProfile}}prof := profile.(*extauthapi.Profile)
	{{end}}err := svc.app.{{$method}}{{$modelName}}({{if $model.IDFromProfile}}prof.ID.String(){{else}}params.Body.ID{{end}})
	if err != nil {
		log.Err("{{$method}}{{$modelName}} error", err)
	} else {
		log.Info("{{$method}}{{$modelName}} ok", "id", {{if $model.IDFromProfile}}prof.ID.String(){{else}}params.Body.ID{{end}})
	}
	return {{if $model.Tags}}{{LowerTitle (index $model.Tags 0)}}{{else}}operations{{end}}.New{{$method}}{{$model.TitleName}}NoContent(){{end}}
	{{if or (eq $method "Edit") (IsCustomEdit $method)}}{{if $model.IDFromProfile}}prof := profile.(*extauthapi.Profile)
	{{end}}{{if $model.ReturnWhenEdit}}c, {{end}}err := svc.app.{{$method}}{{$modelName}}({{if $model.IDFromProfile}}prof.ID.String(){{else}}params.Body.ID{{end}}, app{{$modelName}}Add(params.Body))
	if err != nil {
		log.Err("{{$method}}{{$modelName}} error", err)
	} else {
		log.Info("{{$method}}{{$modelName}} ok", "id", params.Body.ID)
	}
	return {{if $model.Tags}}{{LowerTitle (index $model.Tags 0)}}{{else}}operations{{end}}.New{{$method}}{{$model.TitleName}}OK(){{if $model.ReturnWhenEdit}}.WithPayload(api{{$modelName}}(c)){{end}}{{end}}
	{{if  or (eq $method "List") (IsCustomList $method)}}c,{{if $model.DetailedPagination}} count,{{end}} warnings, err := svc.app.{{$method}}{{$modelName}}(params.Body.Offset, *params.Body.Limit, appFilters(params.Body.Filters), params.Body.SortBy, params.Body.OrderBy)
	if err != nil {
		log.Err("{{$method}}{{$modelName}} error", err)
	} else {
		log.Info("{{$method}}{{$modelName}} ok")
	}
	return {{if $model.Tags}}{{LowerTitle (index $model.Tags 0)}}{{else}}operations{{end}}.New{{$method}}{{$model.TitleName}}OK().WithPayload(&{{if $model.Tags}}{{LowerTitle (index $model.Tags 0)}}{{else}}operations{{end}}.{{$method}}{{$model.TitleName}}OKBody{
		Items: api{{$modelName}}s(c),
		Warnings: warnings,{{if $model.DetailedPagination}}
		Count: int32(count),{{end}}
	}){{end}}
}
{{end}}{{end}}
{{range $column, $options := $model.Columns}} {{if $options.IsArray}}
func (svc *service) Add{{Title $column}}{{$modelName}}(params {{if $model.Tags}}{{LowerTitle (index $model.Tags 0)}}{{else}}operations{{end}}.Add{{Title $column}}{{$model.TitleName}}Params, profile interface{}) middleware.Responder {
	err := svc.app.Add{{Title $column}}{{$modelName}}(params.Body.ID, params.Body.Items)
	if err != nil {
		log.Err("Add{{Title $column}}{{$modelName}} error", err)
	} else {
		log.Info("Add{{Title $column}}{{$modelName}} ok")
	}
	return {{if $model.Tags}}{{LowerTitle (index $model.Tags 0)}}{{else}}operations{{end}}.NewAdd{{Title $column}}{{$modelName}}OK()
}

func (svc *service) Delete{{Title $column}}{{$modelName}}(params {{if $model.Tags}}{{LowerTitle (index $model.Tags 0)}}{{else}}operations{{end}}.Delete{{Title $column}}{{$model.TitleName}}Params, profile interface{}) middleware.Responder {
	err := svc.app.Delete{{Title $column}}{{$modelName}}(params.Body.ID, params.Body.Items)
	if err != nil {
		log.Err("Delete{{Title $column}}{{$modelName}} error", err)
	} else {
		log.Info("Delete{{Title $column}}{{$modelName}} ok")
	}
	return {{if $model.Tags}}{{LowerTitle (index $model.Tags 0)}}{{else}}operations{{end}}.NewDelete{{Title $column}}{{$modelName}}OK()
}
{{end}}{{end}}
func (svc *service) {{$modelName}}AccessManager(params {{if $model.Tags}}{{LowerTitle (index $model.Tags 0)}}{{else}}operations{{end}}.{{$modelName}}AccessManagerParams, profile interface{}) middleware.Responder {
	err := svc.app.{{$modelName}}AccessManager(appAccessManager(params.Body))
	if err != nil {
		log.Err("{{$modelName}}AccessManager error", err)
	} else {
		log.Info("{{$modelName}}AccessManager ok")
	}
	return {{if $model.Tags}}{{LowerTitle (index $model.Tags 0)}}{{else}}operations{{end}}.New{{$modelName}}AccessManagerOK()
}
{{range $functionName, $function := $.Functions}}
func (svc *service) {{$functionName}}{{$modelName}}(params {{if $model.Tags}}{{LowerTitle (index $model.Tags 0)}}{{else}}operations{{end}}.{{$modelName}}{{$functionName}}Params, profile interface{}) middleware.Responder {
	{{$function.OutStr}}, err := svc.app.{{$functionName}}{{$modelName}}({{$function.InStrParams}})
	if err != nil {
		log.Err("{{$functionName}}{{$modelName}} error", err)
	} else {
		log.Info("{{$functionName}}{{$modelName}} ok")
	}
	return {{if $model.Tags}}{{LowerTitle (index $model.Tags 0)}}{{else}}operations{{end}}.New{{$modelName}}{{$functionName}}OK(){{if $function.HaveOut}}.WithPayload(&models.{{$functionName}}Params{
		{{range $name, $_ := $function.In}}
		{{$name}}: params.Body.{{$name}},{{end}}
		{{range $name, $_ := $function.Out}}
		{{$name}}: {{$name}},{{end}}
	}){{end}}
}
{{end}}

func api{{$modelName}}(a *app.{{$modelName}}) *models.{{$modelName}} {
	if a == nil {
		return nil
	}
	return &models.{{$modelName}}{ {{range $name, $options := $model.Columns}}
		{{$options.TitleName}}: {{if $options.IsStruct}}api{{$options.GoType}}{{if $options.IsArray}}s({{else}}({{end}}a.{{$options.TitleName}}){{else}}{{if eq $options.Format "date-time"}}toDateTime(a.{{$options.TitleName}}){{else}}{{if eq $options.Format "email"}}strfmt.Email(a.{{$options.TitleName}}){{else}}a.{{$options.TitleName}}{{end}}{{end}}{{end}},{{end}}
	}
}

func api{{$modelName}}s(apps []*app.{{$modelName}}) []*models.{{$modelName}} {
	apis := []*models.{{$modelName}}{}
	for i := range apps {
		apis = append(apis, api{{$modelName}}(apps[i]))
	}
	return apis
}

func app{{$modelName}}(a *models.{{$modelName}}{{if $model.HaveLazyLoading}}, withStructs bool{{end}}) *app.{{$modelName}} {
	if a == nil {
		return nil
	}
	{{LowerTitle $modelName}} := &app.{{$modelName}}{}
	{{if $model.HaveLazyLoading}}
	if withStructs { {{range $name, $options := $model.Columns}}{{if $options.IsStruct}}
		{{LowerTitle $modelName}}.{{$options.TitleName}} = {{if $options.IsStruct}}app{{$options.GoType}}{{if $options.IsArray}}s{{end}}(a.{{$options.TitleName}}{{if (index $models $options.GoType).HaveLazyLoading}}, false{{end}}){{else}}a.{{$options.TitleName}}{{if or (eq $options.Format "date-time") (eq $options.Format "email")}}.String(){{end}}{{end}}{{end}}{{end}}
	}{{end}}
	{{range $name, $options := $model.Columns}}{{if not $options.IsStruct}}
	{{LowerTitle $modelName}}.{{$options.TitleName}} = a.{{$options.TitleName}}{{if or (eq $options.Format "date-time") (eq $options.Format "email")}}.String(){{end}}{{end}}{{end}}
	
	return {{LowerTitle $modelName}}
}

func app{{$modelName}}s(apis []*models.{{$modelName}}{{if $model.HaveLazyLoading}}, withStructs bool{{end}}) []*app.{{$modelName}} {
	apps := []*app.{{$modelName}}{}
	for i := range apis {
		apps = append(apps, app{{$modelName}}(apis[i]{{if $model.HaveLazyLoading}}, withStructs{{end}}))
	}
	return apps
}

func app{{$modelName}}Add(a *models.{{$modelName}}Add) *app.{{$modelName}} {
	if a == nil {
		return nil
	}
	{{LowerTitle $modelName}} := &app.{{$modelName}}{}

	{{range $name, $options := $model.Columns}}{{if not $options.IsStruct}}
	{{LowerTitle $modelName}}.{{$options.TitleName}} = a.{{$options.TitleName}}{{if or (eq $options.Format "date-time") (eq $options.Format "email")}}.String(){{end}}{{end}}{{end}}
	{{range $name, $options := $model.Columns}}{{if and $options.IsStruct (not $options.IsArray)}}
	if a.{{$options.TitleName}}ID != "" {
		{{LowerTitle $modelName}}.{{$options.TitleName}} = &app.{{$options.GoType}}{ID: a.{{$options.TitleName}}ID}
	}{{end}}{{end}}
	{{range $name, $options := $model.Columns}}{{if $options.IsArray}}
	if len(a.{{$options.TitleName}}IDs) > 0 {
		for _, id := range a.{{$options.TitleName}}IDs {
			{{LowerTitle $modelName}}.{{$options.TitleName}} = append({{LowerTitle $modelName}}.{{$options.TitleName}}, &app.{{$options.GoType}}{
				ID: id,
			})
		}
	}{{end}}{{end}}
	
	
	return {{LowerTitle $modelName}}
}
