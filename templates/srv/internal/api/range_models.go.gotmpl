// Code generated by mtgroup-generator. {{$modelName := .CurModel}} {{$model := (index $.Models $modelName)}} {{$models := .Models}}
package api

import (
	"{{.Name}}/internal/api/restapi/models"
	"{{.Name}}/internal/api/restapi/restapi/operations"
	"{{.Name}}/internal/app"

	{{if $model.HaveEmail}}"github.com/go-openapi/strfmt"{{end}}
	"github.com/go-openapi/runtime/middleware" 
)

// Make sure not to overwrite this file after you generated it because all your edits would be lost!

{{range $i, $method := $model.Methods}}
func (svc *service) {{$method}}{{$modelName}}(params operations.{{$method}}{{$model.TitleName}}Params) middleware.Responder {
	{{if eq $method "Get"}}c, err := svc.app.{{$method}}{{$modelName}}(params.Body.ID)
	if err != nil {
		log.Err("{{$method}}{{$modelName}} error", err)
	} else {
		log.Info("{{$method}}{{$modelName}} ok", "id", params.Body.ID)
	}
	return operations.New{{$method}}{{$model.TitleName}}OK().WithPayload(api{{$modelName}}(*c)){{end}}
	{{if eq $method "Add"}}err := svc.app.{{$method}}{{$modelName}}(app{{$modelName}}(params.Body{{if $model.HaveLazyLoading}}, true{{end}}))
	if err != nil {
		log.Err("{{$method}}{{$modelName}} error", err)
	} else {
		log.Info("{{$method}}{{$modelName}} ok")
	}
	return operations.New{{$method}}{{$model.TitleName}}Created(){{end}}
	{{if eq $method "Delete"}}err := svc.app.{{$method}}{{$modelName}}(params.Body.ID)
	if err != nil {
		log.Err("{{$method}}{{$modelName}} error", err)
	} else {
		log.Info("{{$method}}{{$modelName}} ok", "id", params.Body.ID)
	}
	return operations.New{{$method}}{{$model.TitleName}}NoContent(){{end}}
	{{if eq $method "Edit"}}err := svc.app.{{$method}}{{$modelName}}(params.Body.ID, app{{$modelName}}(params.Body{{if $model.HaveLazyLoading}}, true{{end}}))
	if err != nil {
		log.Err("{{$method}}{{$modelName}} error", err)
	} else {
		log.Info("{{$method}}{{$modelName}} ok", "id", params.Body.ID)
	}
	return operations.New{{$method}}{{$model.TitleName}}OK(){{end}}
	{{if  or (eq $method "List") (IsCustomList $method)}}c, err := svc.app.{{$method}}{{$modelName}}(*params.Body.Offset, *params.Body.Limit, appFilters(params.Body.Filters))
	if err != nil {
		log.Err("{{$method}}{{$modelName}} error", err)
	} else {
		log.Info("{{$method}}{{$modelName}} ok")
	}
	return operations.New{{$method}}{{$model.TitleName}}OK().WithPayload(api{{$modelName}}s(c)){{end}}
	{{if and (ne $method "Get") (ne $method "Add") (ne $method "Delete") (ne $method "Edit") (ne $method "List") (not (IsCustomList $method))}}
	return operations.New{{$method}}{{$model.TitleName}}OK(){{end}}
}
{{end}}
func (svc *service) {{$modelName}}AccessManager(params operations.{{$modelName}}AccessManagerParams) middleware.Responder {
	err := svc.app.{{$modelName}}AccessManager(appAccessManager(params.Body))
	if err != nil {
		log.Err("{{$modelName}}AccessManager error", err)
	} else {
		log.Info("{{$modelName}}AccessManager ok")
	}
	return operations.New{{$modelName}}AccessManagerOK()
}
{{range $functionName, $function := $.Functions}}
func (svc *service) {{$functionName}}{{$modelName}}(params operations.{{$modelName}}{{$functionName}}Params) middleware.Responder {
	{{$function.OutStr}}, err := svc.app.{{$functionName}}{{$modelName}}({{$function.InStrParams}})
	if err != nil {
		log.Err("{{$functionName}}{{$modelName}} error", err)
	} else {
		log.Info("{{$functionName}}{{$modelName}} ok")
	}
	return operations.New{{$modelName}}{{$functionName}}OK(){{if $function.HaveOut}}.WithPayload(&models.{{$functionName}}Params{
		{{range $name, $_ := $function.In}}
		{{$name}}: params.Body.{{$name}},{{end}}
		{{range $name, $_ := $function.Out}}
		{{$name}}: {{$name}},{{end}}
	}){{end}}
}
{{end}}

func api{{$modelName}}(a app.{{$modelName}}) *models.{{$modelName}} {
	return &models.{{$modelName}}{ {{range $name, $options := $model.Columns}}
		{{$options.TitleName}}: {{if $options.IsStruct}}api{{$options.GoType}}{{if $options.IsArray}}s({{else}}(*{{end}}a.{{$options.TitleName}}){{else}}{{if eq $options.Format "date-time"}}toDateTime(a.{{$options.TitleName}}){{else}}{{if eq $options.Format "email"}}strfmt.Email(a.{{$options.TitleName}}){{else}}a.{{$options.TitleName}}{{end}}{{end}}{{end}},{{end}}
	}
}

func api{{$modelName}}s(apps []*app.{{$modelName}}) []*models.{{$modelName}} {
	apis := []*models.{{$modelName}}{}
	for i := range apps {
		apis = append(apis, api{{$modelName}}(*apps[i]))
	}
	return apis
}

func app{{$modelName}}(a *models.{{$modelName}}{{if $model.HaveLazyLoading}}, withStructs bool{{end}}) *app.{{$modelName}} {
	{{LowerTitle $modelName}} := &app.{{$modelName}}{}
	{{if $model.HaveLazyLoading}}
	if withStructs { {{range $name, $options := $model.Columns}}{{if $options.IsStruct}}
		{{LowerTitle $modelName}}.{{$options.TitleName}} = {{if $options.IsStruct}}app{{$options.GoType}}{{if $options.IsArray}}s{{end}}(a.{{$options.TitleName}}{{if (index $models $options.TitleName).HaveLazyLoading}}, false{{end}}){{else}}a.{{$options.TitleName}}{{if or (eq $options.Format "date-time") (eq $options.Format "email")}}.String(){{end}}{{end}}{{end}}{{end}}
	}{{end}}
	{{range $name, $options := $model.Columns}}{{if not $options.IsStruct}}
	{{LowerTitle $modelName}}.{{$options.TitleName}} = a.{{$options.TitleName}}{{if or (eq $options.Format "date-time") (eq $options.Format "email")}}.String(){{end}}{{end}}{{end}}
	
	return {{LowerTitle $modelName}}
}

func app{{$modelName}}s(apis []*models.{{$modelName}}{{if $model.HaveLazyLoading}}, withStructs bool{{end}}) []*app.{{$modelName}} {
	apps := []*app.{{$modelName}}{}
	for i := range apis {
		apps = append(apps, app{{$modelName}}(apis[i]{{if $model.HaveLazyLoading}}, withStructs{{end}}))
	}
	return apps
}
