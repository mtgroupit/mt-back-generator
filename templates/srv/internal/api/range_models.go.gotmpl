// Code generated by mtgroup-generator. {{$modelName := .CurModel}} {{$model := (index $.Models $modelName)}} {{$models := .Models}}
package api

import (
{{- if NeedErrorsInApi $model}}
	"errors"
{{- end}}
{{- if $model.NeedTime}}
	"time"
{{- end}}
{{- if $model.Methods}}
	"{{.Module}}/internal/def"
	"github.com/go-openapi/swag"
{{end}}
	"{{.Module}}/internal/api/restapi/models"
	{{LowerTitle $modelName}} "{{.Module}}/internal/api/restapi/restapi/operations/{{NameSQL $modelName}}"
	"{{.Module}}/internal/app"
	{{- if $model.NeedTypes}}
		"{{.Module}}/internal/types"
	{{- end}}

	{{if or (HaveMyMethod $model.Methods) $model.HaveCreatedBy $model.HaveModifiedBy (ContainsStr $model.Methods "Delete") (ContainsStr $model.Methods "Add") (and (not $model.Shared) ($model.Methods))}}extauthapi "{{.AuthSrv}}"{{end}}
	{{- if or $model.HaveEmail $model.NeedTime}}
		"github.com/go-openapi/strfmt"
	{{- end}}
	{{- if $model.NeedConv}}
		"github.com/go-openapi/strfmt/conv"
	{{- end}}
	"github.com/go-openapi/runtime/middleware" 
)

// Make sure not to overwrite this file after you generated it because all your edits would be lost!

{{- range $i, $method := $model.Methods}}
{{- if not (IsCustomMethod $method)}}
func (svc *service) {{$method}}{{$modelName}}(params {{LowerTitle $modelName}}.{{$method}}{{$model.TitleName}}Params{{if not (index $model.MethodsProps $i).NoSecure}}, profile interface{}{{end}}) middleware.Responder {
	{{- if IsGet $method}}
		{{- if and (or (IsMyMethod $method) (not $model.Shared)) (not (index $model.MethodsProps $i).NoSecure)}}
			prof := profile.(*extauthapi.Profile)
		{{- end}}
		c, err := svc.app.{{$method}}{{$modelName}}({{if not $model.BoundToIsolatedEntity}}{{if IsMyMethod $method}}prof.ID.String(){{else}}params.Body.ID{{end}}{{end}}{{if and (not $model.Shared) (not (index $model.MethodsProps $i).NoSecure)}}{{if not $model.BoundToIsolatedEntity}}, {{end}}prof.IsolatedEntityID.String(){{end}})
		switch {
		default:
			log.PrintErr("{{$method}}{{$modelName}} server error", def.LogHTTPStatus, codeInternal.status, "code", codeInternal.extra, "err", err)
			return {{LowerTitle $modelName}}.New{{$method}}{{$modelName}}Default(codeInternal.status).WithPayload(&models.Error{
				Code:    swag.Int32(codeInternal.extra),
				Message: swag.String("internal error"),
			})
		case errors.Is(err, app.ErrNotFound):
			log.Info("{{$method}}{{$modelName}} client error", def.LogHTTPStatus, codeNotFound.status, "code", codeNotFound.extra, "err", err)
			return {{LowerTitle $modelName}}.New{{$method}}{{$modelName}}Default(codeNotFound.status).WithPayload(&models.Error{
				Code:    swag.Int32(codeNotFound.extra),
				Message: swag.String(err.Error()),
			})
		case err == nil:
		log.Info("{{$method}}{{$modelName}} ok", "id", {{if IsMyMethod $method}}{{if $model.BoundToIsolatedEntity}}prof.IsolatedEntityID.String(){{else}}prof.ID.String(){{end}}{{else}}params.Body.ID{{end}})
			return {{LowerTitle $modelName}}.New{{$method}}{{$model.TitleName}}OK().WithPayload(api{{$modelName}}(c))
		}
	{{- end}}
	{{- if IsAdd $method}}
		prof := profile.(*extauthapi.Profile)
		c, err := svc.app.{{$method}}{{$modelName}}(prof.ID.String(), {{if and (not $model.Shared) (not (index $model.MethodsProps $i).NoSecure)}}prof.IsolatedEntityID.String(), {{end}}app{{$modelName}}Add(params.Body))
		switch {
		default:
			log.PrintErr("{{$method}}{{$modelName}} server error", def.LogHTTPStatus, codeInternal.status, "code", codeInternal.extra, "err", err)
			return {{LowerTitle $modelName}}.New{{$method}}{{$modelName}}Default(codeInternal.status).WithPayload(&models.Error{
				Code:    swag.Int32(codeInternal.extra),
				Message: swag.String("internal error"),
			})
		{{- if IsMyMethod $method}}
			case errors.Is(err, app.ErrDuplicateID):
				log.Info("{{$method}}{{$modelName}} client error", def.LogHTTPStatus, codeDuplicateID.status, "code", codeDuplicateID.extra, "err", err)
				return {{LowerTitle $modelName}}.New{{$method}}{{$modelName}}Default(codeDuplicateID.status).WithPayload(&models.Error{
					Code:    swag.Int32(codeDuplicateID.extra),
					Message: swag.String(err.Error()),
				})
		{{- end}}
		case err == nil:
			log.Info("{{$method}}{{$modelName}} ok")
			return {{LowerTitle $modelName}}.New{{$method}}{{$model.TitleName}}Created().WithPayload(api{{$modelName}}(c))
		}
	{{- end}}
	{{- if IsDelete $method}}
		prof := profile.(*extauthapi.Profile)
		err := svc.app.{{$method}}{{$modelName}}({{if not (IsMyMethod $method)}}params.Body.ID, {{end}}prof.ID.String(){{if  and (not $model.Shared) (not (index $model.MethodsProps $i).NoSecure)}}, prof.IsolatedEntityID.String(){{end}})
		switch {
		default:
			log.PrintErr("{{$method}}{{$modelName}} server error", def.LogHTTPStatus, codeInternal.status, "code", codeInternal.extra, "err", err)
			return {{LowerTitle $modelName}}.New{{$method}}{{$modelName}}Default(codeInternal.status).WithPayload(&models.Error{
				Code:    swag.Int32(codeInternal.extra),
				Message: swag.String("internal error"),
			})
		case errors.Is(err, app.ErrNotFound):
			log.Info("{{$method}}{{$modelName}} client error", def.LogHTTPStatus, codeNotFound.status, "code", codeNotFound.extra, "err", err)
			return {{LowerTitle $modelName}}.New{{$method}}{{$modelName}}Default(codeNotFound.status).WithPayload(&models.Error{
				Code:    swag.Int32(codeNotFound.extra),
				Message: swag.String(err.Error()),
			})
		case err == nil:
			log.Info("{{$method}}{{$modelName}} ok", "id", {{if IsMyMethod $method}}{{if $model.BoundToIsolatedEntity}}prof.IsolatedEntityID.String(){{else}}prof.ID.String(){{end}}{{else}}params.Body.ID{{end}})
			return {{LowerTitle $modelName}}.New{{$method}}{{$model.TitleName}}NoContent()
		}
	{{- end}}
	{{- if IsEdit $method}}
		{{- if and (or (IsMyMethod $method) $model.HaveModifiedBy (not $model.Shared)) (not (index $model.MethodsProps $i).NoSecure)}}
			prof := profile.(*extauthapi.Profile)
		{{- end}}
		{{- if IsAdjustEdit $method}}
			in := &app.{{$modelName}}{}
			{{- range $name, $options := $model.Columns}}
				{{- if ContainsStr (index $model.MethodsProps $i).EditableFields $name}}
					{{- if and (not $options.IsStruct) (ne $name "id")}}
						in.{{$options.TitleName}} = {{ConvertApiToAppColumn "params.Body.Data" $name $options}}
					{{- end}}
				{{- end}}
			{{- end}}
			{{- range $name, $options := $model.Columns}}
				{{- if ContainsStr (index $model.MethodsProps $i).EditableFields $name}}
					{{- if and $options.IsStruct (not $options.IsArray)}}
						if params.Body.Data.{{$options.TitleName}} != "" {
							in.{{$options.TitleName}} = &app.{{$options.GoType}}{ID: params.Body.Data.{{$options.TitleName}}}
						}
					{{- end}}
				{{- end}}
			{{- end}}
			{{- range $name, $options := $model.Columns}}
				{{- if ContainsStr (index $model.MethodsProps $i).EditableFields $name}}
					{{- if and $options.IsArray $options.IsStruct}}
						if len(params.Body.Data.{{$options.TitleName}}) > 0 {
							for _, id := range params.Body.Data.{{$options.TitleName}} {
								in.{{$options.TitleName}} = append(in.{{$options.TitleName}}, &app.{{$options.GoType}}{
									ID: id,
								})
							}
						}
					{{- end}}
				{{- end}}
			{{- end}}
		{{- end}}
		{{if $model.ReturnWhenEdit}}c, {{end}}err := svc.app.{{$method}}{{$modelName}}({{if not (IsMyMethod $method)}}params.Body.ID, {{end}}{{if or (and (IsMyMethod $method) (not $model.BoundToIsolatedEntity)) $model.HaveModifiedBy}}prof.ID.String(), {{end}}{{if  and (not $model.Shared) (not (index $model.MethodsProps $i).NoSecure)}}prof.IsolatedEntityID.String(), {{end}}{{if IsAdjustEdit $method}}in{{else}}app{{$modelName}}Add(params.Body.Data){{end}})
		switch {
		default:
			log.PrintErr("{{$method}}{{$modelName}} server error", def.LogHTTPStatus, codeInternal.status, "code", codeInternal.extra, "err", err)
			return {{LowerTitle $modelName}}.New{{$method}}{{$modelName}}Default(codeInternal.status).WithPayload(&models.Error{
				Code:    swag.Int32(codeInternal.extra),
				Message: swag.String("internal error"),
			})
		case errors.Is(err, app.ErrNotFound):
			log.Info("{{$method}}{{$modelName}} client error", def.LogHTTPStatus, codeNotFound.status, "code", codeNotFound.extra, "err", err)
			return {{LowerTitle $modelName}}.New{{$method}}{{$modelName}}Default(codeNotFound.status).WithPayload(&models.Error{
				Code:    swag.Int32(codeNotFound.extra),
				Message: swag.String(err.Error()),
			})
		case err == nil:
			log.Info("{{$method}}{{$modelName}} ok")
			return {{LowerTitle $modelName}}.New{{$method}}{{$model.TitleName}}OK(){{if $model.ReturnWhenEdit}}.WithPayload(api{{$modelName}}(c)){{end}}
		}
	{{- end}}
	{{- if  IsList $method}}
		{{- if  and (not $model.Shared) (not (index $model.MethodsProps $i).NoSecure)}}
			prof := profile.(*extauthapi.Profile)
		{{end}}
		c,{{if $model.DetailedPagination}} count,{{end}} warnings, err := svc.app.{{$method}}{{$modelName}}({{if and (not $model.Shared) (not (index $model.MethodsProps $i).NoSecure)}}prof.IsolatedEntityID.String(), {{end}}appListParams(params.Body))
		switch {
		default:
			log.PrintErr("{{$method}}{{$modelName}} server error", def.LogHTTPStatus, codeInternal.status, "code", codeInternal.extra, "err", err)
			return {{LowerTitle $modelName}}.New{{$method}}{{$modelName}}Default(codeInternal.status).WithPayload(&models.Error{
				Code:    swag.Int32(codeInternal.extra),
				Message: swag.String("internal error"),
			})
		case err == nil:
			log.Info("{{$method}}{{$modelName}} ok")
			return {{LowerTitle $modelName}}.New{{$method}}{{$model.TitleName}}OK().WithPayload(&{{LowerTitle $modelName}}.{{$method}}{{$model.TitleName}}OKBody{
				Items: api{{$modelName}}s(c),
				Warnings: warnings,{{if $model.DetailedPagination}}
				Count: int32(count),{{end}}
			})
		}
	{{- end}}
}
{{- end}}
{{- end}}
{{range $column, $options := $model.Columns}} {{if and $options.IsArray $options.IsStruct}}
func (svc *service) Add{{Title $column}}{{$modelName}}(params {{LowerTitle $modelName}}.Add{{Title $column}}{{$model.TitleName}}Params, profile interface{}) middleware.Responder {
	{{if or $model.HaveModifiedBy (not $model.Shared)}}prof := profile.(*extauthapi.Profile)
	{{end}}err := svc.app.Add{{Title $column}}{{$modelName}}(params.Body.ID, {{if $model.HaveModifiedBy}}prof.ID.String(), {{end}}{{if (not $model.Shared)}}prof.IsolatedEntityID.String(), {{end}}params.Body.ItemsID, app{{$options.GoType}}sAdd(params.Body.Items))
	switch {
	default:
		log.PrintErr("Add{{Title $column}}{{$modelName}} server error", def.LogHTTPStatus, codeInternal.status, "code", codeInternal.extra, "err", err)
		return {{LowerTitle $modelName}}.NewAdd{{Title $column}}{{$modelName}}Default(codeInternal.status).WithPayload(&models.Error{
			Code:    swag.Int32(codeInternal.extra),
			Message: swag.String("internal error"),
		})
	case errors.Is(err, app.ErrNotFound):
		log.Info("Add{{Title $column}}{{$modelName}} client error", def.LogHTTPStatus, codeNotFound.status, "code", codeNotFound.extra, "err", err)
		return {{LowerTitle $modelName}}.NewAdd{{Title $column}}{{$modelName}}Default(codeNotFound.status).WithPayload(&models.Error{
			Code:    swag.Int32(codeNotFound.extra),
			Message: swag.String(err.Error()),
		})
	case errors.Is(err, app.ErrNotFoundArrayItem):
		log.Info("Add{{Title $column}}{{$modelName}} client error", def.LogHTTPStatus, codeNotFoundArrayItem.status, "code", codeNotFoundArrayItem.extra, "err", err)
		return {{LowerTitle $modelName}}.NewAdd{{Title $column}}{{$modelName}}Default(codeNotFoundArrayItem.status).WithPayload(&models.Error{
			Code:    swag.Int32(codeNotFoundArrayItem.extra),
			Message: swag.String(err.Error()),
		})
	case err == nil:
		log.Info("Add{{Title $column}}{{$modelName}} ok")
		return {{LowerTitle $modelName}}.NewAdd{{Title $column}}{{$modelName}}OK()
	}
}

func (svc *service) Delete{{Title $column}}{{$modelName}}(params {{LowerTitle $modelName}}.Delete{{Title $column}}{{$model.TitleName}}Params, profile interface{}) middleware.Responder {
	{{if or $model.HaveModifiedBy (not $model.Shared)}}prof := profile.(*extauthapi.Profile)
	{{end}}err := svc.app.Delete{{Title $column}}{{$modelName}}(params.Body.ID, {{if $model.HaveModifiedBy}}prof.ID.String(), {{end}}{{if not $model.Shared}}prof.IsolatedEntityID.String(), {{end}}params.Body.Items)
	switch {
	default:
		log.PrintErr("Delete{{Title $column}}{{$modelName}} server error", def.LogHTTPStatus, codeInternal.status, "code", codeInternal.extra, "err", err)
		return {{LowerTitle $modelName}}.NewDelete{{Title $column}}{{$modelName}}Default(codeInternal.status).WithPayload(&models.Error{
			Code:    swag.Int32(codeInternal.extra),
			Message: swag.String("internal error"),
		})
	case errors.Is(err, app.ErrNotFound):
		log.Info("Delete{{Title $column}}{{$modelName}} client error", def.LogHTTPStatus, codeNotFound.status, "code", codeNotFound.extra, "err", err)
		return {{LowerTitle $modelName}}.NewDelete{{Title $column}}{{$modelName}}Default(codeNotFound.status).WithPayload(&models.Error{
			Code:    swag.Int32(codeNotFound.extra),
			Message: swag.String(err.Error()),
		})
	case err == nil:
		log.Info("Delete{{Title $column}}{{$modelName}} ok")
		return {{LowerTitle $modelName}}.NewDelete{{Title $column}}{{$modelName}}OK()
	}
}
{{end}}{{end}}

{{range $functionName, $function := $.Functions}}
func (svc *service) {{$functionName}}{{$modelName}}(params {{LowerTitle $modelName}}.{{$modelName}}{{$functionName}}Params, profile interface{}) middleware.Responder {
	{{$function.OutStr}}, err := svc.app.{{$functionName}}{{$modelName}}({{$function.InStrParams}})
	if err != nil {
		log.Err("{{$functionName}}{{$modelName}} error", err)
	} else {
		log.Info("{{$functionName}}{{$modelName}} ok")
	}
	return {{LowerTitle $modelName}}.New{{$modelName}}{{$functionName}}OK(){{if $function.HaveOut}}.WithPayload(&models.{{$functionName}}Params{
		{{range $name, $_ := $function.In}}
		{{$name}}: params.Body.{{$name}},{{end}}
		{{range $name, $_ := $function.Out}}
		{{$name}}: {{$name}},{{end}}
	}){{end}}
}
{{end}}

func api{{$modelName}}(a *app.{{$modelName}}) *models.{{$modelName}} {
	if a == nil {
		return nil
	}
	return &models.{{$modelName}}{
		{{- range $name, $options := $model.Columns}}
			{{$options.TitleName}}: {{ConvertAppToApiColumn "a" $name $options}},
		{{- end}}
	}
}

func api{{$modelName}}s(apps []*app.{{$modelName}}) []*models.{{$modelName}} {
	apis := []*models.{{$modelName}}{}
	for i := range apps {
		apis = append(apis, api{{$modelName}}(apps[i]))
	}
	return apis
}

func app{{$modelName}}(a *models.{{$modelName}}{{if $model.HaveLazyLoading}}, withStructs bool{{end}}) *app.{{$modelName}} {
	if a == nil {
		return nil
	}
	{{LowerTitle $modelName}} := &app.{{$modelName}}{}
	{{- if $model.HaveLazyLoading}}
		if withStructs {
			{{- range $name, $options := $model.Columns}}
				{{- if $options.IsStruct}}
					{{LowerTitle $modelName}}.{{$options.TitleName}} = app{{$options.GoType}}{{if $options.IsArray}}s{{end}}(a.{{$options.TitleName}}{{if (index $models $options.GoType).HaveLazyLoading}}, false{{end}})
				{{- end}}
			{{- end}}
		}
	{{- end}}
	{{- range $name, $options := $model.Columns}}
		{{- if not $options.IsStruct}}
			{{LowerTitle $modelName}}.{{$options.TitleName}} = {{ConvertApiToAppColumn "a" $name $options}}
		{{- end}}
	{{- end}}
	
	return {{LowerTitle $modelName}}
}

func app{{$modelName}}s(apis []*models.{{$modelName}}{{if $model.HaveLazyLoading}}, withStructs bool{{end}}) []*app.{{$modelName}} {
	apps := []*app.{{$modelName}}{}
	for i := range apis {
		apps = append(apps, app{{$modelName}}(apis[i]{{if $model.HaveLazyLoading}}, withStructs{{end}}))
	}
	return apps
}

func app{{$modelName}}Add(a *models.{{$modelName}}Add) *app.{{$modelName}} {
	if a == nil {
		return nil
	}
	{{LowerTitle $modelName}} := &app.{{$modelName}}{}

	{{- range $name, $options := $model.Columns}}
		{{- if and (not $options.IsStruct) (ne $name "id") (not (IsStandardColumn $name))}}
			{{LowerTitle $modelName}}.{{$options.TitleName}} = {{ConvertApiToAppColumn "a" $name $options}}
		{{- end}}
	{{- end}}
	{{- range $name, $options := $model.Columns}}
		{{- if and $options.IsStruct (not $options.IsArray)}}
			if a.{{$options.TitleName}} != "" {
				{{LowerTitle $modelName}}.{{$options.TitleName}} = &app.{{$options.GoType}}{ID: a.{{$options.TitleName}}}
			}
		{{- end}}
	{{- end}}
	{{- range $name, $options := $model.Columns}}
		{{- if  and $options.IsArray $options.IsStruct}}
			if len(a.{{$options.TitleName}}) > 0 {
				for _, id := range a.{{$options.TitleName}} {
					{{LowerTitle $modelName}}.{{$options.TitleName}} = append({{LowerTitle $modelName}}.{{$options.TitleName}}, &app.{{$options.GoType}}{
						ID: id,
					})
				}
			}
		{{- end}}
	{{- end}}
	
	
	return {{LowerTitle $modelName}}
}

func app{{$modelName}}sAdd(apis []*models.{{$modelName}}Add) []*app.{{$modelName}} {
	apps := []*app.{{$modelName}}{}
	for i := range apis {
		apps = append(apps, app{{$modelName}}Add(apis[i]))
	}
	return apps
}
