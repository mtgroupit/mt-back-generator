 // Code generated by mtgroup-generator.
package api

{{- if $.CustomTypes}}
import (
	"{{.Module}}/internal/api/restapi/models"
	"{{.Module}}/internal/app"
    {{- if .HaveTypesInCustomTypes}}
        "{{.Module}}/internal/types"
    {{- end}}

    {{- if .HaveConvInCustomTypes}}
	    "github.com/go-openapi/strfmt/conv"
    {{- end}}
    {{- if .HaveEmailInCustomTypes}}
		"github.com/go-openapi/strfmt"
	{{- end}}
    {{- if .HaveSwagInCustomTypes}}
		"github.com/go-openapi/swag"
	{{- end}}
)
{{- end}}

// Make sure not to overwrite this file after you generated it because all your edits would be lost!

{{range $customTypeName, $customType := $.CustomTypes}}
    {{- $customTypeName = (Title $customTypeName)}}
    func api{{$customTypeName}}(a *app.{{$customTypeName}}) *models.{{$customTypeName}} {
        if a == nil {
            return nil
        }
        return &models.{{$customTypeName}}{
            {{- range $field, $options := $customType.Fields}}
                {{Title $field}}: {{ConvertAppToApiColumn "a" $field $options}},
            {{- end}}
        }
    }

    func api{{$customTypeName}}s(apps []*app.{{$customTypeName}}) []*models.{{$customTypeName}} {
        apis := []*models.{{$customTypeName}}{}
        for i := range apps {
            apis = append(apis, api{{$customTypeName}}(apps[i]))
        }
        return apis
    }

    func app{{$customTypeName}}(a *models.{{$customTypeName}}) *app.{{$customTypeName}} {
        if a == nil {
            return nil
        }
        {{LowerTitle $customTypeName}} := &app.{{$customTypeName}}{}
        {{- range $field, $options := $customType.Fields}}
            {{- if $options.IsCustom}}
                {{LowerTitle $customTypeName}}.{{Title $field}} = app{{$options.AppType}}{{if $options.IsArray}}s{{end}}(a.{{Title $field}})
            {{- end}}
        {{- end}}
        {{- range $field, $options := $customType.Fields}}
            {{- if not $options.IsCustom}}
                {{LowerTitle $customTypeName}}.{{Title $field}} = {{ConvertApiToAppColumn "a" $field $options}}
            {{- end}}
        {{- end}}
        
        return {{LowerTitle $customTypeName}}
    }

    func app{{$customTypeName}}s(apis []*models.{{$customTypeName}}) []*app.{{$customTypeName}} {
        apps := []*app.{{$customTypeName}}{}
        for i := range apis {
            apps = append(apps, app{{$customTypeName}}(apis[i]))
        }
        return apps
    }
{{end}}
