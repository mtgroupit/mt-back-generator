{{- if not .OldModelObj }}
    {{- template "migration_create" . }}
{{- else }}
    {{- if and .OldModelObj (not .NewModelObj) }}
        {{- template "migration_drop" . }}
    {{- else }}
        {{- $diff := .NewModelObj.Difference .OldModelObj }}
        {{- if or (len $diff.Create) (len $diff.Update) (len $diff.Delete) }}
            {{- template "migration_alter" . }}
        {{- end }}
    {{- end }}
{{- end -}}



{{- define "migration_create" }}
-- +goose Up
{{- template "create" .NewModelObj }}
-- +goose Down
{{- template "drop" .NewModelObj }}
{{- end -}}



{{- define "migration_drop" }}
-- +goose Up
{{- template "drop" .OldModelObj }}
-- +goose Down
{{- template "create" .OldModelObj }}
{{- end -}}



{{- /* $ has data type models.Model */}}
{{- define "create" }}
CREATE TABLE {{ $.SQLTableName }}
(
    {{- range $i, $p := $.Psql }}
        {{- if not (and $p.IsArray $p.IsStruct) }}
    {{ $p.SQLName }} {{ $p.TypeSQL }}
            {{- if eq $p.Name "ID"}} PRIMARY KEY{{ end }}
            {{- if $p.Unique}} UNIQUE{{ end }}
            {{- if $p.IsStruct}} REFERENCES {{ $p.FKModel.SQLTableName }}({{ $p.FK }}){{ end }}
            {{- if not (eq $i (MathAdd (len $.Psql) -1)) }},{{ end }}
        {{- end }}
    {{- end }}
    {{- if not $.Shared }},
    isolated_entity_id uuid NOT NULL
    {{- end }}
);
CREATE TABLE {{ $.SQLAccessTableName }}
(
    user_name text,
    group_name text,
    read_access boolean,
    write_access boolean,
    delete_access boolean,
    add_access boolean, 
    access_manager boolean
);
    {{- range $i, $et := $.ExtraTables }}
CREATE TABLE {{ $et.Name }}
(
    {{ $et.Model1.TitleName | NameSQL }}_id {{ (index $et.Model1.PsqlMap "ID").TypeSQL }} NOT NULL REFERENCES {{ $et.Model1.SQLTableName }}(id),
    {{ $et.Model2.TitleName | NameSQL }}_id {{ (index $et.Model2.PsqlMap "ID").TypeSQL }} NOT NULL REFERENCES {{ $et.Model2.SQLTableName }}(id)
        {{- if not $et.Model1.Shared}},
    isolated_entity_id uuid NOT NULL
        {{- end }}
);         
    {{- end }}
{{- end -}}



{{- /* template data is models.Model */}}
{{- define "drop" }}
    {{- range $i, $et := $.ExtraTables }}
DROP TABLE IF EXISTS {{ $et.Name }};
    {{- end }}
DROP TABLE IF EXISTS {{ $.SQLTableName }};
DROP TABLE IF EXISTS {{ $.SQLAccessTableName }};
{{- end -}}



{{- define "migration_alter" }}
    {{- $diff := $.NewModelObj.Difference $.OldModelObj }}
-- +goose Up

    {{- /* Create new columns */}}
    {{- if len $diff.Create }}
        {{- range $i, $p := $diff.Create }}
ALTER TABLE {{ $.NewModelObj.SQLTableName }} ADD COLUMN {{ $p.SQLName }} {{ $p.TypeSQL }}
            {{- if eq $p.Name "ID"}} PRIMARY KEY{{ end }}
            {{- if $p.Unique}} UNIQUE{{ end }}
            {{- if $p.IsStruct}} REFERENCES {{ $p.FKModel.SQLTableName }}({{ $p.FK }}){{ end }}
            {{- if not (eq $i (MathAdd (len $diff.Create) -1)) }},{{ end }}
        {{- end }};
    {{- end -}}
    
    {{- /* Update changed columns */}}
    {{- if len $diff.Update }}
        {{- range $i, $p := $diff.Update }}

            {{- /* Previous version of current column */}}
            {{- $oldParams := ($.OldModelObj.SameOrPrevious $p) }}
            {{- $arrayChanged := not (eq $oldParams.IsArray $p.IsArray) }}
            {{- $structChanged := not (eq $oldParams.IsStruct $p.IsStruct) }}
            {{- $typeChanged := not (eq $oldParams.Type $p.Type) }}
            {{- $uniqueChanged := not (eq $oldParams.Unique $p.Unique) }}
            {{- $nameChanged := not (eq $oldParams.Name $p.Name) }}

            {{- /* Handle renaming */}}
            {{- if and $p.PrevColName $nameChanged }}
                {{- /* Rename many-to-many junction tables */}}
                {{- if (and $p.IsStruct $p.IsArray) }}
                    {{- range $i, $et := $.ExtraTables }}
                        {{- if and (eq $et.RefTableOne $.NewModelObj.TitleName) (eq $et.Model1Col.SQLName $p.SQLName) }}
ALTER TABLE {{ $.NewModelObj.SQLTableName }}_{{ $oldParams.Name | NameSQL }} RENAME COLUMN {{ $oldParams.SQLName }} TO {{ $p.SQLName }};
ALTER TABLE {{ $.NewModelObj.SQLTableName }}_{{ $oldParams.Name | NameSQL }} RENAME TO {{ $et.Name }};
                        {{- end }}
                        {{- if eq $et.Model2Col.Type $.NewModelObj.TitleName }}
ALTER TABLE {{ $et.Name }} RENAME COLUMN {{ $oldParams.SQLName }} TO {{ $p.SQLName }};
                        {{- end }}
                    {{- end }}
                {{- else }}
                {{- /* If there is no junction tables - just rename column */}}
ALTER TABLE {{ $.NewModelObj.SQLTableName }} RENAME COLUMN {{ $oldParams.SQLName }} TO {{ $p.SQLName }};
                {{- end }}
            {{- end }}

            {{- /* Handle changing UNIQUE constraint */}}
            {{- if $uniqueChanged }}
                {{- if $p.Unique }}
-- TODO handle non-unique data before creating unique constraint
CREATE UNIQUE INDEX CONCURRENTLY {{ call $p.UniqueIdxName }} ON {{ $.NewModelObj.SQLTableName }} ({{ $p.SQLName }});
ALTER TABLE {{ $.NewModelObj.SQLTableName }} ADD CONSTRAINT {{ call $p.UniqueIdxName }} UNIQUE USING INDEX {{ call $p.UniqueIdxName }};
                {{- else }}
ALTER TABLE {{ $.NewModelObj.SQLTableName }} DROP CONSTRAINT {{ call $p.UniqueIdxName }};
                {{- end }}
            {{- end -}}

            {{- /* Handle changing data type */}}
            {{- if and (or $typeChanged (and $arrayChanged $p.IsArray (not $p.IsStruct))) (not $structChanged) }}
ALTER TABLE {{ $.NewModelObj.SQLTableName }} ALTER COLUMN {{ $p.SQLName }} SET DATA TYPE {{ $p.TypeSQL }} USING {{ $p.SQLName }}::{{ $p.TypeSQL }};
            {{- end }}

            {{- /* Handle changing relation cardinality */}}
            {{- if or $arrayChanged $structChanged }}

                {{- /* Create many-to-many junction table */}}
                {{- if and $arrayChanged $p.IsArray $p.IsStruct }}
                    {{- range $i, $et := $.NewModelObj.ExtraTables }}
                        {{- /* TODO extract method get by Model1 name */}}
                        {{- if eq $et.Model1Col.Name $p.Name }}
CREATE TABLE {{ $et.Name }}
(
    {{ $et.Model1.TitleName | NameSQL }}_id {{ (index $et.Model1.PsqlMap "ID").TypeSQL }} NOT NULL REFERENCES {{ $et.Model1.SQLTableName }}(id),
    {{ $et.Model2.TitleName | NameSQL }}_id {{ (index $et.Model2.PsqlMap "ID").TypeSQL }} NOT NULL REFERENCES {{ $et.Model2.SQLTableName }}(id)
                            {{- if not $et.Model1.Shared}},
    isolated_entity_id uuid NOT NULL
                            {{- end }}
);
                            {{- if and (not $structChanged) (not $typeChanged) }}
INSERT INTO {{ $et.Name }} ({{ $et.Model1.TitleName | NameSQL }}_id, {{ $et.Model2.TitleName | NameSQL }}_id)
    SELECT id, {{ $p.SQLName }} FROM {{ $p.Model.SQLTableName }};
ALTER TABLE {{ $et.Model1.SQLTableName }} DROP COLUMN {{ $oldParams.SQLName }};
                            {{- end }}
                            
                            {{- if and $structChanged $typeChanged }}
-- TODO add custom migration script here
ALTER TABLE {{ $et.Model1.SQLTableName }} DROP COLUMN {{ $oldParams.SQLName }};
                            {{- end }}
                        {{- end }}
                    {{- end }}
                {{- end }}

                {{- /* Handle changing from common data type to non-array struct */}}
                {{- if and $structChanged (not $arrayChanged) $p.IsStruct (not $p.IsArray) }}
ALTER TABLE {{ $p.Model.SQLTableName }} ADD COLUMN {{ $p.SQLName }} {{ $p.TypeSQL }}
                        {{- if eq $p.Name "ID"}} PRIMARY KEY{{ end }}
                        {{- if $p.Unique}} UNIQUE{{ end }}
                        {{- if $p.IsStruct}} REFERENCES {{ $p.FKModel.SQLTableName }}({{ $p.FK }}){{ end }};
-- TODO add custom migration script here
ALTER TABLE {{ $p.Model.SQLTableName }} DROP COLUMN {{ $oldParams.SQLName }};
                {{- end }}

                {{- /* Handle changing from array struct to non-array common data type */}}
                {{- if and $structChanged $arrayChanged (not $p.IsArray) (not $p.IsStruct) }}
ALTER TABLE {{ $p.Model.SQLTableName }} ADD COLUMN {{ $p.SQLName }} {{ $p.TypeSQL }}
                    {{- if eq $p.Name "ID"}} PRIMARY KEY{{ end }}
                    {{- if $p.Unique}} UNIQUE{{ end }}
                    {{- if $p.IsStruct}} REFERENCES {{ $p.FKModel.SQLTableName }}({{ $p.FK }}){{ end }};
                    {{- range $i, $et := $.OldModelObj.ExtraTables }}
                        {{- if eq $et.Model1Col.Name $p.Name }}
-- TODO add custom migration script here
DROP TABLE IF EXISTS {{ $et.Name }};
                        {{- end }}
                    {{- end }}
                {{- end }}
            {{- end -}}

        {{- end }}
    {{- end -}}
    {{- /* END OF Update changed columns */}}

    {{- /* Drop absent columns */}}
    {{- if len $diff.Delete }}
        {{- range $i, $p := $diff.Delete }}
ALTER TABLE {{ $.NewModelObj.SQLTableName }} DROP COLUMN {{ $p.SQLName }};
        {{- end }}
    {{- end -}}

    {{- if $diff.SharedChanged }}
        {{- if $.NewModelObj.Shared}}
ALTER TABLE {{ $.NewModelObj.SQLTableName }} DROP COLUMN isolated_entity_id;
        {{- else }}
ALTER TABLE {{ $.NewModelObj.SQLTableName }} ADD COLUMN isolated_entity_id uuid NOT NULL;
        {{- end }}
    {{- end }}

-- +goose Down
    {{- /* Create dropped columns */}}
    {{- if len $diff.Delete }}
        {{- range $i, $p := $diff.Delete }}
ALTER TABLE {{ $.NewModelObj.SQLTableName }} ADD COLUMN {{ $p.SQLName }} {{ $p.TypeSQL }}
            {{- if eq $p.Name "ID"}} PRIMARY KEY{{ end }}
            {{- if $p.Unique}} UNIQUE{{ end }}
            {{- if $p.IsStruct}} REFERENCES {{ $p.FKModel.SQLTableName }}({{ $p.FK }}){{ end }};
        {{- end }}
    {{- end -}}

    {{- /* Revert updated columns */}}
    {{- if len $diff.Update }}
        {{- range $i, $p := $diff.Update }}

            {{- /* Previous version of current column */}}
            {{- $oldParams := ($.OldModelObj.SameOrPrevious $p) -}}
            {{- $arrayChanged := not (eq $oldParams.IsArray $p.IsArray) }}
            {{- $structChanged := not (eq $oldParams.IsStruct $p.IsStruct) }}
            {{- $typeChanged := not (eq $oldParams.Type $p.Type) }}
            {{- $uniqueChanged := not (eq $oldParams.Unique $p.Unique) }}
            {{- $nameChanged := not (eq $oldParams.Name $p.Name) }}

            {{- /* Handle renaming */}}
            {{- if and $p.PrevColName $nameChanged }}
                {{- /* Rename many-to-many junction tables */}}
                {{- if (and $p.IsStruct $p.IsArray) }}
                    {{- range $i, $et := $.ExtraTables }}
                        {{- if and (eq $et.RefTableOne $.NewModelObj.TitleName) (eq $et.Model1Col.SQLName $p.SQLName) }}
ALTER TABLE {{ $et.Name }} RENAME COLUMN {{ $p.SQLName }} TO {{ $oldParams.SQLName }};
ALTER TABLE {{ $et.Name }} RENAME TO {{ $.NewModelObj.SQLTableName }}_{{ $oldParams.Name | NameSQL }};
                        {{- end }}
                        {{- if eq $et.Model2Col.Type $.NewModelObj.TitleName }}
ALTER TABLE {{ $et.Name }} RENAME COLUMN {{ $p.SQLName }} TO {{ $oldParams.SQLName }};
                        {{- end }}
                    {{- end }}
                {{- else }}
                {{- /* If there is no junction tables - just rename column */}}
ALTER TABLE {{ $.NewModelObj.SQLTableName }} RENAME COLUMN {{ $p.SQLName }} TO {{ $oldParams.SQLName }};
                {{- end }}
            {{- end }}

            {{- /* Handle changing UNIQUE constraint */}}
            {{- if $uniqueChanged }}
                {{- if not $p.Unique }}
-- TODO handle non-unique data before creating unique constraint
CREATE UNIQUE INDEX CONCURRENTLY {{ call $p.UniqueIdxName }} ON {{ $.NewModelObj.SQLTableName }} ({{ $p.SQLName }});
ALTER TABLE {{ $.NewModelObj.SQLTableName }} ADD CONSTRAINT {{ call $p.UniqueIdxName }} UNIQUE USING INDEX {{ call $p.UniqueIdxName }};
                {{- else }}
ALTER TABLE {{ $.NewModelObj.SQLTableName }} DROP CONSTRAINT {{ call $p.UniqueIdxName }};
                {{- end }}
            {{- end -}}

            {{- /* Handle changing data type */}}
            {{- if and (or $typeChanged (and $arrayChanged $p.IsArray (not $p.IsStruct))) (not $structChanged) }}
ALTER TABLE {{ $.NewModelObj.SQLTableName }} ALTER COLUMN {{ $oldParams.SQLName }} SET DATA TYPE {{ $oldParams.TypeSQL }} USING {{ $oldParams.SQLName }}::{{ $oldParams.TypeSQL }};
            {{- end }}

            {{- /* Handle changing relation cardinality */}}
            {{- if or $arrayChanged $structChanged }}

                {{- /* Drop many-to-many junction table */}}
                {{- if and $arrayChanged $p.IsArray $p.IsStruct }}
                    {{- range $i, $et := $.NewModelObj.ExtraTables }}
                        {{- if eq $et.Model1Col.Name $p.Name }}
                            {{- /* TODO here we can lose data by changing m2m to o2o */}}
                            {{- if and $structChanged $typeChanged }}
ALTER TABLE {{ $et.Model1.SQLTableName }} ADD COLUMN {{ $oldParams.SQLName }} {{ $oldParams.TypeSQL }}
                                {{- if eq $oldParams.Name "ID"}} PRIMARY KEY{{ end }}
                                {{- if $oldParams.Unique}} UNIQUE{{ end }}
                                {{- if $oldParams.IsStruct}} REFERENCES {{ $oldParams.FKModel.SQLTableName }}({{ $oldParams.FK }}){{ end }};
                            {{- end }}
-- TODO add custom migration script here
DROP TABLE IF EXISTS {{ $et.Name }};
                        {{- end }}
                    {{- end }}
                {{- end }}

                {{- /* Handle changing from common data type to non-array struct */}}
                {{- if and $structChanged (not $arrayChanged) $p.IsStruct (not $p.IsArray) }}
ALTER TABLE {{ $p.Model.SQLTableName }} ADD COLUMN {{ $oldParams.SQLName }} {{ $oldParams.TypeSQL }}
                        {{- if eq $oldParams.Name "ID"}} PRIMARY KEY{{ end }}
                        {{- if $oldParams.Unique}} UNIQUE{{ end }}
                        {{- if $oldParams.IsStruct}} REFERENCES {{ $oldParams.FKModel.SQLTableName }}({{ $oldParams.FK }}){{ end }};
-- TODO add custom migration script here
ALTER TABLE {{ $p.Model.SQLTableName }} DROP COLUMN {{ $p.SQLName }};
                {{- end }}

                {{- /* Handle changing from common data type to array struct */}}
                {{- if and $structChanged $arrayChanged (not $p.IsArray) (not $p.IsStruct) }}
                    {{- range $i, $et := $.OldModelObj.ExtraTables }}
                        {{- if eq $et.Model1Col.Name $p.Name }}
CREATE TABLE {{ $et.Name }}
(
    {{ $et.Model1.TitleName | NameSQL }}_id {{ (index $et.Model1.PsqlMap "ID").TypeSQL }} NOT NULL REFERENCES {{ $et.Model1.SQLTableName }}(id),
    {{ $et.Model2.TitleName | NameSQL }}_id {{ (index $et.Model2.PsqlMap "ID").TypeSQL }} NOT NULL REFERENCES {{ $et.Model2.SQLTableName }}(id)
                            {{- if not $et.Model1.Shared}},
    isolated_entity_id uuid NOT NULL
                            {{- end }}
);
                        {{- end }}
                    {{- end }}
-- TODO add custom migration script here
ALTER TABLE {{ $p.Model.SQLTableName }} DROP COLUMN {{ $p.SQLName }};
                {{- end }}
            {{- end -}}

        {{- end }}
    {{- end -}}
    {{- /* END OF Revert updated columns */}}

    {{- /* Drop created columns */}}
    {{- if len $diff.Create }}
        {{- range $i, $p := $diff.Create }}
ALTER TABLE {{ $.NewModelObj.SQLTableName }} DROP COLUMN {{ $p.SQLName }};
        {{- end }}
    {{- end -}}


    {{- if $diff.SharedChanged }}
        {{- if not $.NewModelObj.Shared}}
ALTER TABLE {{ $.NewModelObj.SQLTableName }} DROP COLUMN isolated_entity_id;
        {{- else }}
ALTER TABLE {{ $.NewModelObj.SQLTableName }} ADD COLUMN isolated_entity_id uuid NOT NULL;
        {{- end }}
    {{- end -}}

{{- end }}
