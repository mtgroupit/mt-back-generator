swagger: "2.0"
info:
  description: {{ .Description }}
  title: {{.Name}}
  version: 1.0.0
consumes:
  - application/json
produces:
  - application/json
schemes:
  - http
securityDefinitions:
  cookieKey:
    description: Session token inside cookie.
    type: apiKey
    in: header
    name: Cookie
  csrfToken:
    description: Token for CSRF protection (tied to session token).
    type: apiKey
    in: header
    name: X-CSRFTokenBound
security:
  - cookieKey: []
  - cookieKey: []
    csrfToken: []
paths:  
  /healthCheck:    
    get:
      security:
        - {}
      operationId: healthCheck 
      responses:        
        200:
          description: OK 
          schema:
            type: object
            properties:
              ok:
                type: boolean 
{{- range $modelName, $model := $.Models}}
  {{- range $i, $method := $model.Methods}}
  /{{LowerTitle $modelName}}/{{LowerTitle $method}}:    
    {{(index $model.MethodsProps $i).HTTPMethod}}: 
    {{- if $model.Tags}}
      tags:
      {{- range $_, $tag := $model.Tags}}
        - {{$tag}}
      {{- end}}
    {{- end}}
      operationId: {{LowerTitle $method}}{{$model.TitleName}}
    {{- if not (or (eq $method "GetMy") (eq $method "DeleteMy"))}}
      parameters:
        - name: body
          in: body
          schema: 
      {{- if or (eq $method "Get") (eq $method "Delete")}}
            type: object
            properties:
              id:
                type: {{if $model.IDIsUUID}}string{{else}}{{(index $model.Columns "id").Type}}{{end}}
      {{- else}}
        {{- if IsList $method}}
            $ref: "#/definitions/listParams" 
        {{- else}}
          {{- if IsEdit $method}}
            type: object
            properties:
            {{- if not (and (IsEdit $method) (IsMyMethod $method))}}
              id:
                type: {{if $model.IDIsUUID}}string{{else}}int64{{end}} 
            {{- end}}
              data:
            {{- if IsCustomEdit $method}}
                type: object
                properties:
              {{- range $name, $options := $model.Columns}}
                {{- if ContainsStr (index $model.MethodsProps $i).EditableFields $name}}
                  {{- if $options.IsStruct}}
                    {{- if $options.IsArray}}  
                  {{$name}}:
                    type: array
                    items:
                      type: {{if (index $.Models $options.GoType).IDIsUUID}}string{{else}}int64{{end}}
                    {{- else}}            
                  {{$name}}:
                    type: {{if (index $.Models $options.GoType).IDIsUUID}}string{{else}}int64{{end}}
                    {{- end}}
                  {{- else}}
                  {{$name}}:
                    {{- if $options.IsArray}}  
                    type: array
                    items:
                    {{- end}}
                      type: {{if eq $options.Type "uuid"}}string{{else}}{{$options.Type}}{{end}} 
                      {{- if $options.Format}}
                      format: {{$options.Format}}
                      {{- end}}
                      {{- if .Length}}
                      maxLength: {{.Length}}
                      {{- end}}
                      {{- if .Default}}
                      default: {{.Default}}
                      {{- end}}
                      {{- if $options.Enum}}
                      enum: {{EnumPrint $options.Enum}}
                      {{- end}}
                  {{- end}}
                {{- end}}
              {{- end}}
            {{- end}}
          {{- end}}
              {{- if not (IsCustomEdit $method)}}
                $ref: "#/definitions/{{LowerTitle $modelName}}Add"
              {{- end}}
        {{- end}}
      {{- end}}
    {{- end}} 
      responses:        
    {{- if IsDelete $method}}
        204:
          description: Deleted
    {{- else}}
      {{- if IsAdd $method}}
        201:
          description: Created 
          schema:
            $ref: "#/definitions/{{LowerTitle $modelName}}" 
      {{- else}}
        200:
          description: OK        
      {{- end}}
    {{- end}}        
    {{- if or (IsList $method) (IsGet $method) (and (IsEdit $method) $model.ReturnWhenEdit)}}
          schema:          
          {{- if or (eq $method "List") (IsCustomList $method)}}
            type: object
            properties:
            {{- if $model.DetailedPagination}}
              count:
                type: integer
                format: int32
            {{- end}}
              warnings:
                type: array
                items:
                  type: string
              items:
                type: array
                items:
          {{- end}}
                  $ref: "#/definitions/{{LowerTitle $modelName}}"
    {{- end}}
        default:
          description: error
          schema:
            $ref: "#/definitions/error"
  {{- end}} 
  {{- range $column, $options := $model.Columns}}
  {{- if and $options.IsStruct $options.IsArray}}
  /{{LowerTitle $modelName}}/add{{Title $column}}:    
    post:
    {{- if $model.Tags}}
      tags:
      {{- range $_, $tag := $model.Tags}}
        - {{$tag}}
      {{- end}}
    {{- end}}
      operationId: add{{Title $column}}{{$modelName}}
      parameters:
        - name: body
          in: body
          schema: 
            type: object
            properties:
              id:
                type: {{if $model.IDIsUUID}}string{{else}}int64{{end}}
              itemsID:
                type: array
                items:
                  type: {{if (index $.Models $options.GoType).IDIsUUID}}string{{else}}int64{{end}}
              items:
                type: array
                items:
                  $ref: "#/definitions/{{LowerTitle $options.GoType}}Add" 
      responses:        
        200:
          description: OK
        default:
          description: error
          schema:
            $ref: "#/definitions/error"
  /{{LowerTitle $modelName}}/delete{{Title $column}}:    
    post:
    {{- if $model.Tags}}
      tags:
      {{- range $_, $tag := $model.Tags}}
        - {{$tag}}
      {{- end}}
    {{- end}}
      operationId: delete{{Title $column}}{{$modelName}}
      parameters:
        - name: body
          in: body
          schema: 
            type: object
            properties:
              id:
                type: {{if $model.IDIsUUID}}string{{else}}int64{{end}}
              items:
                type: array
                items:
                  type: {{if (index $.Models $options.GoType).IDIsUUID}}string{{else}}int64{{end}}
      responses:        
        200:
          description: OK
        default:
          description: error
          schema:
            $ref: "#/definitions/error"
  {{- end}}
  {{- end}}
  /{{LowerTitle $modelName}}/accessManager:    
    post:
    {{- if $model.Tags}}
      tags:
      {{- range $_, $tag := $model.Tags}}
        - {{$tag}}
      {{- end}}
    {{- end}}
      operationId: {{LowerTitle $modelName}}AccessManager
      parameters:
        - name: body
          in: body
          schema: 
            $ref: "#/definitions/accessManager" 
      responses:        
        200:
          description: OK
        default:
          description: error
          schema:
            $ref: "#/definitions/error"
  {{- range $funcName, $func := $.Functions}}
  /{{LowerTitle $modelName}}/{{$funcName}}:
    post:
      operationId: {{LowerTitle $modelName}}{{$funcName}}
      parameters:
        - name: body
          in: body
          schema:                      
            $ref: "#/definitions/{{$funcName}}Params"                      
      responses:        
        200:
          description: OK                
          schema:             
            $ref: "#/definitions/{{$funcName}}Params" 
        default:
          description: error
          schema:
            $ref: "#/definitions/error"
  {{- end}}
{{- end}}
definitions:
  error:
    type: object
    required:
      - code
      - message
    properties:
      code:
        description: Either same as HTTP Status Code OR >= 600.
        type: integer
        format: int32
      message:
        type: string
{{range $modelName, $model := $.Models}}  
  {{LowerTitle $modelName}}:
    type: object
    description: "{{.Description}}"
    properties:      
  {{- range $name, $options := $model.Columns}}
    {{- if or $options.IsStruct $options.IsCustom}}
      {{- if $options.IsArray}}  
      {{$name}}:
        type: array
        items:
          $ref: "#/definitions/{{$options.Type}}"
      {{- else}}            
      {{$name}}:
        $ref: "#/definitions/{{$options.Type}}"
      {{- end}}
    {{- else}}
      {{- if $options.IsArray}}
      {{$name}}:
        type: array
        items:
          type: {{if eq $options.Type "uuid"}}string{{else}}{{$options.Type}}{{end}}
        {{- if $options.Format}}
          format: {{$options.Format}}
        {{- end}}
        {{- if .Length}}
          maxLength: {{.Length}}
        {{- end}}
        {{- if .Default}}
          default: {{.Default}}
        {{- end}}
        {{- if $options.Enum}}
          enum: {{EnumPrint $options.Enum}}
        {{- end}}
      {{- else}}
      {{$name}}:
        type: {{if eq $options.Type "uuid"}}string{{else}}{{$options.Type}}{{end}}
        {{- if $options.Format}}
        format: {{$options.Format}}
        {{- end}}
        {{- if .Length}}
        maxLength: {{.Length}}
        {{- end}}
        {{- if .Default}}
        default: {{.Default}}
        {{- end}}
        {{- if $options.Enum}}
        enum: {{EnumPrint $options.Enum}}
        {{- end}}
      {{- end}}
    {{- end}}
  {{- end}}
  {{LowerTitle $modelName}}Add:
    type: object
    description: "{{LowerTitle $modelName}} model for add and edit methods"
    properties:
  {{- range $name, $options := $model.Columns}}
  {{- if and (ne $name "id") (not (IsStandardColumn $name))}}
    {{- if $options.IsStruct}}
      {{- if $options.IsArray}}  
      {{$name}}:
        type: array
        items:
          type: {{if (index $.Models $options.GoType).IDIsUUID}}string{{else}}int64{{end}}
      {{- else}}            
      {{$name}}:
        type: {{if (index $.Models $options.GoType).IDIsUUID}}string{{else}}int64{{end}}
      {{- end}}
    {{- else}}
      {{- if $options.IsCustom}}
      {{- if $options.IsArray}}  
      {{$name}}:
        type: array
        items:
          $ref: "#/definitions/{{$options.Type}}"
      {{- else}}            
      {{$name}}:
        $ref: "#/definitions/{{$options.Type}}"
      {{- end}}
      {{- else}}
      {{$name}}:
      {{- if $options.IsArray}}
        type: array
        items:
          type: {{if eq $options.Type "uuid"}}string{{else}}{{$options.Type}}{{end}}
        {{- if $options.Format}}
          format: {{$options.Format}}
        {{- end}}
        {{- if .Length}}
          maxLength: {{.Length}}
        {{- end}}
        {{- if .Default}}
          default: {{.Default}}
        {{- end}}
        {{- if $options.Enum}}
          enum: {{EnumPrint $options.Enum}}
        {{- end}}
      {{- else}}
        type: {{if eq $options.Type "uuid"}}string{{else}}{{$options.Type}}{{end}}
        {{- if $options.Format}}
        format: {{$options.Format}}
        {{- end}}
        {{- if .Length}}
        maxLength: {{.Length}}
        {{- end}}
        {{- if .Default}}
        default: {{.Default}}
        {{- end}}
        {{- if $options.Enum}}
        enum: {{EnumPrint $options.Enum}}
        {{- end}}
      {{- end}}
      {{- end}}
    {{- end}}
  {{- end}}
  {{- end}}
{{end}} 
{{range $customTypeName, $customType := $.CustomTypes}}
  {{$customTypeName}}:
    type: object
    description: "{{$customType.Description}}"
    properties:      
  {{- range $fieldName, $options := $customType.Fields}}
    {{- if $options.IsCustom}}
      {{- if $options.IsArray}}  
      {{$fieldName}}:
        type: array
        items:
          $ref: "#/definitions/{{$options.Type}}"
      {{- else}}            
      {{$fieldName}}:
        $ref: "#/definitions/{{$options.Type}}"
      {{- end}}
    {{- else}}
      {{- if $options.IsArray}}
      {{$fieldName}}:
        type: array
        items:
          type: {{$options.Type}}
        {{- if $options.Format}}
          format: {{$options.Format}}
        {{- end}}
        {{- if .Length}}
          maxLength: {{.Length}}
        {{- end}}
        {{- if .Default}}
          default: {{.Default}}
        {{- end}}
        {{- if $options.Enum}}
          enum: {{EnumPrint $options.Enum}}
        {{- end}}
      {{- else}}
      {{$fieldName}}:
        type: {{$options.Type}}
        {{- if $options.Format}}
        format: {{$options.Format}}
        {{- end}}
        {{- if .Length}}
        maxLength: {{.Length}}
        {{- end}}
        {{- if .Default}}
        default: {{.Default}}
        {{- end}}
        {{- if $options.Enum}}
        enum: {{EnumPrint $options.Enum}}
        {{- end}}
      {{- end}}
    {{- end}}
  {{- end}}
{{end}}
  accessManager:
    type: object
    description: params for set access
    properties:
      user:
        type: string
      group:
        type: string
      read:
        type: boolean 
      write:
        type: boolean 
      delete:
        type: boolean 
      add:
        type: boolean 
      accessManager:
        type: boolean
{{if .HaveListMethod}}
  listParams:
    type: object
    description: params for list method
    properties:
      limit:
        type: integer
        default: 10
      offset:
        type: integer
        default: 0
      filters:
        type: array
        items:
          $ref: "#/definitions/filterParams"    
      logicFilter:
        description: "Comparing option: true == 'AND', false == 'OR'"
        type: boolean
      sortBy:
        type: string
      orderBy:
        type: string
        enum: [ASC, DESC]

  filterParams:
    type: object
    description: params for filter list
    properties:
      include:
        type: boolean
      key:
        type: string
      value:
        type: string
{{end}}
{{- range $funcName, $func := $.Functions}}  
  {{$funcName}}Params:
    type: object
    description: params for {{$funcName}} method
    properties: 
    {{- range $param, $paramType := $func.In}}
      {{$param}}:
        type: {{$paramType}}
    {{- end}} 
    {{- range $param, $paramType := $func.Out}}
      {{$param}}:
        type: {{$paramType}}
    {{- end}}
{{- end}}