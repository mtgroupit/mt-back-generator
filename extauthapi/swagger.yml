swagger: "2.0"

info:
  title: Authentication
  version: 1.0.0
  description: |
    ## List of all custom errors
    First number is HTTP Status code, second is value of "code" field in returned JSON object, text description may or may not match "message" field in returned JSON object.
    - 404.101: invalid credentials

basePath: /api/v1/
schemes:
  - http

security:
  - cookieKey: []
  - cookieKey: []
    csrfToken: []

consumes:
  - application/json
produces:
  - application/json

securityDefinitions:
  cookieKey:
    description: Session token inside cookie.
    type: apiKey
    in: header
    name: Cookie
  csrfToken:
    description: Token for CSRF protection (tied to session token).
    type: apiKey
    in: header
    name: X-CSRFTokenBound

definitions:
  Error:
    type: object
    required:
      - code
      - message
    properties:
      code:
        description: Either same as HTTP Status Code OR >= 600.
        type: integer
        format: int32
      message:
        type: string

  ID:
    type: string
    format: uuid4

  JWT:
    type: string
    minLength: 1
    maxLength: 1000

  UserID:
    type: string
    format: uuid4

  CountryCode:
    description: Country code (ISO 3166-1 alpha-2).
    type: string
    minLength: 2
    maxLength: 2
    enum:
      [
        "AD",
        "AE",
        "AF",
        "AG",
        "AI",
        "AL",
        "AM",
        "AO",
        "AQ",
        "AR",
        "AS",
        "AT",
        "AU",
        "AW",
        "AX",
        "AZ",
        "BA",
        "BB",
        "BD",
        "BE",
        "BF",
        "BG",
        "BH",
        "BI",
        "BJ",
        "BL",
        "BM",
        "BN",
        "BO",
        "BQ",
        "BR",
        "BS",
        "BT",
        "BV",
        "BW",
        "BY",
        "BZ",
        "CA",
        "CC",
        "CD",
        "CF",
        "CG",
        "CH",
        "CI",
        "CK",
        "CL",
        "CM",
        "CN",
        "CO",
        "CR",
        "CU",
        "CV",
        "CW",
        "CX",
        "CY",
        "CZ",
        "DE",
        "DJ",
        "DK",
        "DM",
        "DO",
        "DZ",
        "EC",
        "EE",
        "EG",
        "EH",
        "ER",
        "ES",
        "ET",
        "FI",
        "FJ",
        "FK",
        "FM",
        "FO",
        "FR",
        "GA",
        "GB",
        "GD",
        "GE",
        "GF",
        "GG",
        "GH",
        "GI",
        "GL",
        "GM",
        "GN",
        "GP",
        "GQ",
        "GR",
        "GS",
        "GT",
        "GU",
        "GW",
        "GY",
        "HK",
        "HM",
        "HN",
        "HR",
        "HT",
        "HU",
        "ID",
        "IE",
        "IL",
        "IM",
        "IN",
        "IO",
        "IQ",
        "IR",
        "IS",
        "IT",
        "JE",
        "JM",
        "JO",
        "JP",
        "KE",
        "KG",
        "KH",
        "KI",
        "KM",
        "KN",
        "KP",
        "KR",
        "KW",
        "KY",
        "KZ",
        "LA",
        "LB",
        "LC",
        "LI",
        "LK",
        "LR",
        "LS",
        "LT",
        "LU",
        "LV",
        "LY",
        "MA",
        "MC",
        "MD",
        "ME",
        "MF",
        "MG",
        "MH",
        "MK",
        "ML",
        "MM",
        "MN",
        "MO",
        "MP",
        "MQ",
        "MR",
        "MS",
        "MT",
        "MU",
        "MV",
        "MW",
        "MX",
        "MY",
        "MZ",
        "NA",
        "NC",
        "NE",
        "NF",
        "NG",
        "NI",
        "NL",
        "NO",
        "NP",
        "NR",
        "NU",
        "NZ",
        "OM",
        "PA",
        "PE",
        "PF",
        "PG",
        "PH",
        "PK",
        "PL",
        "PM",
        "PN",
        "PR",
        "PS",
        "PT",
        "PW",
        "PY",
        "QA",
        "RE",
        "RO",
        "RS",
        "RU",
        "RW",
        "SA",
        "SB",
        "SC",
        "SD",
        "SE",
        "SG",
        "SH",
        "SI",
        "SJ",
        "SK",
        "SL",
        "SM",
        "SN",
        "SO",
        "SR",
        "SS",
        "ST",
        "SV",
        "SX",
        "SY",
        "SZ",
        "TC",
        "TD",
        "TF",
        "TG",
        "TH",
        "TJ",
        "TK",
        "TL",
        "TM",
        "TN",
        "TO",
        "TR",
        "TT",
        "TV",
        "TW",
        "TZ",
        "UA",
        "UG",
        "UM",
        "US",
        "UY",
        "UZ",
        "VA",
        "VC",
        "VE",
        "VG",
        "VI",
        "VN",
        "VU",
        "WF",
        "WS",
        "YE",
        "YT",
        "ZA",
        "ZM",
        "ZW",
      ]

  Language:
    type: string
    minLength: 2
    maxLength: 2
    enum: ["en", "fr"]

  Email:
    type: string
    format: email

  Username:
    type: string
    pattern: "^[A-Za-z0-9]+$"
    minLength: 1
    maxLength: 63

  UsernameOrEmail:
    type: string
    minLength: 1
    maxLength: 200

  Password:
    type: string

  Endpoint:
    type: string
    format: uri
    minLength: 1
    maxLength: 100

  ResetPassToken:
    type: string
    minLength: 1
    maxLength: 1000

  Profile:
    description: User profile with auth details.
    type: object
    required:
      - persdataEndpoint
      - authn
      - authz
    properties:
      id: # required if authn
        $ref: "#/definitions/UserID"
      username:
        $ref: "#/definitions/Username"
      email: # not required even if authz.user
        $ref: "#/definitions/Email"
      persdataEndpoint:
        $ref: "#/definitions/Endpoint"
      isolatedEntityId:
        $ref: "#/definitions/UserID"
      authn:
        description: Is user authenticated by credentials provided in request.
        type: boolean
      authz:
        description: User roles/permissions needed for authorization.
        type: object
        required:
          - user
          - admin
          - manager
        properties:
          user:
            description: Is user has validated email.
            type: boolean
          admin:
            description: Is user an admin.
            type: boolean
          manager:
            description: Is user an manager.
            type: boolean

  Phone:
    type: string
    format: phone

  Name:
    description: Full user name.
    type: string
    minLength: 1
    maxLength: 100

responses:
  GenericError:
    description: Generic error response.
    schema:
      $ref: "#/definitions/Error"

  NoContent:
    description: The server successfully processed the request and is not returning any content.

  NoContentWithAuth:
    description: The server successfully processed the request and is not returning any content.
    headers: &session-token
      Set-Cookie:
        description: Session token.
        type: string

paths:
  /is-email-available:
    post:
      operationId: isEmailAvailable
      description: Checks is email is available.
      security: []
      parameters:
        - name: args
          required: true
          in: body
          schema:
            type: object
            required:
              - email
            properties:
              email:
                $ref: "#/definitions/Email"
      responses:
        "200":
          description: OK
          schema:
            type: object
            required:
              - available
            properties:
              available:
                description: True if email is available.
                type: boolean
        default: { $ref: "#/responses/GenericError" }

  /request-registration:
    post:
      operationId: requestRegistration
      description: Sends email with validation token.
      security: []
      parameters:
        - name: args
          required: true
          in: body
          schema:
            type: object
            required:
              - email
              - password
            properties:
              email:
                $ref: "#/definitions/Email"
              password:
                $ref: "#/definitions/Password"
              language:
                $ref: "#/definitions/Language"
      responses:
        "204": { $ref: "#/responses/NoContent" }
        default:
          description: |
            - 404.2003: email is not available
            - 404.2014: registation request by this email already exist  
            - 404.2004: password is too weak
          schema:
            $ref: "#/definitions/Error"

  /register-activate:
    post:
      operationId: register
      description: Register new user by validated email.
      security: []
      parameters:
        - name: args
          required: true
          in: body
          schema:
            type: object
            required:
              - emailToken
            properties:
              emailToken:
                $ref: "#/definitions/JWT"
      responses:
        "200":
          description: OK
          headers: *session-token
          schema:
            type: object
            required:
              - userID
            properties:
              userID:
                $ref: "#/definitions/UserID"
        default:
          description: |
            - 404.2003: email is not available
            - 404.2001: invalid email validation token
          schema:
            $ref: "#/definitions/Error"

  /register-activate-resend-email:
    post:
      operationId: registerActivateResendEmail
      description: Resend new email if old token is not valid.
      security: []
      parameters:
        - name: args
          required: true
          in: body
          schema:
            type: object
            required:
              - emailToken
            properties:
              emailToken:
                $ref: "#/definitions/JWT"
      responses:
        "200":
          description: OK
        default:
          description: |
            - 404.2001: invalid email validation token
          schema:
            $ref: "#/definitions/Error"

  /reset-password:
    post:
      operationId: resetPassword
      description: Request password reset by  email.
      security: []
      parameters:
        - name: args
          required: true
          in: body
          schema:
            type: object
            required:
              - email
            properties:
              email:
                $ref: "#/definitions/Email"
      responses:
        "204": { $ref: "#/responses/NoContent" }
        default:
          description: |
            - 404.101: invalid credentials
            - 404.707: no such email
          schema:
            $ref: "#/definitions/Error"

  /set-new-password:
    post:
      operationId: setNewPassword
      description: Change user password using reset password token and expire all user sessions.
      security: []
      parameters:
        - name: args
          required: true
          in: body
          schema:
            type: object
            required:
              - token
              - password
            properties:
              token:
                $ref: "#/definitions/ResetPassToken"
              password:
                $ref: "#/definitions/Password"
      responses:
        "204": { $ref: "#/responses/NoContent" }
        default:
          description: |
            - 404.2004: password is too weak
            - 404.2005: invalid password reset token
          schema:
            $ref: "#/definitions/Error"

  /login:
    post:
      operationId: login
      description: Sign in user.
      security: []
      parameters:
        - name: args
          required: true
          in: body
          schema:
            type: object
            required:
              - email
              - password
            properties:
              email:
                $ref: "#/definitions/Email"
              password:
                $ref: "#/definitions/Password"
      responses:
        "204": { $ref: "#/responses/NoContentWithAuth" }
        default:
          description: |
            - 404.2015: email not activated
            - 404.2016: invalid credentials
          schema:
            $ref: "#/definitions/Error"

  /logout:
    post:
      operationId: logout
      description: Sign out user.
      responses:
        "204": { $ref: "#/responses/NoContentWithAuth" }
        default: { $ref: "#/responses/GenericError" }

  /delete-user:
    post:
      operationId: deleteUser
      description: Removes user account and expire all user sessions including current one.
      parameters:
        - name: args
          required: true
          in: body
          schema:
            type: object
            required:
              - password
            properties:
              password:
                $ref: "#/definitions/Password"
      responses:
        "204": { $ref: "#/responses/NoContentWithAuth" }
        default:
          description: |
            - 403.710: invalid password
          schema:
            $ref: "#/definitions/Error"

  /change-password:
    post:
      operationId: changePassword
      description: Change user password and expire all user sessions including current one.
      parameters:
        - name: args
          required: true
          in: body
          schema:
            type: object
            required:
              - newPassword
            properties:
              oldPassword:
                $ref: "#/definitions/Password"
              newPassword:
                $ref: "#/definitions/Password"
      responses:
        "204": { $ref: "#/responses/NoContentWithAuth" }
        default:
          description: |
            - 404.2004: password is too weak
            - 403.710: invalid password
          schema:
            $ref: "#/definitions/Error"

  /is-username-available:
    post:
      operationId: isUsernameAvailable
      description: Checks is username available.
      parameters:
        - name: args
          required: true
          in: body
          schema:
            type: object
            required:
              - username
            properties:
              username:
                $ref: "#/definitions/Username"
      responses:
        "200":
          description: OK
          schema:
            type: object
            required:
              - available
            properties:
              available:
                description: True if username is available.
                type: boolean
        default: { $ref: "#/responses/GenericError" }

  /set-username:
    post:
      operationId: setUsername
      description: Set user username.
      parameters:
        - name: args
          required: true
          in: body
          schema:
            type: object
            required:
              - username
            properties:
              username:
                $ref: "#/definitions/Username"
      responses:
        "204": { $ref: "#/responses/NoContent" }
        default:
          description: |
            - 409.701: username is not available
          schema:
            $ref: "#/definitions/Error"

  /set-persdata-region:
    post:
      operationId: setPersDataRegion
      description: After calling this method client should save user's personal data on returned persdata service.
      parameters:
        - name: args
          required: true
          in: body
          schema:
            type: object
            required:
              - countryCode
            properties:
              countryCode:
                $ref: "#/definitions/CountryCode"
      responses:
        "200":
          description: OK
          schema:
            type: object
            required:
              - persdataEndpoint
            properties:
              persdataEndpoint:
                $ref: "#/definitions/Endpoint"
        default: { $ref: "#/responses/GenericError" }

  /get-user-profile:
    post:
      operationId: getUserProfile
      description: Get user profile.
      security:
        - cookieKey: []
        - cookieKey: []
          csrfToken: []
        - {} # XXX Auth is required, but front asks to return empty profile instead of 401 here.
      responses:
        "200":
          description: OK
          schema:
            $ref: "#/definitions/Profile"
        default: { $ref: "#/responses/GenericError" }

  /get-user-profile-by-id:
    post:
      operationId: getUserProfileByID
      description: Get public part of other user's profile by ID.
      security: [] # XXX Should require auth here, provide same without auth on gRPC.
      parameters:
        - name: args
          required: true
          in: body
          schema:
            type: object
            required:
              - id
            properties:
              id:
                $ref: "#/definitions/UserID"
      responses:
        "200":
          description: OK
          schema:
            $ref: "#/definitions/Profile"
        default: { $ref: "#/responses/GenericError" }

  /search-users-by-username:
    post:
      operationId: searchUsersByUsername
      description: >
        Get public part of up to 10 other user's profiles by username prefix.
        Ordered by username.
        Require exact match if username length is less than 4.
      parameters:
        - name: args
          required: true
          in: body
          schema:
            type: object
            required:
              - username
            properties:
              username:
                $ref: "#/definitions/Username"
      responses:
        "200":
          description: OK
          schema:
            type: object
            required:
              - profiles
            properties:
              profiles:
                type: array
                minItems: 0
                maxItems: 10
                items:
                  $ref: "#/definitions/Profile"
        default: { $ref: "#/responses/GenericError" }

  /validate-new-email:
    post:
      operationId: validateNewEmail
      description: Request user email change.
      parameters:
        - name: args
          required: true
          in: body
          schema:
            type: object
            required:
              - email
              - password
            properties:
              email:
                $ref: "#/definitions/Email"
              password:
                $ref: "#/definitions/Password"
      responses:
        "204": { $ref: "#/responses/NoContent" }
        default:
          description: |
            - 404.2003: email is not available
            - 403.710: invalid password
          schema:
            $ref: "#/definitions/Error"

  /set-email:
    post:
      operationId: setEmail
      description: Set new email.
      security: []
      parameters:
        - name: args
          required: true
          in: body
          schema:
            type: object
            required:
              - emailToken
            properties:
              emailToken:
                $ref: "#/definitions/JWT"
      responses:
        "204": { $ref: "#/responses/NoContent" }
        default:
          description: |
            - 404.2003: email is not available
            - 404.2001: invalid email validation token
          schema:
            $ref: "#/definitions/Error"

  /set-blocked:
    post:
      operationId: setBlocked
      description: Let admin block/unblock all access to API for a user.
      parameters:
        - name: args
          required: true
          in: body
          schema:
            type: object
            required:
              - id
              - blocked
            properties:
              id:
                $ref: "#/definitions/UserID"
              blocked:
                description: True to block user, False to unblock.
                type: boolean
      responses:
        "204": { $ref: "#/responses/NoContent" }
        default: { $ref: "#/responses/GenericError" }
