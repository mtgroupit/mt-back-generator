// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	"github.com/Lisss13/french-back-template/snouki-mobile/mtmb-extauthapi/models"
)

// IsEmailAvailableReader is a Reader for the IsEmailAvailable structure.
type IsEmailAvailableReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *IsEmailAvailableReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewIsEmailAvailableOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		result := NewIsEmailAvailableDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewIsEmailAvailableOK creates a IsEmailAvailableOK with default headers values
func NewIsEmailAvailableOK() *IsEmailAvailableOK {
	return &IsEmailAvailableOK{}
}

/*IsEmailAvailableOK handles this case with default header values.

OK
*/
type IsEmailAvailableOK struct {
	Payload *IsEmailAvailableOKBody
}

func (o *IsEmailAvailableOK) Error() string {
	return fmt.Sprintf("[POST /is-email-available][%d] isEmailAvailableOK  %+v", 200, o.Payload)
}

func (o *IsEmailAvailableOK) GetPayload() *IsEmailAvailableOKBody {
	return o.Payload
}

func (o *IsEmailAvailableOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(IsEmailAvailableOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewIsEmailAvailableDefault creates a IsEmailAvailableDefault with default headers values
func NewIsEmailAvailableDefault(code int) *IsEmailAvailableDefault {
	return &IsEmailAvailableDefault{
		_statusCode: code,
	}
}

/*IsEmailAvailableDefault handles this case with default header values.

Generic error response.
*/
type IsEmailAvailableDefault struct {
	_statusCode int

	Payload *models.Error
}

// Code gets the status code for the is email available default response
func (o *IsEmailAvailableDefault) Code() int {
	return o._statusCode
}

func (o *IsEmailAvailableDefault) Error() string {
	return fmt.Sprintf("[POST /is-email-available][%d] isEmailAvailable default  %+v", o._statusCode, o.Payload)
}

func (o *IsEmailAvailableDefault) GetPayload() *models.Error {
	return o.Payload
}

func (o *IsEmailAvailableDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*IsEmailAvailableBody is email available body
swagger:model IsEmailAvailableBody
*/
type IsEmailAvailableBody struct {

	// email
	// Required: true
	// Format: email
	Email models.Email `json:"email"`
}

// Validate validates this is email available body
func (o *IsEmailAvailableBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateEmail(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *IsEmailAvailableBody) validateEmail(formats strfmt.Registry) error {

	if err := o.Email.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("args" + "." + "email")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *IsEmailAvailableBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *IsEmailAvailableBody) UnmarshalBinary(b []byte) error {
	var res IsEmailAvailableBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*IsEmailAvailableOKBody is email available o k body
swagger:model IsEmailAvailableOKBody
*/
type IsEmailAvailableOKBody struct {

	// True if email is available.
	// Required: true
	Available *bool `json:"available"`
}

// Validate validates this is email available o k body
func (o *IsEmailAvailableOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAvailable(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *IsEmailAvailableOKBody) validateAvailable(formats strfmt.Registry) error {

	if err := validate.Required("isEmailAvailableOK"+"."+"available", "body", o.Available); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *IsEmailAvailableOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *IsEmailAvailableOKBody) UnmarshalBinary(b []byte) error {
	var res IsEmailAvailableOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
