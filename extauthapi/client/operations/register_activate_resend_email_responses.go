// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/mtgroupit/mt-back-generator/extauthapi/models"
)

// RegisterActivateResendEmailReader is a Reader for the RegisterResendEmail structure.
type RegisterActivateResendEmailReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *RegisterActivateResendEmailReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewRegisterActivateResendEmailOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		result := NewRegisterActivateResendEmailDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewRegisterActivateResendEmailOK creates a RegisterActivateResendEmailOK with default headers values
func NewRegisterActivateResendEmailOK() *RegisterActivateResendEmailOK {
	return &RegisterActivateResendEmailOK{}
}

/*RegisterActivateResendEmailOK handles this case with default header values.

OK
*/
type RegisterActivateResendEmailOK struct {
}

func (o *RegisterActivateResendEmailOK) Error() string {
	return fmt.Sprintf("[POST /register-activate-resend-email][%d] registerActivateResendEmailOK ", 200)
}

func (o *RegisterActivateResendEmailOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewRegisterActivateResendEmailDefault creates a RegisterActivateResendEmailDefault with default headers values
func NewRegisterActivateResendEmailDefault(code int) *RegisterActivateResendEmailDefault {
	return &RegisterActivateResendEmailDefault{
		_statusCode: code,
	}
}

/*RegisterActivateResendEmailDefault handles this case with default header values.

- 404.2001: invalid email validation token

*/
type RegisterActivateResendEmailDefault struct {
	_statusCode int

	Payload *models.Error
}

// Code gets the status code for the register activate resend email default response
func (o *RegisterActivateResendEmailDefault) Code() int {
	return o._statusCode
}

func (o *RegisterActivateResendEmailDefault) Error() string {
	return fmt.Sprintf("[POST /register-activate-resend-email][%d] registerActivateResendEmail default  %+v", o._statusCode, o.Payload)
}

func (o *RegisterActivateResendEmailDefault) GetPayload() *models.Error {
	return o.Payload
}

func (o *RegisterActivateResendEmailDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*RegisterActivateResendEmailBody register activate resend email body
swagger:model RegisterActivateResendEmailBody
*/
type RegisterActivateResendEmailBody struct {

	// email token
	// Required: true
	EmailToken models.JWT `json:"emailToken"`
}

// Validate validates this register activate resend email body
func (o *RegisterActivateResendEmailBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateEmailToken(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *RegisterActivateResendEmailBody) validateEmailToken(formats strfmt.Registry) error {

	if err := o.EmailToken.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("args" + "." + "emailToken")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *RegisterActivateResendEmailBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *RegisterActivateResendEmailBody) UnmarshalBinary(b []byte) error {
	var res RegisterActivateResendEmailBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
