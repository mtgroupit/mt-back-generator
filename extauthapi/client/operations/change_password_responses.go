// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/Lisss13/french-back-template/snouki-mobile/mtmb-extauthapi/models"
)

// ChangePasswordReader is a Reader for the ChangePassword structure.
type ChangePasswordReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ChangePasswordReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 204:
		result := NewChangePasswordNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		result := NewChangePasswordDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewChangePasswordNoContent creates a ChangePasswordNoContent with default headers values
func NewChangePasswordNoContent() *ChangePasswordNoContent {
	return &ChangePasswordNoContent{}
}

/*ChangePasswordNoContent handles this case with default header values.

The server successfully processed the request and is not returning any content.
*/
type ChangePasswordNoContent struct {
	/*Session token.
	 */
	SetCookie string
}

func (o *ChangePasswordNoContent) Error() string {
	return fmt.Sprintf("[POST /change-password][%d] changePasswordNoContent ", 204)
}

func (o *ChangePasswordNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header Set-Cookie
	o.SetCookie = response.GetHeader("Set-Cookie")

	return nil
}

// NewChangePasswordDefault creates a ChangePasswordDefault with default headers values
func NewChangePasswordDefault(code int) *ChangePasswordDefault {
	return &ChangePasswordDefault{
		_statusCode: code,
	}
}

/*ChangePasswordDefault handles this case with default header values.

- 422.702: password is too weak
- 403.710: invalid password

*/
type ChangePasswordDefault struct {
	_statusCode int

	Payload *models.Error
}

// Code gets the status code for the change password default response
func (o *ChangePasswordDefault) Code() int {
	return o._statusCode
}

func (o *ChangePasswordDefault) Error() string {
	return fmt.Sprintf("[POST /change-password][%d] changePassword default  %+v", o._statusCode, o.Payload)
}

func (o *ChangePasswordDefault) GetPayload() *models.Error {
	return o.Payload
}

func (o *ChangePasswordDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*ChangePasswordBody change password body
swagger:model ChangePasswordBody
*/
type ChangePasswordBody struct {

	// new password
	// Required: true
	NewPassword models.Password `json:"newPassword"`

	// old password
	OldPassword models.Password `json:"oldPassword,omitempty"`
}

// Validate validates this change password body
func (o *ChangePasswordBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateNewPassword(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateOldPassword(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ChangePasswordBody) validateNewPassword(formats strfmt.Registry) error {

	if err := o.NewPassword.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("args" + "." + "newPassword")
		}
		return err
	}

	return nil
}

func (o *ChangePasswordBody) validateOldPassword(formats strfmt.Registry) error {

	if swag.IsZero(o.OldPassword) { // not required
		return nil
	}

	if err := o.OldPassword.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("args" + "." + "oldPassword")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *ChangePasswordBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ChangePasswordBody) UnmarshalBinary(b []byte) error {
	var res ChangePasswordBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
