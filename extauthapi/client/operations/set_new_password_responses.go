// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/mtgroupit/mt-back-generator/extauthapi/models"
)

// SetNewPasswordReader is a Reader for the SetNewPassword structure.
type SetNewPasswordReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *SetNewPasswordReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 204:
		result := NewSetNewPasswordNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		result := NewSetNewPasswordDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewSetNewPasswordNoContent creates a SetNewPasswordNoContent with default headers values
func NewSetNewPasswordNoContent() *SetNewPasswordNoContent {
	return &SetNewPasswordNoContent{}
}

/*SetNewPasswordNoContent handles this case with default header values.

The server successfully processed the request and is not returning any content.
*/
type SetNewPasswordNoContent struct {
}

func (o *SetNewPasswordNoContent) Error() string {
	return fmt.Sprintf("[POST /set-new-password][%d] setNewPasswordNoContent ", 204)
}

func (o *SetNewPasswordNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewSetNewPasswordDefault creates a SetNewPasswordDefault with default headers values
func NewSetNewPasswordDefault(code int) *SetNewPasswordDefault {
	return &SetNewPasswordDefault{
		_statusCode: code,
	}
}

/*SetNewPasswordDefault handles this case with default header values.

- 404.102: organisation not found
- 422.103: password is too weak
- 403.104: invalid password reset token

*/
type SetNewPasswordDefault struct {
	_statusCode int

	Payload *models.Error
}

// Code gets the status code for the set new password default response
func (o *SetNewPasswordDefault) Code() int {
	return o._statusCode
}

func (o *SetNewPasswordDefault) Error() string {
	return fmt.Sprintf("[POST /set-new-password][%d] setNewPassword default  %+v", o._statusCode, o.Payload)
}

func (o *SetNewPasswordDefault) GetPayload() *models.Error {
	return o.Payload
}

func (o *SetNewPasswordDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*SetNewPasswordBody set new password body
swagger:model SetNewPasswordBody
*/
type SetNewPasswordBody struct {

	// password
	// Required: true
	Password models.Password `json:"password"`

	// token
	// Required: true
	Token models.ResetPassToken `json:"token"`
}

// Validate validates this set new password body
func (o *SetNewPasswordBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validatePassword(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateToken(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *SetNewPasswordBody) validatePassword(formats strfmt.Registry) error {

	if err := o.Password.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("args" + "." + "password")
		}
		return err
	}

	return nil
}

func (o *SetNewPasswordBody) validateToken(formats strfmt.Registry) error {

	if err := o.Token.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("args" + "." + "token")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *SetNewPasswordBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *SetNewPasswordBody) UnmarshalBinary(b []byte) error {
	var res SetNewPasswordBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
