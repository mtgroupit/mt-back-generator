// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new operations API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for operations API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	ChangePassword(params *ChangePasswordParams, authInfo runtime.ClientAuthInfoWriter) (*ChangePasswordNoContent, error)

	DeleteUser(params *DeleteUserParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteUserNoContent, error)

	GetUserProfile(params *GetUserProfileParams, authInfo runtime.ClientAuthInfoWriter) (*GetUserProfileOK, error)

	GetUserProfileByID(params *GetUserProfileByIDParams) (*GetUserProfileByIDOK, error)

	IsEmailAvailable(params *IsEmailAvailableParams) (*IsEmailAvailableOK, error)

	IsUsernameAvailable(params *IsUsernameAvailableParams, authInfo runtime.ClientAuthInfoWriter) (*IsUsernameAvailableOK, error)

	Login(params *LoginParams) (*LoginNoContent, error)

	Logout(params *LogoutParams, authInfo runtime.ClientAuthInfoWriter) (*LogoutNoContent, error)

	Register(params *RegisterParams) (*RegisterOK, error)

	RegisterLoginOAuth(params *RegisterLoginOAuthParams) (*RegisterLoginOAuthOK, error)

	ResetPassword(params *ResetPasswordParams) (*ResetPasswordNoContent, error)

	SearchUsersByUsername(params *SearchUsersByUsernameParams, authInfo runtime.ClientAuthInfoWriter) (*SearchUsersByUsernameOK, error)

	SetBlocked(params *SetBlockedParams, authInfo runtime.ClientAuthInfoWriter) (*SetBlockedNoContent, error)

	SetEmail(params *SetEmailParams) (*SetEmailNoContent, error)

	SetNewPassword(params *SetNewPasswordParams) (*SetNewPasswordNoContent, error)

	SetPersDataRegion(params *SetPersDataRegionParams, authInfo runtime.ClientAuthInfoWriter) (*SetPersDataRegionOK, error)

	SetUsername(params *SetUsernameParams, authInfo runtime.ClientAuthInfoWriter) (*SetUsernameNoContent, error)

	ValidateNewEmail(params *ValidateNewEmailParams, authInfo runtime.ClientAuthInfoWriter) (*ValidateNewEmailNoContent, error)

	ValidateRegistrationEmail(params *ValidateRegistrationEmailParams) (*ValidateRegistrationEmailNoContent, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  ChangePassword Change user password and expire all user sessions including current one.
*/
func (a *Client) ChangePassword(params *ChangePasswordParams, authInfo runtime.ClientAuthInfoWriter) (*ChangePasswordNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewChangePasswordParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "changePassword",
		Method:             "POST",
		PathPattern:        "/change-password",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ChangePasswordReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ChangePasswordNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ChangePasswordDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  DeleteUser Removes user account and expire all user sessions including current one.
*/
func (a *Client) DeleteUser(params *DeleteUserParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteUserNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteUserParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteUser",
		Method:             "POST",
		PathPattern:        "/delete-user",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteUserReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteUserNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeleteUserDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  GetUserProfile Get user profile.
*/
func (a *Client) GetUserProfile(params *GetUserProfileParams, authInfo runtime.ClientAuthInfoWriter) (*GetUserProfileOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetUserProfileParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getUserProfile",
		Method:             "POST",
		PathPattern:        "/get-user-profile",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetUserProfileReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetUserProfileOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetUserProfileDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  GetUserProfileByID Get public part of other user's profile by ID.
*/
func (a *Client) GetUserProfileByID(params *GetUserProfileByIDParams) (*GetUserProfileByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetUserProfileByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getUserProfileByID",
		Method:             "POST",
		PathPattern:        "/get-user-profile-by-id",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetUserProfileByIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetUserProfileByIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetUserProfileByIDDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  IsEmailAvailable Checks is email is available.
*/
func (a *Client) IsEmailAvailable(params *IsEmailAvailableParams) (*IsEmailAvailableOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewIsEmailAvailableParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "isEmailAvailable",
		Method:             "POST",
		PathPattern:        "/is-email-available",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &IsEmailAvailableReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*IsEmailAvailableOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*IsEmailAvailableDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  IsUsernameAvailable Checks is username available.
*/
func (a *Client) IsUsernameAvailable(params *IsUsernameAvailableParams, authInfo runtime.ClientAuthInfoWriter) (*IsUsernameAvailableOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewIsUsernameAvailableParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "isUsernameAvailable",
		Method:             "POST",
		PathPattern:        "/is-username-available",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &IsUsernameAvailableReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*IsUsernameAvailableOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*IsUsernameAvailableDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  Login Sign in user.
*/
func (a *Client) Login(params *LoginParams) (*LoginNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLoginParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "login",
		Method:             "POST",
		PathPattern:        "/login",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &LoginReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*LoginNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*LoginDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  Logout Sign out user.
*/
func (a *Client) Logout(params *LogoutParams, authInfo runtime.ClientAuthInfoWriter) (*LogoutNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLogoutParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "logout",
		Method:             "POST",
		PathPattern:        "/logout",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &LogoutReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*LogoutNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*LogoutDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  Register Register new user by validated email.
*/
func (a *Client) Register(params *RegisterParams) (*RegisterOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRegisterParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "register",
		Method:             "POST",
		PathPattern:        "/register",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &RegisterReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RegisterOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*RegisterDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  RegisterLoginOAuth register login o auth API
*/
func (a *Client) RegisterLoginOAuth(params *RegisterLoginOAuthParams) (*RegisterLoginOAuthOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRegisterLoginOAuthParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "registerLoginOAuth",
		Method:             "POST",
		PathPattern:        "/register-login-oauth",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &RegisterLoginOAuthReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RegisterLoginOAuthOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*RegisterLoginOAuthDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  ResetPassword Request password reset by  email.
*/
func (a *Client) ResetPassword(params *ResetPasswordParams) (*ResetPasswordNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewResetPasswordParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "resetPassword",
		Method:             "POST",
		PathPattern:        "/reset-password",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ResetPasswordReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ResetPasswordNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ResetPasswordDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  SearchUsersByUsername Get public part of up to 10 other user's profiles by username prefix. Ordered by username. Require exact match if username length is less than 4.

*/
func (a *Client) SearchUsersByUsername(params *SearchUsersByUsernameParams, authInfo runtime.ClientAuthInfoWriter) (*SearchUsersByUsernameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSearchUsersByUsernameParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "searchUsersByUsername",
		Method:             "POST",
		PathPattern:        "/search-users-by-username",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SearchUsersByUsernameReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SearchUsersByUsernameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*SearchUsersByUsernameDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  SetBlocked Let admin block/unblock all access to API for a user.
*/
func (a *Client) SetBlocked(params *SetBlockedParams, authInfo runtime.ClientAuthInfoWriter) (*SetBlockedNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSetBlockedParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "setBlocked",
		Method:             "POST",
		PathPattern:        "/set-blocked",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SetBlockedReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SetBlockedNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*SetBlockedDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  SetEmail Set new email.
*/
func (a *Client) SetEmail(params *SetEmailParams) (*SetEmailNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSetEmailParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "setEmail",
		Method:             "POST",
		PathPattern:        "/set-email",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SetEmailReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SetEmailNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*SetEmailDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  SetNewPassword Change user password using reset password token and expire all user sessions.
*/
func (a *Client) SetNewPassword(params *SetNewPasswordParams) (*SetNewPasswordNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSetNewPasswordParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "setNewPassword",
		Method:             "POST",
		PathPattern:        "/set-new-password",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SetNewPasswordReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SetNewPasswordNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*SetNewPasswordDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  SetPersDataRegion After calling this method client should save user's personal data on returned persdata service.
*/
func (a *Client) SetPersDataRegion(params *SetPersDataRegionParams, authInfo runtime.ClientAuthInfoWriter) (*SetPersDataRegionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSetPersDataRegionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "setPersDataRegion",
		Method:             "POST",
		PathPattern:        "/set-persdata-region",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SetPersDataRegionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SetPersDataRegionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*SetPersDataRegionDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  SetUsername Set user username.
*/
func (a *Client) SetUsername(params *SetUsernameParams, authInfo runtime.ClientAuthInfoWriter) (*SetUsernameNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSetUsernameParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "setUsername",
		Method:             "POST",
		PathPattern:        "/set-username",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SetUsernameReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SetUsernameNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*SetUsernameDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  ValidateNewEmail Request user email change.
*/
func (a *Client) ValidateNewEmail(params *ValidateNewEmailParams, authInfo runtime.ClientAuthInfoWriter) (*ValidateNewEmailNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewValidateNewEmailParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "validateNewEmail",
		Method:             "POST",
		PathPattern:        "/validate-new-email",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ValidateNewEmailReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ValidateNewEmailNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ValidateNewEmailDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  ValidateRegistrationEmail Sends email with validation token.
*/
func (a *Client) ValidateRegistrationEmail(params *ValidateRegistrationEmailParams) (*ValidateRegistrationEmailNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewValidateRegistrationEmailParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "validateRegistrationEmail",
		Method:             "POST",
		PathPattern:        "/validate-registration-email",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ValidateRegistrationEmailReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ValidateRegistrationEmailNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ValidateRegistrationEmailDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
