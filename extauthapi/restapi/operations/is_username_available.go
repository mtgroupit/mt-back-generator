// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	"github.com/mtgroupit/mt-back-generator/extauthapi/models"
)

// IsUsernameAvailableHandlerFunc turns a function with the right signature into a is username available handler
type IsUsernameAvailableHandlerFunc func(IsUsernameAvailableParams, interface{}) middleware.Responder

// Handle executing the request and returning a response
func (fn IsUsernameAvailableHandlerFunc) Handle(params IsUsernameAvailableParams, principal interface{}) middleware.Responder {
	return fn(params, principal)
}

// IsUsernameAvailableHandler interface for that can handle valid is username available params
type IsUsernameAvailableHandler interface {
	Handle(IsUsernameAvailableParams, interface{}) middleware.Responder
}

// NewIsUsernameAvailable creates a new http.Handler for the is username available operation
func NewIsUsernameAvailable(ctx *middleware.Context, handler IsUsernameAvailableHandler) *IsUsernameAvailable {
	return &IsUsernameAvailable{Context: ctx, Handler: handler}
}

/*IsUsernameAvailable swagger:route POST /is-username-available isUsernameAvailable

Checks is username available.

*/
type IsUsernameAvailable struct {
	Context *middleware.Context
	Handler IsUsernameAvailableHandler
}

func (o *IsUsernameAvailable) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewIsUsernameAvailableParams()

	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		r = aCtx
	}
	var principal interface{}
	if uprinc != nil {
		principal = uprinc
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

// IsUsernameAvailableBody is username available body
//
// swagger:model IsUsernameAvailableBody
type IsUsernameAvailableBody struct {

	// username
	// Required: true
	Username models.Username `json:"username"`
}

// Validate validates this is username available body
func (o *IsUsernameAvailableBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateUsername(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *IsUsernameAvailableBody) validateUsername(formats strfmt.Registry) error {

	if err := o.Username.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("args" + "." + "username")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *IsUsernameAvailableBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *IsUsernameAvailableBody) UnmarshalBinary(b []byte) error {
	var res IsUsernameAvailableBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// IsUsernameAvailableOKBody is username available o k body
//
// swagger:model IsUsernameAvailableOKBody
type IsUsernameAvailableOKBody struct {

	// True if username is available.
	// Required: true
	Available *bool `json:"available"`
}

// Validate validates this is username available o k body
func (o *IsUsernameAvailableOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAvailable(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *IsUsernameAvailableOKBody) validateAvailable(formats strfmt.Registry) error {

	if err := validate.Required("isUsernameAvailableOK"+"."+"available", "body", o.Available); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *IsUsernameAvailableOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *IsUsernameAvailableOKBody) UnmarshalBinary(b []byte) error {
	var res IsUsernameAvailableOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
