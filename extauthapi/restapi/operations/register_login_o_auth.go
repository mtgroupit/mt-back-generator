// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/Lisss13/french-back-template/snouki-mobile/mtmb-extauthapi/models"
)

// RegisterLoginOAuthHandlerFunc turns a function with the right signature into a register login o auth handler
type RegisterLoginOAuthHandlerFunc func(RegisterLoginOAuthParams) middleware.Responder

// Handle executing the request and returning a response
func (fn RegisterLoginOAuthHandlerFunc) Handle(params RegisterLoginOAuthParams) middleware.Responder {
	return fn(params)
}

// RegisterLoginOAuthHandler interface for that can handle valid register login o auth params
type RegisterLoginOAuthHandler interface {
	Handle(RegisterLoginOAuthParams) middleware.Responder
}

// NewRegisterLoginOAuth creates a new http.Handler for the register login o auth operation
func NewRegisterLoginOAuth(ctx *middleware.Context, handler RegisterLoginOAuthHandler) *RegisterLoginOAuth {
	return &RegisterLoginOAuth{Context: ctx, Handler: handler}
}

/*RegisterLoginOAuth swagger:route POST /register-login-oauth registerLoginOAuth

RegisterLoginOAuth register login o auth API

*/
type RegisterLoginOAuth struct {
	Context *middleware.Context
	Handler RegisterLoginOAuthHandler
}

func (o *RegisterLoginOAuth) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewRegisterLoginOAuthParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

// RegisterLoginOAuthBody register login o auth body
//
// swagger:model RegisterLoginOAuthBody
type RegisterLoginOAuthBody struct {

	// code
	// Required: true
	Code models.OAuthCode `json:"code"`

	// recv state
	// Required: true
	RecvState models.OAuthState `json:"recvState"`

	// sent state
	// Required: true
	SentState models.OAuthState `json:"sentState"`

	// server
	// Required: true
	Server models.OAuthServer `json:"server"`
}

// Validate validates this register login o auth body
func (o *RegisterLoginOAuthBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateCode(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateRecvState(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSentState(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateServer(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *RegisterLoginOAuthBody) validateCode(formats strfmt.Registry) error {

	if err := o.Code.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("args" + "." + "code")
		}
		return err
	}

	return nil
}

func (o *RegisterLoginOAuthBody) validateRecvState(formats strfmt.Registry) error {

	if err := o.RecvState.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("args" + "." + "recvState")
		}
		return err
	}

	return nil
}

func (o *RegisterLoginOAuthBody) validateSentState(formats strfmt.Registry) error {

	if err := o.SentState.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("args" + "." + "sentState")
		}
		return err
	}

	return nil
}

func (o *RegisterLoginOAuthBody) validateServer(formats strfmt.Registry) error {

	if err := o.Server.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("args" + "." + "server")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *RegisterLoginOAuthBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *RegisterLoginOAuthBody) UnmarshalBinary(b []byte) error {
	var res RegisterLoginOAuthBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// RegisterLoginOAuthOKBody register login o auth o k body
//
// swagger:model RegisterLoginOAuthOKBody
type RegisterLoginOAuthOKBody struct {

	// user ID
	// Required: true
	// Format: uuid4
	UserID models.UserID `json:"userID"`
}

// Validate validates this register login o auth o k body
func (o *RegisterLoginOAuthOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateUserID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *RegisterLoginOAuthOKBody) validateUserID(formats strfmt.Registry) error {

	if err := o.UserID.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("registerLoginOAuthOK" + "." + "userID")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *RegisterLoginOAuthOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *RegisterLoginOAuthOKBody) UnmarshalBinary(b []byte) error {
	var res RegisterLoginOAuthOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
