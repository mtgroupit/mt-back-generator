// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/Lisss13/french-back-template/snouki-mobile/mtmb-extauthapi/models"
)

// SetNewPasswordHandlerFunc turns a function with the right signature into a set new password handler
type SetNewPasswordHandlerFunc func(SetNewPasswordParams) middleware.Responder

// Handle executing the request and returning a response
func (fn SetNewPasswordHandlerFunc) Handle(params SetNewPasswordParams) middleware.Responder {
	return fn(params)
}

// SetNewPasswordHandler interface for that can handle valid set new password params
type SetNewPasswordHandler interface {
	Handle(SetNewPasswordParams) middleware.Responder
}

// NewSetNewPassword creates a new http.Handler for the set new password operation
func NewSetNewPassword(ctx *middleware.Context, handler SetNewPasswordHandler) *SetNewPassword {
	return &SetNewPassword{Context: ctx, Handler: handler}
}

/*SetNewPassword swagger:route POST /set-new-password setNewPassword

Change user password using reset password token and expire all user sessions.

*/
type SetNewPassword struct {
	Context *middleware.Context
	Handler SetNewPasswordHandler
}

func (o *SetNewPassword) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewSetNewPasswordParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

// SetNewPasswordBody set new password body
//
// swagger:model SetNewPasswordBody
type SetNewPasswordBody struct {

	// password
	// Required: true
	Password models.Password `json:"password"`

	// token
	// Required: true
	Token models.ResetPassToken `json:"token"`
}

// Validate validates this set new password body
func (o *SetNewPasswordBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validatePassword(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateToken(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *SetNewPasswordBody) validatePassword(formats strfmt.Registry) error {

	if err := o.Password.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("args" + "." + "password")
		}
		return err
	}

	return nil
}

func (o *SetNewPasswordBody) validateToken(formats strfmt.Registry) error {

	if err := o.Token.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("args" + "." + "token")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *SetNewPasswordBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *SetNewPasswordBody) UnmarshalBinary(b []byte) error {
	var res SetNewPasswordBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
