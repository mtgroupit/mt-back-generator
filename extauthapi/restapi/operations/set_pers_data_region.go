// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/Lisss13/french-back-template/snouki-mobile/mtmb-extauthapi/models"
)

// SetPersDataRegionHandlerFunc turns a function with the right signature into a set pers data region handler
type SetPersDataRegionHandlerFunc func(SetPersDataRegionParams, interface{}) middleware.Responder

// Handle executing the request and returning a response
func (fn SetPersDataRegionHandlerFunc) Handle(params SetPersDataRegionParams, principal interface{}) middleware.Responder {
	return fn(params, principal)
}

// SetPersDataRegionHandler interface for that can handle valid set pers data region params
type SetPersDataRegionHandler interface {
	Handle(SetPersDataRegionParams, interface{}) middleware.Responder
}

// NewSetPersDataRegion creates a new http.Handler for the set pers data region operation
func NewSetPersDataRegion(ctx *middleware.Context, handler SetPersDataRegionHandler) *SetPersDataRegion {
	return &SetPersDataRegion{Context: ctx, Handler: handler}
}

/*SetPersDataRegion swagger:route POST /set-persdata-region setPersDataRegion

After calling this method client should save user's personal data on returned persdata service.

*/
type SetPersDataRegion struct {
	Context *middleware.Context
	Handler SetPersDataRegionHandler
}

func (o *SetPersDataRegion) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewSetPersDataRegionParams()

	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		r = aCtx
	}
	var principal interface{}
	if uprinc != nil {
		principal = uprinc
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

// SetPersDataRegionBody set pers data region body
//
// swagger:model SetPersDataRegionBody
type SetPersDataRegionBody struct {

	// country code
	// Required: true
	CountryCode models.CountryCode `json:"countryCode"`
}

// Validate validates this set pers data region body
func (o *SetPersDataRegionBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateCountryCode(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *SetPersDataRegionBody) validateCountryCode(formats strfmt.Registry) error {

	if err := o.CountryCode.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("args" + "." + "countryCode")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *SetPersDataRegionBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *SetPersDataRegionBody) UnmarshalBinary(b []byte) error {
	var res SetPersDataRegionBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// SetPersDataRegionOKBody set pers data region o k body
//
// swagger:model SetPersDataRegionOKBody
type SetPersDataRegionOKBody struct {

	// persdata endpoint
	// Required: true
	// Format: uri
	PersdataEndpoint models.Endpoint `json:"persdataEndpoint"`
}

// Validate validates this set pers data region o k body
func (o *SetPersDataRegionOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validatePersdataEndpoint(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *SetPersDataRegionOKBody) validatePersdataEndpoint(formats strfmt.Registry) error {

	if err := o.PersdataEndpoint.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("setPersDataRegionOK" + "." + "persdataEndpoint")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *SetPersDataRegionOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *SetPersDataRegionOKBody) UnmarshalBinary(b []byte) error {
	var res SetPersDataRegionOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
