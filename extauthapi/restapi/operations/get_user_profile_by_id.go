// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/mtgroupit/mt-back-generator/extauthapi/models"
)

// GetUserProfileByIDHandlerFunc turns a function with the right signature into a get user profile by ID handler
type GetUserProfileByIDHandlerFunc func(GetUserProfileByIDParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetUserProfileByIDHandlerFunc) Handle(params GetUserProfileByIDParams) middleware.Responder {
	return fn(params)
}

// GetUserProfileByIDHandler interface for that can handle valid get user profile by ID params
type GetUserProfileByIDHandler interface {
	Handle(GetUserProfileByIDParams) middleware.Responder
}

// NewGetUserProfileByID creates a new http.Handler for the get user profile by ID operation
func NewGetUserProfileByID(ctx *middleware.Context, handler GetUserProfileByIDHandler) *GetUserProfileByID {
	return &GetUserProfileByID{Context: ctx, Handler: handler}
}

/*GetUserProfileByID swagger:route POST /get-user-profile-by-id getUserProfileById

Get public part of other user's profile by ID.

*/
type GetUserProfileByID struct {
	Context *middleware.Context
	Handler GetUserProfileByIDHandler
}

func (o *GetUserProfileByID) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewGetUserProfileByIDParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

// GetUserProfileByIDBody get user profile by ID body
//
// swagger:model GetUserProfileByIDBody
type GetUserProfileByIDBody struct {

	// id
	// Required: true
	// Format: uuid4
	ID models.UserID `json:"id"`
}

// Validate validates this get user profile by ID body
func (o *GetUserProfileByIDBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetUserProfileByIDBody) validateID(formats strfmt.Registry) error {

	if err := o.ID.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("args" + "." + "id")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetUserProfileByIDBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetUserProfileByIDBody) UnmarshalBinary(b []byte) error {
	var res GetUserProfileByIDBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
