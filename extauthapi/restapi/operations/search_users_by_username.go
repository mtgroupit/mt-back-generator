// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	"github.com/mtgroupit/mt-back-generator/extauthapi/models"
)

// SearchUsersByUsernameHandlerFunc turns a function with the right signature into a search users by username handler
type SearchUsersByUsernameHandlerFunc func(SearchUsersByUsernameParams, interface{}) middleware.Responder

// Handle executing the request and returning a response
func (fn SearchUsersByUsernameHandlerFunc) Handle(params SearchUsersByUsernameParams, principal interface{}) middleware.Responder {
	return fn(params, principal)
}

// SearchUsersByUsernameHandler interface for that can handle valid search users by username params
type SearchUsersByUsernameHandler interface {
	Handle(SearchUsersByUsernameParams, interface{}) middleware.Responder
}

// NewSearchUsersByUsername creates a new http.Handler for the search users by username operation
func NewSearchUsersByUsername(ctx *middleware.Context, handler SearchUsersByUsernameHandler) *SearchUsersByUsername {
	return &SearchUsersByUsername{Context: ctx, Handler: handler}
}

/*SearchUsersByUsername swagger:route POST /search-users-by-username searchUsersByUsername

Get public part of up to 10 other user's profiles by username prefix. Ordered by username. Require exact match if username length is less than 4.


*/
type SearchUsersByUsername struct {
	Context *middleware.Context
	Handler SearchUsersByUsernameHandler
}

func (o *SearchUsersByUsername) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewSearchUsersByUsernameParams()

	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		r = aCtx
	}
	var principal interface{}
	if uprinc != nil {
		principal = uprinc
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

// SearchUsersByUsernameBody search users by username body
//
// swagger:model SearchUsersByUsernameBody
type SearchUsersByUsernameBody struct {

	// username
	// Required: true
	Username models.Username `json:"username"`
}

// Validate validates this search users by username body
func (o *SearchUsersByUsernameBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateUsername(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *SearchUsersByUsernameBody) validateUsername(formats strfmt.Registry) error {

	if err := o.Username.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("args" + "." + "username")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *SearchUsersByUsernameBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *SearchUsersByUsernameBody) UnmarshalBinary(b []byte) error {
	var res SearchUsersByUsernameBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// SearchUsersByUsernameOKBody search users by username o k body
//
// swagger:model SearchUsersByUsernameOKBody
type SearchUsersByUsernameOKBody struct {

	// profiles
	// Required: true
	// Max Items: 10
	// Min Items: 0
	Profiles []*models.Profile `json:"profiles"`
}

// Validate validates this search users by username o k body
func (o *SearchUsersByUsernameOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateProfiles(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *SearchUsersByUsernameOKBody) validateProfiles(formats strfmt.Registry) error {

	if err := validate.Required("searchUsersByUsernameOK"+"."+"profiles", "body", o.Profiles); err != nil {
		return err
	}

	iProfilesSize := int64(len(o.Profiles))

	if err := validate.MinItems("searchUsersByUsernameOK"+"."+"profiles", "body", iProfilesSize, 0); err != nil {
		return err
	}

	if err := validate.MaxItems("searchUsersByUsernameOK"+"."+"profiles", "body", iProfilesSize, 10); err != nil {
		return err
	}

	for i := 0; i < len(o.Profiles); i++ {
		if swag.IsZero(o.Profiles[i]) { // not required
			continue
		}

		if o.Profiles[i] != nil {
			if err := o.Profiles[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("searchUsersByUsernameOK" + "." + "profiles" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *SearchUsersByUsernameOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *SearchUsersByUsernameOKBody) UnmarshalBinary(b []byte) error {
	var res SearchUsersByUsernameOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
