// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/mtgroupit/mt-back-generator/extauthapi/models"
)

// SetEmailHandlerFunc turns a function with the right signature into a set email handler
type SetEmailHandlerFunc func(SetEmailParams) middleware.Responder

// Handle executing the request and returning a response
func (fn SetEmailHandlerFunc) Handle(params SetEmailParams) middleware.Responder {
	return fn(params)
}

// SetEmailHandler interface for that can handle valid set email params
type SetEmailHandler interface {
	Handle(SetEmailParams) middleware.Responder
}

// NewSetEmail creates a new http.Handler for the set email operation
func NewSetEmail(ctx *middleware.Context, handler SetEmailHandler) *SetEmail {
	return &SetEmail{Context: ctx, Handler: handler}
}

/*SetEmail swagger:route POST /set-email setEmail

Set new email.

*/
type SetEmail struct {
	Context *middleware.Context
	Handler SetEmailHandler
}

func (o *SetEmail) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewSetEmailParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

// SetEmailBody set email body
//
// swagger:model SetEmailBody
type SetEmailBody struct {

	// email token
	// Required: true
	EmailToken models.JWT `json:"emailToken"`
}

// Validate validates this set email body
func (o *SetEmailBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateEmailToken(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *SetEmailBody) validateEmailToken(formats strfmt.Registry) error {

	if err := o.EmailToken.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("args" + "." + "emailToken")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *SetEmailBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *SetEmailBody) UnmarshalBinary(b []byte) error {
	var res SetEmailBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
