// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	"github.com/Lisss13/french-back-template/snouki-mobile/mtmb-extauthapi/models"
)

// SetBlockedHandlerFunc turns a function with the right signature into a set blocked handler
type SetBlockedHandlerFunc func(SetBlockedParams, interface{}) middleware.Responder

// Handle executing the request and returning a response
func (fn SetBlockedHandlerFunc) Handle(params SetBlockedParams, principal interface{}) middleware.Responder {
	return fn(params, principal)
}

// SetBlockedHandler interface for that can handle valid set blocked params
type SetBlockedHandler interface {
	Handle(SetBlockedParams, interface{}) middleware.Responder
}

// NewSetBlocked creates a new http.Handler for the set blocked operation
func NewSetBlocked(ctx *middleware.Context, handler SetBlockedHandler) *SetBlocked {
	return &SetBlocked{Context: ctx, Handler: handler}
}

/*SetBlocked swagger:route POST /set-blocked setBlocked

Let admin block/unblock all access to API for a user.

*/
type SetBlocked struct {
	Context *middleware.Context
	Handler SetBlockedHandler
}

func (o *SetBlocked) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewSetBlockedParams()

	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		r = aCtx
	}
	var principal interface{}
	if uprinc != nil {
		principal = uprinc
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

// SetBlockedBody set blocked body
//
// swagger:model SetBlockedBody
type SetBlockedBody struct {

	// True to block user, False to unblock.
	// Required: true
	Blocked *bool `json:"blocked"`

	// id
	// Required: true
	// Format: uuid4
	ID models.UserID `json:"id"`
}

// Validate validates this set blocked body
func (o *SetBlockedBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateBlocked(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *SetBlockedBody) validateBlocked(formats strfmt.Registry) error {

	if err := validate.Required("args"+"."+"blocked", "body", o.Blocked); err != nil {
		return err
	}

	return nil
}

func (o *SetBlockedBody) validateID(formats strfmt.Registry) error {

	if err := o.ID.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("args" + "." + "id")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *SetBlockedBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *SetBlockedBody) UnmarshalBinary(b []byte) error {
	var res SetBlockedBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
