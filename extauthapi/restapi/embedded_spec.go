// Code generated by go-swagger; DO NOT EDIT.

package restapi

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
)

var (
	// SwaggerJSON embedded version of the swagger document used at generation time
	SwaggerJSON json.RawMessage
	// FlatSwaggerJSON embedded flattened version of the swagger document used at generation time
	FlatSwaggerJSON json.RawMessage
)

func init() {
	SwaggerJSON = json.RawMessage([]byte(`{
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "schemes": [
    "http"
  ],
  "swagger": "2.0",
  "info": {
    "description": "## List of all custom errors\nFirst number is HTTP Status code, second is value of \"code\" field in returned JSON object, text description may or may not match \"message\" field in returned JSON object.\n- 404.101: invalid credentials\n",
    "title": "Authentication",
    "version": "1.0.0"
  },
  "basePath": "/api/v1/",
  "paths": {
    "/change-password": {
      "post": {
        "description": "Change user password and expire all user sessions including current one.",
        "operationId": "changePassword",
        "parameters": [
          {
            "name": "args",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "newPassword"
              ],
              "properties": {
                "newPassword": {
                  "$ref": "#/definitions/Password"
                },
                "oldPassword": {
                  "$ref": "#/definitions/Password"
                }
              }
            }
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/responses/NoContentWithAuth"
          },
          "default": {
            "description": "- 404.2004: password is too weak\n- 403.710: invalid password\n",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/delete-user": {
      "post": {
        "description": "Removes user account and expire all user sessions including current one.",
        "operationId": "deleteUser",
        "parameters": [
          {
            "name": "args",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "password"
              ],
              "properties": {
                "password": {
                  "$ref": "#/definitions/Password"
                }
              }
            }
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/responses/NoContentWithAuth"
          },
          "default": {
            "description": "- 403.710: invalid password\n",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/get-user-profile": {
      "post": {
        "security": [
          {
            "cookieKey": []
          },
          {
            "cookieKey": [],
            "csrfToken": []
          },
          {}
        ],
        "description": "Get user profile.",
        "operationId": "getUserProfile",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Profile"
            }
          },
          "default": {
            "$ref": "#/responses/GenericError"
          }
        }
      }
    },
    "/get-user-profile-by-id": {
      "post": {
        "security": [],
        "description": "Get public part of other user's profile by ID.",
        "operationId": "getUserProfileByID",
        "parameters": [
          {
            "name": "args",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "id"
              ],
              "properties": {
                "id": {
                  "$ref": "#/definitions/UserID"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Profile"
            }
          },
          "default": {
            "$ref": "#/responses/GenericError"
          }
        }
      }
    },
    "/is-email-available": {
      "post": {
        "security": [],
        "description": "Checks is email is available.",
        "operationId": "isEmailAvailable",
        "parameters": [
          {
            "name": "args",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "email"
              ],
              "properties": {
                "email": {
                  "$ref": "#/definitions/Email"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "required": [
                "available"
              ],
              "properties": {
                "available": {
                  "description": "True if email is available.",
                  "type": "boolean"
                }
              }
            }
          },
          "default": {
            "$ref": "#/responses/GenericError"
          }
        }
      }
    },
    "/is-username-available": {
      "post": {
        "description": "Checks is username available.",
        "operationId": "isUsernameAvailable",
        "parameters": [
          {
            "name": "args",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "username"
              ],
              "properties": {
                "username": {
                  "$ref": "#/definitions/Username"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "required": [
                "available"
              ],
              "properties": {
                "available": {
                  "description": "True if username is available.",
                  "type": "boolean"
                }
              }
            }
          },
          "default": {
            "$ref": "#/responses/GenericError"
          }
        }
      }
    },
    "/login": {
      "post": {
        "security": [],
        "description": "Sign in user.",
        "operationId": "login",
        "parameters": [
          {
            "name": "args",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "email",
                "password"
              ],
              "properties": {
                "email": {
                  "$ref": "#/definitions/Email"
                },
                "password": {
                  "$ref": "#/definitions/Password"
                }
              }
            }
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/responses/NoContentWithAuth"
          },
          "default": {
            "description": "- 404.101: invalid credentials\n- 404.707: no such email\n",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/logout": {
      "post": {
        "description": "Sign out user.",
        "operationId": "logout",
        "responses": {
          "204": {
            "$ref": "#/responses/NoContentWithAuth"
          },
          "default": {
            "$ref": "#/responses/GenericError"
          }
        }
      }
    },
    "/register-activate": {
      "post": {
        "security": [],
        "description": "Register new user by validated email.",
        "operationId": "register",
        "parameters": [
          {
            "name": "args",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "emailToken"
              ],
              "properties": {
                "emailToken": {
                  "$ref": "#/definitions/JWT"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "required": [
                "userID"
              ],
              "properties": {
                "userID": {
                  "$ref": "#/definitions/UserID"
                }
              }
            },
            "headers": {
              "Set-Cookie": {
                "type": "string",
                "description": "Session token."
              }
            }
          },
          "default": {
            "description": "- 404.2003: email is not available\n- 404.2001: invalid email validation token\n",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/register-activate-resend-email": {
      "post": {
        "security": [],
        "description": "Resend new email if old token is not valid.",
        "operationId": "registerActivateResendEmail",
        "parameters": [
          {
            "name": "args",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "emailToken"
              ],
              "properties": {
                "emailToken": {
                  "$ref": "#/definitions/JWT"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "default": {
            "description": "- 404.2001: invalid email validation token\n",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/request-registration": {
      "post": {
        "security": [],
        "description": "Sends email with validation token.",
        "operationId": "requestRegistration",
        "parameters": [
          {
            "name": "args",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "email",
                "password"
              ],
              "properties": {
                "email": {
                  "$ref": "#/definitions/Email"
                },
                "language": {
                  "$ref": "#/definitions/Language"
                },
                "password": {
                  "$ref": "#/definitions/Password"
                }
              }
            }
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/responses/NoContent"
          },
          "default": {
            "description": "- 404.2003: email is not available\n- 404.2004: password is too weak\n",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/reset-password": {
      "post": {
        "security": [],
        "description": "Request password reset by  email.",
        "operationId": "resetPassword",
        "parameters": [
          {
            "name": "args",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "email"
              ],
              "properties": {
                "email": {
                  "$ref": "#/definitions/Email"
                }
              }
            }
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/responses/NoContent"
          },
          "default": {
            "description": "- 404.101: invalid credentials\n- 404.707: no such email\n",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/search-users-by-username": {
      "post": {
        "description": "Get public part of up to 10 other user's profiles by username prefix. Ordered by username. Require exact match if username length is less than 4.\n",
        "operationId": "searchUsersByUsername",
        "parameters": [
          {
            "name": "args",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "username"
              ],
              "properties": {
                "username": {
                  "$ref": "#/definitions/Username"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "required": [
                "profiles"
              ],
              "properties": {
                "profiles": {
                  "type": "array",
                  "maxItems": 10,
                  "items": {
                    "$ref": "#/definitions/Profile"
                  }
                }
              }
            }
          },
          "default": {
            "$ref": "#/responses/GenericError"
          }
        }
      }
    },
    "/set-blocked": {
      "post": {
        "description": "Let admin block/unblock all access to API for a user.",
        "operationId": "setBlocked",
        "parameters": [
          {
            "name": "args",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "id",
                "blocked"
              ],
              "properties": {
                "blocked": {
                  "description": "True to block user, False to unblock.",
                  "type": "boolean"
                },
                "id": {
                  "$ref": "#/definitions/UserID"
                }
              }
            }
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/responses/NoContent"
          },
          "default": {
            "$ref": "#/responses/GenericError"
          }
        }
      }
    },
    "/set-email": {
      "post": {
        "security": [],
        "description": "Set new email.",
        "operationId": "setEmail",
        "parameters": [
          {
            "name": "args",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "emailToken"
              ],
              "properties": {
                "emailToken": {
                  "$ref": "#/definitions/JWT"
                }
              }
            }
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/responses/NoContent"
          },
          "default": {
            "description": "- 404.2003: email is not available\n- 404.2001: invalid email validation token\n",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/set-new-password": {
      "post": {
        "security": [],
        "description": "Change user password using reset password token and expire all user sessions.",
        "operationId": "setNewPassword",
        "parameters": [
          {
            "name": "args",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "token",
                "password"
              ],
              "properties": {
                "password": {
                  "$ref": "#/definitions/Password"
                },
                "token": {
                  "$ref": "#/definitions/ResetPassToken"
                }
              }
            }
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/responses/NoContent"
          },
          "default": {
            "description": "- 404.2004: password is too weak\n- 404.2005: invalid password reset token\n",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/set-persdata-region": {
      "post": {
        "description": "After calling this method client should save user's personal data on returned persdata service.",
        "operationId": "setPersDataRegion",
        "parameters": [
          {
            "name": "args",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "countryCode"
              ],
              "properties": {
                "countryCode": {
                  "$ref": "#/definitions/CountryCode"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "required": [
                "persdataEndpoint"
              ],
              "properties": {
                "persdataEndpoint": {
                  "$ref": "#/definitions/Endpoint"
                }
              }
            }
          },
          "default": {
            "$ref": "#/responses/GenericError"
          }
        }
      }
    },
    "/set-username": {
      "post": {
        "description": "Set user username.",
        "operationId": "setUsername",
        "parameters": [
          {
            "name": "args",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "username"
              ],
              "properties": {
                "username": {
                  "$ref": "#/definitions/Username"
                }
              }
            }
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/responses/NoContent"
          },
          "default": {
            "description": "- 409.701: username is not available\n",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/validate-new-email": {
      "post": {
        "description": "Request user email change.",
        "operationId": "validateNewEmail",
        "parameters": [
          {
            "name": "args",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "email",
                "password"
              ],
              "properties": {
                "email": {
                  "$ref": "#/definitions/Email"
                },
                "password": {
                  "$ref": "#/definitions/Password"
                }
              }
            }
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/responses/NoContent"
          },
          "default": {
            "description": "- 404.2003: email is not available\n- 403.710: invalid password\n",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "CountryCode": {
      "description": "Country code (ISO 3166-1 alpha-2).",
      "type": "string",
      "maxLength": 2,
      "minLength": 2,
      "enum": [
        "AD",
        "AE",
        "AF",
        "AG",
        "AI",
        "AL",
        "AM",
        "AO",
        "AQ",
        "AR",
        "AS",
        "AT",
        "AU",
        "AW",
        "AX",
        "AZ",
        "BA",
        "BB",
        "BD",
        "BE",
        "BF",
        "BG",
        "BH",
        "BI",
        "BJ",
        "BL",
        "BM",
        "BN",
        "BO",
        "BQ",
        "BR",
        "BS",
        "BT",
        "BV",
        "BW",
        "BY",
        "BZ",
        "CA",
        "CC",
        "CD",
        "CF",
        "CG",
        "CH",
        "CI",
        "CK",
        "CL",
        "CM",
        "CN",
        "CO",
        "CR",
        "CU",
        "CV",
        "CW",
        "CX",
        "CY",
        "CZ",
        "DE",
        "DJ",
        "DK",
        "DM",
        "DO",
        "DZ",
        "EC",
        "EE",
        "EG",
        "EH",
        "ER",
        "ES",
        "ET",
        "FI",
        "FJ",
        "FK",
        "FM",
        "FO",
        "FR",
        "GA",
        "GB",
        "GD",
        "GE",
        "GF",
        "GG",
        "GH",
        "GI",
        "GL",
        "GM",
        "GN",
        "GP",
        "GQ",
        "GR",
        "GS",
        "GT",
        "GU",
        "GW",
        "GY",
        "HK",
        "HM",
        "HN",
        "HR",
        "HT",
        "HU",
        "ID",
        "IE",
        "IL",
        "IM",
        "IN",
        "IO",
        "IQ",
        "IR",
        "IS",
        "IT",
        "JE",
        "JM",
        "JO",
        "JP",
        "KE",
        "KG",
        "KH",
        "KI",
        "KM",
        "KN",
        "KP",
        "KR",
        "KW",
        "KY",
        "KZ",
        "LA",
        "LB",
        "LC",
        "LI",
        "LK",
        "LR",
        "LS",
        "LT",
        "LU",
        "LV",
        "LY",
        "MA",
        "MC",
        "MD",
        "ME",
        "MF",
        "MG",
        "MH",
        "MK",
        "ML",
        "MM",
        "MN",
        "MO",
        "MP",
        "MQ",
        "MR",
        "MS",
        "MT",
        "MU",
        "MV",
        "MW",
        "MX",
        "MY",
        "MZ",
        "NA",
        "NC",
        "NE",
        "NF",
        "NG",
        "NI",
        "NL",
        "NO",
        "NP",
        "NR",
        "NU",
        "NZ",
        "OM",
        "PA",
        "PE",
        "PF",
        "PG",
        "PH",
        "PK",
        "PL",
        "PM",
        "PN",
        "PR",
        "PS",
        "PT",
        "PW",
        "PY",
        "QA",
        "RE",
        "RO",
        "RS",
        "RU",
        "RW",
        "SA",
        "SB",
        "SC",
        "SD",
        "SE",
        "SG",
        "SH",
        "SI",
        "SJ",
        "SK",
        "SL",
        "SM",
        "SN",
        "SO",
        "SR",
        "SS",
        "ST",
        "SV",
        "SX",
        "SY",
        "SZ",
        "TC",
        "TD",
        "TF",
        "TG",
        "TH",
        "TJ",
        "TK",
        "TL",
        "TM",
        "TN",
        "TO",
        "TR",
        "TT",
        "TV",
        "TW",
        "TZ",
        "UA",
        "UG",
        "UM",
        "US",
        "UY",
        "UZ",
        "VA",
        "VC",
        "VE",
        "VG",
        "VI",
        "VN",
        "VU",
        "WF",
        "WS",
        "YE",
        "YT",
        "ZA",
        "ZM",
        "ZW"
      ]
    },
    "Email": {
      "type": "string",
      "format": "email"
    },
    "Endpoint": {
      "type": "string",
      "format": "uri",
      "maxLength": 100,
      "minLength": 1
    },
    "Error": {
      "type": "object",
      "required": [
        "code",
        "message"
      ],
      "properties": {
        "code": {
          "description": "Either same as HTTP Status Code OR \u003e= 600.",
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        }
      }
    },
    "ID": {
      "type": "string",
      "format": "uuid4"
    },
    "JWT": {
      "type": "string",
      "maxLength": 1000,
      "minLength": 1
    },
    "Language": {
      "type": "string",
      "maxLength": 2,
      "minLength": 2,
      "enum": [
        "en",
        "fr"
      ]
    },
    "Name": {
      "description": "Full user name.",
      "type": "string",
      "maxLength": 100,
      "minLength": 1
    },
    "Password": {
      "type": "string"
    },
    "Phone": {
      "type": "string",
      "format": "phone"
    },
    "Profile": {
      "description": "User profile with auth details.",
      "type": "object",
      "required": [
        "persdataEndpoint",
        "authn",
        "authz"
      ],
      "properties": {
        "authn": {
          "description": "Is user authenticated by credentials provided in request.",
          "type": "boolean"
        },
        "authz": {
          "description": "User roles/permissions needed for authorization.",
          "type": "object",
          "required": [
            "user",
            "admin",
            "manager"
          ],
          "properties": {
            "admin": {
              "description": "Is user an admin.",
              "type": "boolean"
            },
            "manager": {
              "description": "Is user an manager.",
              "type": "boolean"
            },
            "user": {
              "description": "Is user has validated email.",
              "type": "boolean"
            }
          }
        },
        "email": {
          "$ref": "#/definitions/Email"
        },
        "id": {
          "$ref": "#/definitions/UserID"
        },
        "isolatedEntityId": {
          "$ref": "#/definitions/UserID"
        },
        "persdataEndpoint": {
          "$ref": "#/definitions/Endpoint"
        },
        "username": {
          "$ref": "#/definitions/Username"
        }
      }
    },
    "ResetPassToken": {
      "type": "string",
      "maxLength": 1000,
      "minLength": 1
    },
    "UserID": {
      "type": "string",
      "format": "uuid4"
    },
    "Username": {
      "type": "string",
      "maxLength": 63,
      "minLength": 1,
      "pattern": "^[A-Za-z0-9]+$"
    },
    "UsernameOrEmail": {
      "type": "string",
      "maxLength": 200,
      "minLength": 1
    }
  },
  "responses": {
    "GenericError": {
      "description": "Generic error response.",
      "schema": {
        "$ref": "#/definitions/Error"
      }
    },
    "NoContent": {
      "description": "The server successfully processed the request and is not returning any content."
    },
    "NoContentWithAuth": {
      "description": "The server successfully processed the request and is not returning any content.",
      "headers": {
        "Set-Cookie": {
          "type": "string",
          "description": "Session token."
        }
      }
    }
  },
  "securityDefinitions": {
    "cookieKey": {
      "description": "Session token inside cookie.",
      "type": "apiKey",
      "name": "Cookie",
      "in": "header"
    },
    "csrfToken": {
      "description": "Token for CSRF protection (tied to session token).",
      "type": "apiKey",
      "name": "X-CSRFTokenBound",
      "in": "header"
    }
  },
  "security": [
    {
      "cookieKey": []
    },
    {
      "cookieKey": [],
      "csrfToken": []
    }
  ]
}`))
	FlatSwaggerJSON = json.RawMessage([]byte(`{
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "schemes": [
    "http"
  ],
  "swagger": "2.0",
  "info": {
    "description": "## List of all custom errors\nFirst number is HTTP Status code, second is value of \"code\" field in returned JSON object, text description may or may not match \"message\" field in returned JSON object.\n- 404.101: invalid credentials\n",
    "title": "Authentication",
    "version": "1.0.0"
  },
  "basePath": "/api/v1/",
  "paths": {
    "/change-password": {
      "post": {
        "description": "Change user password and expire all user sessions including current one.",
        "operationId": "changePassword",
        "parameters": [
          {
            "name": "args",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "newPassword"
              ],
              "properties": {
                "newPassword": {
                  "$ref": "#/definitions/Password"
                },
                "oldPassword": {
                  "$ref": "#/definitions/Password"
                }
              }
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The server successfully processed the request and is not returning any content.",
            "headers": {
              "Set-Cookie": {
                "type": "string",
                "description": "Session token."
              }
            }
          },
          "default": {
            "description": "- 404.2004: password is too weak\n- 403.710: invalid password\n",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/delete-user": {
      "post": {
        "description": "Removes user account and expire all user sessions including current one.",
        "operationId": "deleteUser",
        "parameters": [
          {
            "name": "args",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "password"
              ],
              "properties": {
                "password": {
                  "$ref": "#/definitions/Password"
                }
              }
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The server successfully processed the request and is not returning any content.",
            "headers": {
              "Set-Cookie": {
                "type": "string",
                "description": "Session token."
              }
            }
          },
          "default": {
            "description": "- 403.710: invalid password\n",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/get-user-profile": {
      "post": {
        "security": [
          {
            "cookieKey": []
          },
          {
            "cookieKey": [],
            "csrfToken": []
          },
          {}
        ],
        "description": "Get user profile.",
        "operationId": "getUserProfile",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Profile"
            }
          },
          "default": {
            "description": "Generic error response.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/get-user-profile-by-id": {
      "post": {
        "security": [],
        "description": "Get public part of other user's profile by ID.",
        "operationId": "getUserProfileByID",
        "parameters": [
          {
            "name": "args",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "id"
              ],
              "properties": {
                "id": {
                  "$ref": "#/definitions/UserID"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Profile"
            }
          },
          "default": {
            "description": "Generic error response.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/is-email-available": {
      "post": {
        "security": [],
        "description": "Checks is email is available.",
        "operationId": "isEmailAvailable",
        "parameters": [
          {
            "name": "args",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "email"
              ],
              "properties": {
                "email": {
                  "$ref": "#/definitions/Email"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "required": [
                "available"
              ],
              "properties": {
                "available": {
                  "description": "True if email is available.",
                  "type": "boolean"
                }
              }
            }
          },
          "default": {
            "description": "Generic error response.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/is-username-available": {
      "post": {
        "description": "Checks is username available.",
        "operationId": "isUsernameAvailable",
        "parameters": [
          {
            "name": "args",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "username"
              ],
              "properties": {
                "username": {
                  "$ref": "#/definitions/Username"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "required": [
                "available"
              ],
              "properties": {
                "available": {
                  "description": "True if username is available.",
                  "type": "boolean"
                }
              }
            }
          },
          "default": {
            "description": "Generic error response.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/login": {
      "post": {
        "security": [],
        "description": "Sign in user.",
        "operationId": "login",
        "parameters": [
          {
            "name": "args",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "email",
                "password"
              ],
              "properties": {
                "email": {
                  "$ref": "#/definitions/Email"
                },
                "password": {
                  "$ref": "#/definitions/Password"
                }
              }
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The server successfully processed the request and is not returning any content.",
            "headers": {
              "Set-Cookie": {
                "type": "string",
                "description": "Session token."
              }
            }
          },
          "default": {
            "description": "- 404.101: invalid credentials\n- 404.707: no such email\n",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/logout": {
      "post": {
        "description": "Sign out user.",
        "operationId": "logout",
        "responses": {
          "204": {
            "description": "The server successfully processed the request and is not returning any content.",
            "headers": {
              "Set-Cookie": {
                "type": "string",
                "description": "Session token."
              }
            }
          },
          "default": {
            "description": "Generic error response.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/register-activate": {
      "post": {
        "security": [],
        "description": "Register new user by validated email.",
        "operationId": "register",
        "parameters": [
          {
            "name": "args",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "emailToken"
              ],
              "properties": {
                "emailToken": {
                  "$ref": "#/definitions/JWT"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "required": [
                "userID"
              ],
              "properties": {
                "userID": {
                  "$ref": "#/definitions/UserID"
                }
              }
            },
            "headers": {
              "Set-Cookie": {
                "type": "string",
                "description": "Session token."
              }
            }
          },
          "default": {
            "description": "- 404.2003: email is not available\n- 404.2001: invalid email validation token\n",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/register-activate-resend-email": {
      "post": {
        "security": [],
        "description": "Resend new email if old token is not valid.",
        "operationId": "registerActivateResendEmail",
        "parameters": [
          {
            "name": "args",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "emailToken"
              ],
              "properties": {
                "emailToken": {
                  "$ref": "#/definitions/JWT"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "default": {
            "description": "- 404.2001: invalid email validation token\n",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/request-registration": {
      "post": {
        "security": [],
        "description": "Sends email with validation token.",
        "operationId": "requestRegistration",
        "parameters": [
          {
            "name": "args",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "email",
                "password"
              ],
              "properties": {
                "email": {
                  "$ref": "#/definitions/Email"
                },
                "language": {
                  "$ref": "#/definitions/Language"
                },
                "password": {
                  "$ref": "#/definitions/Password"
                }
              }
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The server successfully processed the request and is not returning any content."
          },
          "default": {
            "description": "- 404.2003: email is not available\n- 404.2004: password is too weak\n",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/reset-password": {
      "post": {
        "security": [],
        "description": "Request password reset by  email.",
        "operationId": "resetPassword",
        "parameters": [
          {
            "name": "args",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "email"
              ],
              "properties": {
                "email": {
                  "$ref": "#/definitions/Email"
                }
              }
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The server successfully processed the request and is not returning any content."
          },
          "default": {
            "description": "- 404.101: invalid credentials\n- 404.707: no such email\n",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/search-users-by-username": {
      "post": {
        "description": "Get public part of up to 10 other user's profiles by username prefix. Ordered by username. Require exact match if username length is less than 4.\n",
        "operationId": "searchUsersByUsername",
        "parameters": [
          {
            "name": "args",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "username"
              ],
              "properties": {
                "username": {
                  "$ref": "#/definitions/Username"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "required": [
                "profiles"
              ],
              "properties": {
                "profiles": {
                  "type": "array",
                  "maxItems": 10,
                  "minItems": 0,
                  "items": {
                    "$ref": "#/definitions/Profile"
                  }
                }
              }
            }
          },
          "default": {
            "description": "Generic error response.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/set-blocked": {
      "post": {
        "description": "Let admin block/unblock all access to API for a user.",
        "operationId": "setBlocked",
        "parameters": [
          {
            "name": "args",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "id",
                "blocked"
              ],
              "properties": {
                "blocked": {
                  "description": "True to block user, False to unblock.",
                  "type": "boolean"
                },
                "id": {
                  "$ref": "#/definitions/UserID"
                }
              }
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The server successfully processed the request and is not returning any content."
          },
          "default": {
            "description": "Generic error response.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/set-email": {
      "post": {
        "security": [],
        "description": "Set new email.",
        "operationId": "setEmail",
        "parameters": [
          {
            "name": "args",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "emailToken"
              ],
              "properties": {
                "emailToken": {
                  "$ref": "#/definitions/JWT"
                }
              }
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The server successfully processed the request and is not returning any content."
          },
          "default": {
            "description": "- 404.2003: email is not available\n- 404.2001: invalid email validation token\n",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/set-new-password": {
      "post": {
        "security": [],
        "description": "Change user password using reset password token and expire all user sessions.",
        "operationId": "setNewPassword",
        "parameters": [
          {
            "name": "args",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "token",
                "password"
              ],
              "properties": {
                "password": {
                  "$ref": "#/definitions/Password"
                },
                "token": {
                  "$ref": "#/definitions/ResetPassToken"
                }
              }
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The server successfully processed the request and is not returning any content."
          },
          "default": {
            "description": "- 404.2004: password is too weak\n- 404.2005: invalid password reset token\n",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/set-persdata-region": {
      "post": {
        "description": "After calling this method client should save user's personal data on returned persdata service.",
        "operationId": "setPersDataRegion",
        "parameters": [
          {
            "name": "args",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "countryCode"
              ],
              "properties": {
                "countryCode": {
                  "$ref": "#/definitions/CountryCode"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "required": [
                "persdataEndpoint"
              ],
              "properties": {
                "persdataEndpoint": {
                  "$ref": "#/definitions/Endpoint"
                }
              }
            }
          },
          "default": {
            "description": "Generic error response.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/set-username": {
      "post": {
        "description": "Set user username.",
        "operationId": "setUsername",
        "parameters": [
          {
            "name": "args",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "username"
              ],
              "properties": {
                "username": {
                  "$ref": "#/definitions/Username"
                }
              }
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The server successfully processed the request and is not returning any content."
          },
          "default": {
            "description": "- 409.701: username is not available\n",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/validate-new-email": {
      "post": {
        "description": "Request user email change.",
        "operationId": "validateNewEmail",
        "parameters": [
          {
            "name": "args",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "email",
                "password"
              ],
              "properties": {
                "email": {
                  "$ref": "#/definitions/Email"
                },
                "password": {
                  "$ref": "#/definitions/Password"
                }
              }
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The server successfully processed the request and is not returning any content."
          },
          "default": {
            "description": "- 404.2003: email is not available\n- 403.710: invalid password\n",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "CountryCode": {
      "description": "Country code (ISO 3166-1 alpha-2).",
      "type": "string",
      "maxLength": 2,
      "minLength": 2,
      "enum": [
        "AD",
        "AE",
        "AF",
        "AG",
        "AI",
        "AL",
        "AM",
        "AO",
        "AQ",
        "AR",
        "AS",
        "AT",
        "AU",
        "AW",
        "AX",
        "AZ",
        "BA",
        "BB",
        "BD",
        "BE",
        "BF",
        "BG",
        "BH",
        "BI",
        "BJ",
        "BL",
        "BM",
        "BN",
        "BO",
        "BQ",
        "BR",
        "BS",
        "BT",
        "BV",
        "BW",
        "BY",
        "BZ",
        "CA",
        "CC",
        "CD",
        "CF",
        "CG",
        "CH",
        "CI",
        "CK",
        "CL",
        "CM",
        "CN",
        "CO",
        "CR",
        "CU",
        "CV",
        "CW",
        "CX",
        "CY",
        "CZ",
        "DE",
        "DJ",
        "DK",
        "DM",
        "DO",
        "DZ",
        "EC",
        "EE",
        "EG",
        "EH",
        "ER",
        "ES",
        "ET",
        "FI",
        "FJ",
        "FK",
        "FM",
        "FO",
        "FR",
        "GA",
        "GB",
        "GD",
        "GE",
        "GF",
        "GG",
        "GH",
        "GI",
        "GL",
        "GM",
        "GN",
        "GP",
        "GQ",
        "GR",
        "GS",
        "GT",
        "GU",
        "GW",
        "GY",
        "HK",
        "HM",
        "HN",
        "HR",
        "HT",
        "HU",
        "ID",
        "IE",
        "IL",
        "IM",
        "IN",
        "IO",
        "IQ",
        "IR",
        "IS",
        "IT",
        "JE",
        "JM",
        "JO",
        "JP",
        "KE",
        "KG",
        "KH",
        "KI",
        "KM",
        "KN",
        "KP",
        "KR",
        "KW",
        "KY",
        "KZ",
        "LA",
        "LB",
        "LC",
        "LI",
        "LK",
        "LR",
        "LS",
        "LT",
        "LU",
        "LV",
        "LY",
        "MA",
        "MC",
        "MD",
        "ME",
        "MF",
        "MG",
        "MH",
        "MK",
        "ML",
        "MM",
        "MN",
        "MO",
        "MP",
        "MQ",
        "MR",
        "MS",
        "MT",
        "MU",
        "MV",
        "MW",
        "MX",
        "MY",
        "MZ",
        "NA",
        "NC",
        "NE",
        "NF",
        "NG",
        "NI",
        "NL",
        "NO",
        "NP",
        "NR",
        "NU",
        "NZ",
        "OM",
        "PA",
        "PE",
        "PF",
        "PG",
        "PH",
        "PK",
        "PL",
        "PM",
        "PN",
        "PR",
        "PS",
        "PT",
        "PW",
        "PY",
        "QA",
        "RE",
        "RO",
        "RS",
        "RU",
        "RW",
        "SA",
        "SB",
        "SC",
        "SD",
        "SE",
        "SG",
        "SH",
        "SI",
        "SJ",
        "SK",
        "SL",
        "SM",
        "SN",
        "SO",
        "SR",
        "SS",
        "ST",
        "SV",
        "SX",
        "SY",
        "SZ",
        "TC",
        "TD",
        "TF",
        "TG",
        "TH",
        "TJ",
        "TK",
        "TL",
        "TM",
        "TN",
        "TO",
        "TR",
        "TT",
        "TV",
        "TW",
        "TZ",
        "UA",
        "UG",
        "UM",
        "US",
        "UY",
        "UZ",
        "VA",
        "VC",
        "VE",
        "VG",
        "VI",
        "VN",
        "VU",
        "WF",
        "WS",
        "YE",
        "YT",
        "ZA",
        "ZM",
        "ZW"
      ]
    },
    "Email": {
      "type": "string",
      "format": "email"
    },
    "Endpoint": {
      "type": "string",
      "format": "uri",
      "maxLength": 100,
      "minLength": 1
    },
    "Error": {
      "type": "object",
      "required": [
        "code",
        "message"
      ],
      "properties": {
        "code": {
          "description": "Either same as HTTP Status Code OR \u003e= 600.",
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        }
      }
    },
    "ID": {
      "type": "string",
      "format": "uuid4"
    },
    "JWT": {
      "type": "string",
      "maxLength": 1000,
      "minLength": 1
    },
    "Language": {
      "type": "string",
      "maxLength": 2,
      "minLength": 2,
      "enum": [
        "en",
        "fr"
      ]
    },
    "Name": {
      "description": "Full user name.",
      "type": "string",
      "maxLength": 100,
      "minLength": 1
    },
    "Password": {
      "type": "string"
    },
    "Phone": {
      "type": "string",
      "format": "phone"
    },
    "Profile": {
      "description": "User profile with auth details.",
      "type": "object",
      "required": [
        "persdataEndpoint",
        "authn",
        "authz"
      ],
      "properties": {
        "authn": {
          "description": "Is user authenticated by credentials provided in request.",
          "type": "boolean"
        },
        "authz": {
          "description": "User roles/permissions needed for authorization.",
          "type": "object",
          "required": [
            "user",
            "admin",
            "manager"
          ],
          "properties": {
            "admin": {
              "description": "Is user an admin.",
              "type": "boolean"
            },
            "manager": {
              "description": "Is user an manager.",
              "type": "boolean"
            },
            "user": {
              "description": "Is user has validated email.",
              "type": "boolean"
            }
          }
        },
        "email": {
          "$ref": "#/definitions/Email"
        },
        "id": {
          "$ref": "#/definitions/UserID"
        },
        "isolatedEntityId": {
          "$ref": "#/definitions/UserID"
        },
        "persdataEndpoint": {
          "$ref": "#/definitions/Endpoint"
        },
        "username": {
          "$ref": "#/definitions/Username"
        }
      }
    },
    "ProfileAuthz": {
      "description": "User roles/permissions needed for authorization.",
      "type": "object",
      "required": [
        "user",
        "admin",
        "manager"
      ],
      "properties": {
        "admin": {
          "description": "Is user an admin.",
          "type": "boolean"
        },
        "manager": {
          "description": "Is user an manager.",
          "type": "boolean"
        },
        "user": {
          "description": "Is user has validated email.",
          "type": "boolean"
        }
      }
    },
    "ResetPassToken": {
      "type": "string",
      "maxLength": 1000,
      "minLength": 1
    },
    "UserID": {
      "type": "string",
      "format": "uuid4"
    },
    "Username": {
      "type": "string",
      "maxLength": 63,
      "minLength": 1,
      "pattern": "^[A-Za-z0-9]+$"
    },
    "UsernameOrEmail": {
      "type": "string",
      "maxLength": 200,
      "minLength": 1
    }
  },
  "responses": {
    "GenericError": {
      "description": "Generic error response.",
      "schema": {
        "$ref": "#/definitions/Error"
      }
    },
    "NoContent": {
      "description": "The server successfully processed the request and is not returning any content."
    },
    "NoContentWithAuth": {
      "description": "The server successfully processed the request and is not returning any content.",
      "headers": {
        "Set-Cookie": {
          "type": "string",
          "description": "Session token."
        }
      }
    }
  },
  "securityDefinitions": {
    "cookieKey": {
      "description": "Session token inside cookie.",
      "type": "apiKey",
      "name": "Cookie",
      "in": "header"
    },
    "csrfToken": {
      "description": "Token for CSRF protection (tied to session token).",
      "type": "apiKey",
      "name": "X-CSRFTokenBound",
      "in": "header"
    }
  },
  "security": [
    {
      "cookieKey": []
    },
    {
      "cookieKey": [],
      "csrfToken": []
    }
  ]
}`))
}
